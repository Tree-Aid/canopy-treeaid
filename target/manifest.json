{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v9.json", "dbt_version": "1.5.8", "generated_at": "2023-10-24T08:26:26.911019Z", "invocation_id": "8ed12614-fbdf-4e6b-88ea-f38ee73b67c7", "env": {}, "project_id": "3f86ae6591227b0f8287c49707aec784", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "postgres"}, "nodes": {"test.tree_aid.source_unique_onadata_gb8_vte_edp_survey_apr-jun2022_id.bb39fc7787": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'gb8_vte_edp_survey_apr-jun2022')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_onadata_gb8_vte_edp_survey_apr-jun2022_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_onadata_gb8_vte_edp_survey_apr-jun2022_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_onadata_gb8_vte_edp_survey_apr-jun2022_id.bb39fc7787", "fqn": ["tree_aid", "staging", "source_unique_onadata_gb8_vte_edp_survey_apr-jun2022_id"], "alias": "source_unique_onadata_gb8_vte_edp_survey_apr-jun2022_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.129619, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "gb8_vte_edp_survey_apr-jun2022"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.onadata.gb8_vte_edp_survey_apr-jun2022"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_not_null_onadata_gb8_vte_edp_survey_apr-jun2022_id.a519ca8ffa": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'gb8_vte_edp_survey_apr-jun2022')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_onadata_gb8_vte_edp_survey_apr-jun2022_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_onadata_gb8_vte_edp_survey_apr-jun2022_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_onadata_gb8_vte_edp_survey_apr-jun2022_id.a519ca8ffa", "fqn": ["tree_aid", "staging", "source_not_null_onadata_gb8_vte_edp_survey_apr-jun2022_id"], "alias": "source_not_null_onadata_gb8_vte_edp_survey_apr-jun2022_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.132672, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "gb8_vte_edp_survey_apr-jun2022"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.onadata.gb8_vte_edp_survey_apr-jun2022"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_unique_onadata_mb6_vte_edp_survey_apr-jun2022_id.dc183f146c": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'mb6_vte_edp_survey_apr-jun2022')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_onadata_mb6_vte_edp_survey_apr-jun2022_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_onadata_mb6_vte_edp_survey_apr-jun2022_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_onadata_mb6_vte_edp_survey_apr-jun2022_id.dc183f146c", "fqn": ["tree_aid", "staging", "source_unique_onadata_mb6_vte_edp_survey_apr-jun2022_id"], "alias": "source_unique_onadata_mb6_vte_edp_survey_apr-jun2022_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.1362064, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "mb6_vte_edp_survey_apr-jun2022"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.onadata.mb6_vte_edp_survey_apr-jun2022"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_not_null_onadata_mb6_vte_edp_survey_apr-jun2022_id.c22aeb3fc2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'mb6_vte_edp_survey_apr-jun2022')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_onadata_mb6_vte_edp_survey_apr-jun2022_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_onadata_mb6_vte_edp_survey_apr-jun2022_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_onadata_mb6_vte_edp_survey_apr-jun2022_id.c22aeb3fc2", "fqn": ["tree_aid", "staging", "source_not_null_onadata_mb6_vte_edp_survey_apr-jun2022_id"], "alias": "source_not_null_onadata_mb6_vte_edp_survey_apr-jun2022_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.139022, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "mb6_vte_edp_survey_apr-jun2022"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.onadata.mb6_vte_edp_survey_apr-jun2022"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_unique_onadata_a_village_tree_enterprise_co-op_mb2_mali_id.c92c5a5ba0": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'a_village_tree_enterprise_co-op_mb2_mali')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_onadata_a_village_tree_enterprise_co-op_mb2_mali_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_onadata_a_villag_b570ef4c7200f7fc2714ce6a0375975b.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_onadata_a_village_tree_enterprise_co-op_mb2_mali_id.c92c5a5ba0", "fqn": ["tree_aid", "staging", "source_unique_onadata_a_village_tree_enterprise_co-op_mb2_mali_id"], "alias": "source_unique_onadata_a_villag_b570ef4c7200f7fc2714ce6a0375975b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_unique_onadata_a_villag_b570ef4c7200f7fc2714ce6a0375975b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_unique_onadata_a_villag_b570ef4c7200f7fc2714ce6a0375975b"}, "created_at": 1697110854.1422439, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_unique_onadata_a_villag_b570ef4c7200f7fc2714ce6a0375975b\") }}", "language": "sql", "refs": [], "sources": [["onadata", "a_village_tree_enterprise_co-op_mb2_mali"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.onadata.a_village_tree_enterprise_co-op_mb2_mali"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_not_null_onadata_a_village_tree_enterprise_co-op_mb2_mali_id.8c54939d9d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'a_village_tree_enterprise_co-op_mb2_mali')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_onadata_a_village_tree_enterprise_co-op_mb2_mali_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_onadata_a_vill_356900e52a18bb0d8003e0566b9536a6.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_onadata_a_village_tree_enterprise_co-op_mb2_mali_id.8c54939d9d", "fqn": ["tree_aid", "staging", "source_not_null_onadata_a_village_tree_enterprise_co-op_mb2_mali_id"], "alias": "source_not_null_onadata_a_vill_356900e52a18bb0d8003e0566b9536a6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_onadata_a_vill_356900e52a18bb0d8003e0566b9536a6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_onadata_a_vill_356900e52a18bb0d8003e0566b9536a6"}, "created_at": 1697110854.145131, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_onadata_a_vill_356900e52a18bb0d8003e0566b9536a6\") }}", "language": "sql", "refs": [], "sources": [["onadata", "a_village_tree_enterprise_co-op_mb2_mali"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.onadata.a_village_tree_enterprise_co-op_mb2_mali"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_unique_onadata_a_vte_coop_assessment_gb1_id.3b962c2661": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'a_vte_coop_assessment_gb1')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_onadata_a_vte_coop_assessment_gb1_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_onadata_a_vte_coop_assessment_gb1_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_onadata_a_vte_coop_assessment_gb1_id.3b962c2661", "fqn": ["tree_aid", "staging", "source_unique_onadata_a_vte_coop_assessment_gb1_id"], "alias": "source_unique_onadata_a_vte_coop_assessment_gb1_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.1486194, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "a_vte_coop_assessment_gb1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.onadata.a_vte_coop_assessment_gb1"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_not_null_onadata_a_vte_coop_assessment_gb1_id.0262004c72": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'a_vte_coop_assessment_gb1')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_onadata_a_vte_coop_assessment_gb1_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_onadata_a_vte_coop_assessment_gb1_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_onadata_a_vte_coop_assessment_gb1_id.0262004c72", "fqn": ["tree_aid", "staging", "source_not_null_onadata_a_vte_coop_assessment_gb1_id"], "alias": "source_not_null_onadata_a_vte_coop_assessment_gb1_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.1513839, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "a_vte_coop_assessment_gb1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.onadata.a_vte_coop_assessment_gb1"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_unique_onadata_tree_aid_rhomis_bc4_apr-jun22_final_id.749d93e16c": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'tree_aid_rhomis_bc4_apr-jun22_final')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_onadata_tree_aid_rhomis_bc4_apr-jun22_final_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_onadata_tree_aid_rhomis_bc4_apr-jun22_final_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_onadata_tree_aid_rhomis_bc4_apr-jun22_final_id.749d93e16c", "fqn": ["tree_aid", "staging", "source_unique_onadata_tree_aid_rhomis_bc4_apr-jun22_final_id"], "alias": "source_unique_onadata_tree_aid_rhomis_bc4_apr-jun22_final_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.1545558, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "tree_aid_rhomis_bc4_apr-jun22_final"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.onadata.tree_aid_rhomis_bc4_apr-jun22_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_not_null_onadata_tree_aid_rhomis_bc4_apr-jun22_final_id.8f391b36bc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'tree_aid_rhomis_bc4_apr-jun22_final')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_onadata_tree_aid_rhomis_bc4_apr-jun22_final_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_onadata_tree_aid_rhomis_bc4_apr-jun22_final_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_onadata_tree_aid_rhomis_bc4_apr-jun22_final_id.8f391b36bc", "fqn": ["tree_aid", "staging", "source_not_null_onadata_tree_aid_rhomis_bc4_apr-jun22_final_id"], "alias": "source_not_null_onadata_tree_aid_rhomis_bc4_apr-jun22_final_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.1576889, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "tree_aid_rhomis_bc4_apr-jun22_final"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.onadata.tree_aid_rhomis_bc4_apr-jun22_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_unique_onadata_burkina_ta_bb1_v1_3_1_tablet_id.c7047c5035": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'burkina_ta_bb1_v1_3_1_tablet')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_onadata_burkina_ta_bb1_v1_3_1_tablet_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_onadata_burkina_ta_bb1_v1_3_1_tablet_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_onadata_burkina_ta_bb1_v1_3_1_tablet_id.c7047c5035", "fqn": ["tree_aid", "staging", "source_unique_onadata_burkina_ta_bb1_v1_3_1_tablet_id"], "alias": "source_unique_onadata_burkina_ta_bb1_v1_3_1_tablet_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.1609614, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "burkina_ta_bb1_v1_3_1_tablet"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.onadata.burkina_ta_bb1_v1_3_1_tablet"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_not_null_onadata_burkina_ta_bb1_v1_3_1_tablet_id.aa7790be9f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'burkina_ta_bb1_v1_3_1_tablet')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_onadata_burkina_ta_bb1_v1_3_1_tablet_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_onadata_burkina_ta_bb1_v1_3_1_tablet_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_onadata_burkina_ta_bb1_v1_3_1_tablet_id.aa7790be9f", "fqn": ["tree_aid", "staging", "source_not_null_onadata_burkina_ta_bb1_v1_3_1_tablet_id"], "alias": "source_not_null_onadata_burkina_ta_bb1_v1_3_1_tablet_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.1628277, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "burkina_ta_bb1_v1_3_1_tablet"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.onadata.burkina_ta_bb1_v1_3_1_tablet"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_unique_onadata_burkina_ta_baseline_v1_3_webform_id.30c8fd9b0d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'burkina_ta_baseline_v1_3_webform')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_onadata_burkina_ta_baseline_v1_3_webform_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_onadata_burkina_ta_baseline_v1_3_webform_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_onadata_burkina_ta_baseline_v1_3_webform_id.30c8fd9b0d", "fqn": ["tree_aid", "staging", "source_unique_onadata_burkina_ta_baseline_v1_3_webform_id"], "alias": "source_unique_onadata_burkina_ta_baseline_v1_3_webform_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.1649764, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "burkina_ta_baseline_v1_3_webform"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.onadata.burkina_ta_baseline_v1_3_webform"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_not_null_onadata_burkina_ta_baseline_v1_3_webform_id.4ed897e765": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'burkina_ta_baseline_v1_3_webform')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_onadata_burkina_ta_baseline_v1_3_webform_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_onadata_burkina_ta_baseline_v1_3_webform_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_onadata_burkina_ta_baseline_v1_3_webform_id.4ed897e765", "fqn": ["tree_aid", "staging", "source_not_null_onadata_burkina_ta_baseline_v1_3_webform_id"], "alias": "source_not_null_onadata_burkina_ta_baseline_v1_3_webform_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.1677825, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "burkina_ta_baseline_v1_3_webform"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.onadata.burkina_ta_baseline_v1_3_webform"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_unique_onadata_ta_rho_mis_bb6_oct_dec21_id.cb2a2a63c0": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'ta_rho_mis_bb6_oct_dec21')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_onadata_ta_rho_mis_bb6_oct_dec21_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_onadata_ta_rho_mis_bb6_oct_dec21_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_onadata_ta_rho_mis_bb6_oct_dec21_id.cb2a2a63c0", "fqn": ["tree_aid", "staging", "source_unique_onadata_ta_rho_mis_bb6_oct_dec21_id"], "alias": "source_unique_onadata_ta_rho_mis_bb6_oct_dec21_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.16993, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "ta_rho_mis_bb6_oct_dec21"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.onadata.ta_rho_mis_bb6_oct_dec21"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_not_null_onadata_ta_rho_mis_bb6_oct_dec21_id.b76b7b158b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'ta_rho_mis_bb6_oct_dec21')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_onadata_ta_rho_mis_bb6_oct_dec21_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_onadata_ta_rho_mis_bb6_oct_dec21_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_onadata_ta_rho_mis_bb6_oct_dec21_id.b76b7b158b", "fqn": ["tree_aid", "staging", "source_not_null_onadata_ta_rho_mis_bb6_oct_dec21_id"], "alias": "source_not_null_onadata_ta_rho_mis_bb6_oct_dec21_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.1717806, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "ta_rho_mis_bb6_oct_dec21"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.onadata.ta_rho_mis_bb6_oct_dec21"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_unique_onadata_ta_rho_mis_bc1_endline_oct2020_final_id.33c0709f05": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'ta_rho_mis_bc1_endline_oct2020_final')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_onadata_ta_rho_mis_bc1_endline_oct2020_final_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_onadata_ta_rho_mis_bc1_endline_oct2020_final_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_onadata_ta_rho_mis_bc1_endline_oct2020_final_id.33c0709f05", "fqn": ["tree_aid", "staging", "source_unique_onadata_ta_rho_mis_bc1_endline_oct2020_final_id"], "alias": "source_unique_onadata_ta_rho_mis_bc1_endline_oct2020_final_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.173944, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "ta_rho_mis_bc1_endline_oct2020_final"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.onadata.ta_rho_mis_bc1_endline_oct2020_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_not_null_onadata_ta_rho_mis_bc1_endline_oct2020_final_id.32dcf43437": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'ta_rho_mis_bc1_endline_oct2020_final')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_onadata_ta_rho_mis_bc1_endline_oct2020_final_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_onadata_ta_rho_mis_bc1_endline_oct2020_final_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_onadata_ta_rho_mis_bc1_endline_oct2020_final_id.32dcf43437", "fqn": ["tree_aid", "staging", "source_not_null_onadata_ta_rho_mis_bc1_endline_oct2020_final_id"], "alias": "source_not_null_onadata_ta_rho_mis_bc1_endline_oct2020_final_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.1760743, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "ta_rho_mis_bc1_endline_oct2020_final"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.onadata.ta_rho_mis_bc1_endline_oct2020_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_unique_onadata_household_income_mtr_bc1_id.6592797a5c": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'household_income_mtr_bc1')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_onadata_household_income_mtr_bc1_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_onadata_household_income_mtr_bc1_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_onadata_household_income_mtr_bc1_id.6592797a5c", "fqn": ["tree_aid", "staging", "source_unique_onadata_household_income_mtr_bc1_id"], "alias": "source_unique_onadata_household_income_mtr_bc1_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.178212, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "household_income_mtr_bc1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.onadata.household_income_mtr_bc1"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_not_null_onadata_household_income_mtr_bc1_id.5cf5fc2e12": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'household_income_mtr_bc1')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_onadata_household_income_mtr_bc1_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_onadata_household_income_mtr_bc1_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_onadata_household_income_mtr_bc1_id.5cf5fc2e12", "fqn": ["tree_aid", "staging", "source_not_null_onadata_household_income_mtr_bc1_id"], "alias": "source_not_null_onadata_household_income_mtr_bc1_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.1800404, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "household_income_mtr_bc1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.onadata.household_income_mtr_bc1"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_unique_onadata_voice_choice_control_mtr_bc1_id.d708109868": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'voice_choice_control_mtr_bc1')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_onadata_voice_choice_control_mtr_bc1_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_onadata_voice_choice_control_mtr_bc1_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_onadata_voice_choice_control_mtr_bc1_id.d708109868", "fqn": ["tree_aid", "staging", "source_unique_onadata_voice_choice_control_mtr_bc1_id"], "alias": "source_unique_onadata_voice_choice_control_mtr_bc1_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.182216, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "voice_choice_control_mtr_bc1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.onadata.voice_choice_control_mtr_bc1"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_not_null_onadata_voice_choice_control_mtr_bc1_id.76255dcbc2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'voice_choice_control_mtr_bc1')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_onadata_voice_choice_control_mtr_bc1_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_onadata_voice_choice_control_mtr_bc1_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_onadata_voice_choice_control_mtr_bc1_id.76255dcbc2", "fqn": ["tree_aid", "staging", "source_not_null_onadata_voice_choice_control_mtr_bc1_id"], "alias": "source_not_null_onadata_voice_choice_control_mtr_bc1_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.1843462, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "voice_choice_control_mtr_bc1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.onadata.voice_choice_control_mtr_bc1"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_unique_onadata_ta_rhomis_eco_q1_2022_id.20f923d61c": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'ta_rhomis_eco_q1_2022')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_onadata_ta_rhomis_eco_q1_2022_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_onadata_ta_rhomis_eco_q1_2022_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_onadata_ta_rhomis_eco_q1_2022_id.20f923d61c", "fqn": ["tree_aid", "staging", "source_unique_onadata_ta_rhomis_eco_q1_2022_id"], "alias": "source_unique_onadata_ta_rhomis_eco_q1_2022_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.186499, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "ta_rhomis_eco_q1_2022"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.onadata.ta_rhomis_eco_q1_2022"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_not_null_onadata_ta_rhomis_eco_q1_2022_id.1833631958": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'ta_rhomis_eco_q1_2022')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_onadata_ta_rhomis_eco_q1_2022_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_onadata_ta_rhomis_eco_q1_2022_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_onadata_ta_rhomis_eco_q1_2022_id.1833631958", "fqn": ["tree_aid", "staging", "source_not_null_onadata_ta_rhomis_eco_q1_2022_id"], "alias": "source_not_null_onadata_ta_rhomis_eco_q1_2022_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.188318, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "ta_rhomis_eco_q1_2022"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.onadata.ta_rhomis_eco_q1_2022"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_unique_onadata_ethiopia_ea3_eb5_1_3_4_id.d0b90c6208": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'ethiopia_ea3_eb5_1_3_4')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_onadata_ethiopia_ea3_eb5_1_3_4_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_onadata_ethiopia_ea3_eb5_1_3_4_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_onadata_ethiopia_ea3_eb5_1_3_4_id.d0b90c6208", "fqn": ["tree_aid", "staging", "source_unique_onadata_ethiopia_ea3_eb5_1_3_4_id"], "alias": "source_unique_onadata_ethiopia_ea3_eb5_1_3_4_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.1907864, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "ethiopia_ea3_eb5_1_3_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.onadata.ethiopia_ea3_eb5_1_3_4"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_not_null_onadata_ethiopia_ea3_eb5_1_3_4_id.888a32f1ed": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'ethiopia_ea3_eb5_1_3_4')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_onadata_ethiopia_ea3_eb5_1_3_4_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_onadata_ethiopia_ea3_eb5_1_3_4_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_onadata_ethiopia_ea3_eb5_1_3_4_id.888a32f1ed", "fqn": ["tree_aid", "staging", "source_not_null_onadata_ethiopia_ea3_eb5_1_3_4_id"], "alias": "source_not_null_onadata_ethiopia_ea3_eb5_1_3_4_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.1925848, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "ethiopia_ea3_eb5_1_3_4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.onadata.ethiopia_ea3_eb5_1_3_4"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_unique_onadata_ethiopia_meki_2_extra_id.0bb7330c0b": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'ethiopia_meki_2_extra')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_onadata_ethiopia_meki_2_extra_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_onadata_ethiopia_meki_2_extra_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_onadata_ethiopia_meki_2_extra_id.0bb7330c0b", "fqn": ["tree_aid", "staging", "source_unique_onadata_ethiopia_meki_2_extra_id"], "alias": "source_unique_onadata_ethiopia_meki_2_extra_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.1947315, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "ethiopia_meki_2_extra"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.onadata.ethiopia_meki_2_extra"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_not_null_onadata_ethiopia_meki_2_extra_id.050b572bea": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'ethiopia_meki_2_extra')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_onadata_ethiopia_meki_2_extra_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_onadata_ethiopia_meki_2_extra_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_onadata_ethiopia_meki_2_extra_id.050b572bea", "fqn": ["tree_aid", "staging", "source_not_null_onadata_ethiopia_meki_2_extra_id"], "alias": "source_not_null_onadata_ethiopia_meki_2_extra_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.1965554, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "ethiopia_meki_2_extra"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.onadata.ethiopia_meki_2_extra"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_unique_onadata_ethiopia_meki_2_id.cbfc70ce0f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'ethiopia_meki_2')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_onadata_ethiopia_meki_2_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_onadata_ethiopia_meki_2_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_onadata_ethiopia_meki_2_id.cbfc70ce0f", "fqn": ["tree_aid", "staging", "source_unique_onadata_ethiopia_meki_2_id"], "alias": "source_unique_onadata_ethiopia_meki_2_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.1989474, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "ethiopia_meki_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.onadata.ethiopia_meki_2"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_not_null_onadata_ethiopia_meki_2_id.b3d085d711": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'ethiopia_meki_2')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_onadata_ethiopia_meki_2_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_onadata_ethiopia_meki_2_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_onadata_ethiopia_meki_2_id.b3d085d711", "fqn": ["tree_aid", "staging", "source_not_null_onadata_ethiopia_meki_2_id"], "alias": "source_not_null_onadata_ethiopia_meki_2_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.2007473, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "ethiopia_meki_2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.onadata.ethiopia_meki_2"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_unique_onadata_eb8_2019_id.f7b3def8b9": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'eb8_2019')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_onadata_eb8_2019_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_onadata_eb8_2019_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_onadata_eb8_2019_id.f7b3def8b9", "fqn": ["tree_aid", "staging", "source_unique_onadata_eb8_2019_id"], "alias": "source_unique_onadata_eb8_2019_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.2028623, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "eb8_2019"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.onadata.eb8_2019"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_not_null_onadata_eb8_2019_id.98a94ac07c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'eb8_2019')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_onadata_eb8_2019_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_onadata_eb8_2019_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_onadata_eb8_2019_id.98a94ac07c", "fqn": ["tree_aid", "staging", "source_not_null_onadata_eb8_2019_id"], "alias": "source_not_null_onadata_eb8_2019_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.2046914, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "eb8_2019"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.onadata.eb8_2019"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_unique_onadata_ta_rhomis_eb3eb8_2020_id.036d74339b": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'ta_rhomis_eb3eb8_2020')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_onadata_ta_rhomis_eb3eb8_2020_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_onadata_ta_rhomis_eb3eb8_2020_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_onadata_ta_rhomis_eb3eb8_2020_id.036d74339b", "fqn": ["tree_aid", "staging", "source_unique_onadata_ta_rhomis_eb3eb8_2020_id"], "alias": "source_unique_onadata_ta_rhomis_eb3eb8_2020_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.2070723, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "ta_rhomis_eb3eb8_2020"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.onadata.ta_rhomis_eb3eb8_2020"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_not_null_onadata_ta_rhomis_eb3eb8_2020_id.207cf662ee": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'ta_rhomis_eb3eb8_2020')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_onadata_ta_rhomis_eb3eb8_2020_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_onadata_ta_rhomis_eb3eb8_2020_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_onadata_ta_rhomis_eb3eb8_2020_id.207cf662ee", "fqn": ["tree_aid", "staging", "source_not_null_onadata_ta_rhomis_eb3eb8_2020_id"], "alias": "source_not_null_onadata_ta_rhomis_eb3eb8_2020_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.2089152, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "ta_rhomis_eb3eb8_2020"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.onadata.ta_rhomis_eb3eb8_2020"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_unique_onadata_ta_rhomis_gb8_endline_jan-mar2021_consolidated_id.2008927689": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'ta_rhomis_gb8_endline_jan-mar2021_consolidated')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_onadata_ta_rhomis_gb8_endline_jan-mar2021_consolidated_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_onadata_ta_rhomi_abef1425dcc9d5db13f3871df4f55698.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_onadata_ta_rhomis_gb8_endline_jan-mar2021_consolidated_id.2008927689", "fqn": ["tree_aid", "staging", "source_unique_onadata_ta_rhomis_gb8_endline_jan-mar2021_consolidated_id"], "alias": "source_unique_onadata_ta_rhomi_abef1425dcc9d5db13f3871df4f55698", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_unique_onadata_ta_rhomi_abef1425dcc9d5db13f3871df4f55698", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_unique_onadata_ta_rhomi_abef1425dcc9d5db13f3871df4f55698"}, "created_at": 1697110854.2110531, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_unique_onadata_ta_rhomi_abef1425dcc9d5db13f3871df4f55698\") }}", "language": "sql", "refs": [], "sources": [["onadata", "ta_rhomis_gb8_endline_jan-mar2021_consolidated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.onadata.ta_rhomis_gb8_endline_jan-mar2021_consolidated"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_not_null_onadata_ta_rhomis_gb8_endline_jan-mar2021_consolidated_id.5c43b81e9c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'ta_rhomis_gb8_endline_jan-mar2021_consolidated')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_onadata_ta_rhomis_gb8_endline_jan-mar2021_consolidated_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_onadata_ta_rho_352db829d54aaf0c5c62dfcd8beee821.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_onadata_ta_rhomis_gb8_endline_jan-mar2021_consolidated_id.5c43b81e9c", "fqn": ["tree_aid", "staging", "source_not_null_onadata_ta_rhomis_gb8_endline_jan-mar2021_consolidated_id"], "alias": "source_not_null_onadata_ta_rho_352db829d54aaf0c5c62dfcd8beee821", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_onadata_ta_rho_352db829d54aaf0c5c62dfcd8beee821", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_onadata_ta_rho_352db829d54aaf0c5c62dfcd8beee821"}, "created_at": 1697110854.2129304, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_onadata_ta_rho_352db829d54aaf0c5c62dfcd8beee821\") }}", "language": "sql", "refs": [], "sources": [["onadata", "ta_rhomis_gb8_endline_jan-mar2021_consolidated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.onadata.ta_rhomis_gb8_endline_jan-mar2021_consolidated"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_unique_onadata_gb1_ta_baseline_v1_3_3_id.27ffa08831": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'gb1_ta_baseline_v1_3_3')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_onadata_gb1_ta_baseline_v1_3_3_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_onadata_gb1_ta_baseline_v1_3_3_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_onadata_gb1_ta_baseline_v1_3_3_id.27ffa08831", "fqn": ["tree_aid", "staging", "source_unique_onadata_gb1_ta_baseline_v1_3_3_id"], "alias": "source_unique_onadata_gb1_ta_baseline_v1_3_3_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.215348, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "gb1_ta_baseline_v1_3_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.onadata.gb1_ta_baseline_v1_3_3"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_not_null_onadata_gb1_ta_baseline_v1_3_3_id.9aecd78f35": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'gb1_ta_baseline_v1_3_3')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_onadata_gb1_ta_baseline_v1_3_3_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_onadata_gb1_ta_baseline_v1_3_3_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_onadata_gb1_ta_baseline_v1_3_3_id.9aecd78f35", "fqn": ["tree_aid", "staging", "source_not_null_onadata_gb1_ta_baseline_v1_3_3_id"], "alias": "source_not_null_onadata_gb1_ta_baseline_v1_3_3_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.2171946, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "gb1_ta_baseline_v1_3_3"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.onadata.gb1_ta_baseline_v1_3_3"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_unique_onadata_tree_aid_rhomis_gb8_final_id.0bc9453200": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'tree_aid_rhomis_gb8_final')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_onadata_tree_aid_rhomis_gb8_final_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_onadata_tree_aid_rhomis_gb8_final_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_onadata_tree_aid_rhomis_gb8_final_id.0bc9453200", "fqn": ["tree_aid", "staging", "source_unique_onadata_tree_aid_rhomis_gb8_final_id"], "alias": "source_unique_onadata_tree_aid_rhomis_gb8_final_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.2193208, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "tree_aid_rhomis_gb8_final"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.onadata.tree_aid_rhomis_gb8_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_not_null_onadata_tree_aid_rhomis_gb8_final_id.2a076200ce": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'tree_aid_rhomis_gb8_final')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_onadata_tree_aid_rhomis_gb8_final_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_onadata_tree_aid_rhomis_gb8_final_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_onadata_tree_aid_rhomis_gb8_final_id.2a076200ce", "fqn": ["tree_aid", "staging", "source_not_null_onadata_tree_aid_rhomis_gb8_final_id"], "alias": "source_not_null_onadata_tree_aid_rhomis_gb8_final_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.2214944, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "tree_aid_rhomis_gb8_final"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.onadata.tree_aid_rhomis_gb8_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_unique_onadata_ta_rhomis_gb1_2021_id.c38987e9fe": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'ta_rhomis_gb1_2021')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_onadata_ta_rhomis_gb1_2021_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_onadata_ta_rhomis_gb1_2021_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_onadata_ta_rhomis_gb1_2021_id.c38987e9fe", "fqn": ["tree_aid", "staging", "source_unique_onadata_ta_rhomis_gb1_2021_id"], "alias": "source_unique_onadata_ta_rhomis_gb1_2021_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.223621, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "ta_rhomis_gb1_2021"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.onadata.ta_rhomis_gb1_2021"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_not_null_onadata_ta_rhomis_gb1_2021_id.90fb347399": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'ta_rhomis_gb1_2021')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_onadata_ta_rhomis_gb1_2021_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_onadata_ta_rhomis_gb1_2021_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_onadata_ta_rhomis_gb1_2021_id.90fb347399", "fqn": ["tree_aid", "staging", "source_not_null_onadata_ta_rhomis_gb1_2021_id"], "alias": "source_not_null_onadata_ta_rhomis_gb1_2021_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.225471, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "ta_rhomis_gb1_2021"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.onadata.ta_rhomis_gb1_2021"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_unique_onadata_ta_rho_mis_gc6_2021_id.4b0c6bbcac": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'ta_rho_mis_gc6_2021')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_onadata_ta_rho_mis_gc6_2021_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_onadata_ta_rho_mis_gc6_2021_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_onadata_ta_rho_mis_gc6_2021_id.4b0c6bbcac", "fqn": ["tree_aid", "staging", "source_unique_onadata_ta_rho_mis_gc6_2021_id"], "alias": "source_unique_onadata_ta_rho_mis_gc6_2021_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.2275815, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "ta_rho_mis_gc6_2021"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.onadata.ta_rho_mis_gc6_2021"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_not_null_onadata_ta_rho_mis_gc6_2021_id.f85f8fda91": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'ta_rho_mis_gc6_2021')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_onadata_ta_rho_mis_gc6_2021_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_onadata_ta_rho_mis_gc6_2021_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_onadata_ta_rho_mis_gc6_2021_id.f85f8fda91", "fqn": ["tree_aid", "staging", "source_not_null_onadata_ta_rho_mis_gc6_2021_id"], "alias": "source_not_null_onadata_ta_rho_mis_gc6_2021_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.2297146, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "ta_rho_mis_gc6_2021"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.onadata.ta_rho_mis_gc6_2021"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_unique_onadata_ta_rhomis_gc3_oct_2020_id.8f15065350": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'ta_rhomis_gc3_oct_2020')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_onadata_ta_rhomis_gc3_oct_2020_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_onadata_ta_rhomis_gc3_oct_2020_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_onadata_ta_rhomis_gc3_oct_2020_id.8f15065350", "fqn": ["tree_aid", "staging", "source_unique_onadata_ta_rhomis_gc3_oct_2020_id"], "alias": "source_unique_onadata_ta_rhomis_gc3_oct_2020_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.2318144, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "ta_rhomis_gc3_oct_2020"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.onadata.ta_rhomis_gc3_oct_2020"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_not_null_onadata_ta_rhomis_gc3_oct_2020_id.7affd66d1c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'ta_rhomis_gc3_oct_2020')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_onadata_ta_rhomis_gc3_oct_2020_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_onadata_ta_rhomis_gc3_oct_2020_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_onadata_ta_rhomis_gc3_oct_2020_id.7affd66d1c", "fqn": ["tree_aid", "staging", "source_not_null_onadata_ta_rhomis_gc3_oct_2020_id"], "alias": "source_not_null_onadata_ta_rhomis_gc3_oct_2020_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.233697, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "ta_rhomis_gc3_oct_2020"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.onadata.ta_rhomis_gc3_oct_2020"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_unique_onadata_mb2_baseline_id.b7b188a1df": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'mb2_baseline')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_onadata_mb2_baseline_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_onadata_mb2_baseline_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_onadata_mb2_baseline_id.b7b188a1df", "fqn": ["tree_aid", "staging", "source_unique_onadata_mb2_baseline_id"], "alias": "source_unique_onadata_mb2_baseline_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.235818, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "mb2_baseline"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.onadata.mb2_baseline"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_not_null_onadata_mb2_baseline_id.9788ffb6eb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'mb2_baseline')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_onadata_mb2_baseline_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_onadata_mb2_baseline_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_onadata_mb2_baseline_id.9788ffb6eb", "fqn": ["tree_aid", "staging", "source_not_null_onadata_mb2_baseline_id"], "alias": "source_not_null_onadata_mb2_baseline_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.237938, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "mb2_baseline"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.onadata.mb2_baseline"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_unique_onadata_mb2_rhomis_endline_april2020_id.81957106dc": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'mb2_rhomis_endline_april2020')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_onadata_mb2_rhomis_endline_april2020_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_onadata_mb2_rhomis_endline_april2020_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_onadata_mb2_rhomis_endline_april2020_id.81957106dc", "fqn": ["tree_aid", "staging", "source_unique_onadata_mb2_rhomis_endline_april2020_id"], "alias": "source_unique_onadata_mb2_rhomis_endline_april2020_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.2400298, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "mb2_rhomis_endline_april2020"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.onadata.mb2_rhomis_endline_april2020"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_not_null_onadata_mb2_rhomis_endline_april2020_id.601c4ecc38": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'mb2_rhomis_endline_april2020')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_onadata_mb2_rhomis_endline_april2020_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_onadata_mb2_rhomis_endline_april2020_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_onadata_mb2_rhomis_endline_april2020_id.601c4ecc38", "fqn": ["tree_aid", "staging", "source_not_null_onadata_mb2_rhomis_endline_april2020_id"], "alias": "source_not_null_onadata_mb2_rhomis_endline_april2020_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.2418678, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "mb2_rhomis_endline_april2020"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.onadata.mb2_rhomis_endline_april2020"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_unique_onadata_tree_aid_rho_mis_mb6_2020_id.06f6c58c7a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'tree_aid_rho_mis_mb6_2020')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_onadata_tree_aid_rho_mis_mb6_2020_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_onadata_tree_aid_rho_mis_mb6_2020_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_onadata_tree_aid_rho_mis_mb6_2020_id.06f6c58c7a", "fqn": ["tree_aid", "staging", "source_unique_onadata_tree_aid_rho_mis_mb6_2020_id"], "alias": "source_unique_onadata_tree_aid_rho_mis_mb6_2020_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.2440019, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "tree_aid_rho_mis_mb6_2020"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.onadata.tree_aid_rho_mis_mb6_2020"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_not_null_onadata_tree_aid_rho_mis_mb6_2020_id.e6117b44d4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'tree_aid_rho_mis_mb6_2020')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_onadata_tree_aid_rho_mis_mb6_2020_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_onadata_tree_aid_rho_mis_mb6_2020_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_onadata_tree_aid_rho_mis_mb6_2020_id.e6117b44d4", "fqn": ["tree_aid", "staging", "source_not_null_onadata_tree_aid_rho_mis_mb6_2020_id"], "alias": "source_not_null_onadata_tree_aid_rho_mis_mb6_2020_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.2461023, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "tree_aid_rho_mis_mb6_2020"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.onadata.tree_aid_rho_mis_mb6_2020"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_unique_onadata_mb6_income_agri_nrm_vcc_jan-mar22_id.3ce154b735": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'mb6_income_agri_nrm_vcc_jan-mar22')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_onadata_mb6_income_agri_nrm_vcc_jan-mar22_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_onadata_mb6_income_agri_nrm_vcc_jan-mar22_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_onadata_mb6_income_agri_nrm_vcc_jan-mar22_id.3ce154b735", "fqn": ["tree_aid", "staging", "source_unique_onadata_mb6_income_agri_nrm_vcc_jan-mar22_id"], "alias": "source_unique_onadata_mb6_income_agri_nrm_vcc_jan-mar22_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.2482038, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "mb6_income_agri_nrm_vcc_jan-mar22"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.onadata.mb6_income_agri_nrm_vcc_jan-mar22"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_not_null_onadata_mb6_income_agri_nrm_vcc_jan-mar22_id.7e6b2eeb63": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'mb6_income_agri_nrm_vcc_jan-mar22')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_onadata_mb6_income_agri_nrm_vcc_jan-mar22_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_onadata_mb6_income_agri_nrm_vcc_jan-mar22_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_onadata_mb6_income_agri_nrm_vcc_jan-mar22_id.7e6b2eeb63", "fqn": ["tree_aid", "staging", "source_not_null_onadata_mb6_income_agri_nrm_vcc_jan-mar22_id"], "alias": "source_not_null_onadata_mb6_income_agri_nrm_vcc_jan-mar22_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.2500398, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "mb6_income_agri_nrm_vcc_jan-mar22"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.onadata.mb6_income_agri_nrm_vcc_jan-mar22"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_unique_onadata_tree_aid_rhomis_na6_endline_id.2a0eec5d18": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'tree_aid_rhomis_na6_endline')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_onadata_tree_aid_rhomis_na6_endline_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_onadata_tree_aid_rhomis_na6_endline_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_onadata_tree_aid_rhomis_na6_endline_id.2a0eec5d18", "fqn": ["tree_aid", "staging", "source_unique_onadata_tree_aid_rhomis_na6_endline_id"], "alias": "source_unique_onadata_tree_aid_rhomis_na6_endline_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.2524436, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "tree_aid_rhomis_na6_endline"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.onadata.tree_aid_rhomis_na6_endline"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_not_null_onadata_tree_aid_rhomis_na6_endline_id.8398398f6d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'tree_aid_rhomis_na6_endline')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_onadata_tree_aid_rhomis_na6_endline_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_onadata_tree_aid_rhomis_na6_endline_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_onadata_tree_aid_rhomis_na6_endline_id.8398398f6d", "fqn": ["tree_aid", "staging", "source_not_null_onadata_tree_aid_rhomis_na6_endline_id"], "alias": "source_not_null_onadata_tree_aid_rhomis_na6_endline_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.2542849, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "tree_aid_rhomis_na6_endline"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.onadata.tree_aid_rhomis_na6_endline"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_unique_onadata_tree_aid_rhomis_2_0_niger_na4_id.4b6fd3f547": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'tree_aid_rhomis_2_0_niger_na4')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_onadata_tree_aid_rhomis_2_0_niger_na4_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_onadata_tree_aid_rhomis_2_0_niger_na4_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_onadata_tree_aid_rhomis_2_0_niger_na4_id.4b6fd3f547", "fqn": ["tree_aid", "staging", "source_unique_onadata_tree_aid_rhomis_2_0_niger_na4_id"], "alias": "source_unique_onadata_tree_aid_rhomis_2_0_niger_na4_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.2563767, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "tree_aid_rhomis_2_0_niger_na4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.onadata.tree_aid_rhomis_2_0_niger_na4"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_not_null_onadata_tree_aid_rhomis_2_0_niger_na4_id.cdee9abf37": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'tree_aid_rhomis_2_0_niger_na4')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_onadata_tree_aid_rhomis_2_0_niger_na4_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_onadata_tree_aid_rhomis_2_0_niger_na4_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_onadata_tree_aid_rhomis_2_0_niger_na4_id.cdee9abf37", "fqn": ["tree_aid", "staging", "source_not_null_onadata_tree_aid_rhomis_2_0_niger_na4_id"], "alias": "source_not_null_onadata_tree_aid_rhomis_2_0_niger_na4_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.2582211, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "tree_aid_rhomis_2_0_niger_na4"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.onadata.tree_aid_rhomis_2_0_niger_na4"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_unique_onadata_tree_aid_rhomis_na6_finale_id.e190dd457f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'tree_aid_rhomis_na6_finale')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_onadata_tree_aid_rhomis_na6_finale_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_onadata_tree_aid_rhomis_na6_finale_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_onadata_tree_aid_rhomis_na6_finale_id.e190dd457f", "fqn": ["tree_aid", "staging", "source_unique_onadata_tree_aid_rhomis_na6_finale_id"], "alias": "source_unique_onadata_tree_aid_rhomis_na6_finale_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.2608387, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "tree_aid_rhomis_na6_finale"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.onadata.tree_aid_rhomis_na6_finale"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_not_null_onadata_tree_aid_rhomis_na6_finale_id.18bde80bdb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'tree_aid_rhomis_na6_finale')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_onadata_tree_aid_rhomis_na6_finale_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_onadata_tree_aid_rhomis_na6_finale_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_onadata_tree_aid_rhomis_na6_finale_id.18bde80bdb", "fqn": ["tree_aid", "staging", "source_not_null_onadata_tree_aid_rhomis_na6_finale_id"], "alias": "source_not_null_onadata_tree_aid_rhomis_na6_finale_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.2626815, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "tree_aid_rhomis_na6_finale"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.onadata.tree_aid_rhomis_na6_finale"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_unique_onadata_rhomis_treeaid_na4_endline_june2021_tele_final_id.9e48953ec7": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'rhomis_treeaid_na4_endline_june2021_tele_final')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_onadata_rhomis_treeaid_na4_endline_june2021_tele_final_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_onadata_rhomis_t_4cb6b1738d8ff1eacac7774b1c8ec4d7.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_onadata_rhomis_treeaid_na4_endline_june2021_tele_final_id.9e48953ec7", "fqn": ["tree_aid", "staging", "source_unique_onadata_rhomis_treeaid_na4_endline_june2021_tele_final_id"], "alias": "source_unique_onadata_rhomis_t_4cb6b1738d8ff1eacac7774b1c8ec4d7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_unique_onadata_rhomis_t_4cb6b1738d8ff1eacac7774b1c8ec4d7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_unique_onadata_rhomis_t_4cb6b1738d8ff1eacac7774b1c8ec4d7"}, "created_at": 1697110854.264864, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_unique_onadata_rhomis_t_4cb6b1738d8ff1eacac7774b1c8ec4d7\") }}", "language": "sql", "refs": [], "sources": [["onadata", "rhomis_treeaid_na4_endline_june2021_tele_final"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.onadata.rhomis_treeaid_na4_endline_june2021_tele_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_not_null_onadata_rhomis_treeaid_na4_endline_june2021_tele_final_id.4c4114764e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'rhomis_treeaid_na4_endline_june2021_tele_final')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_onadata_rhomis_treeaid_na4_endline_june2021_tele_final_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_onadata_rhomis_858ac21e1453204c7f405737ee6e7e36.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_onadata_rhomis_treeaid_na4_endline_june2021_tele_final_id.4c4114764e", "fqn": ["tree_aid", "staging", "source_not_null_onadata_rhomis_treeaid_na4_endline_june2021_tele_final_id"], "alias": "source_not_null_onadata_rhomis_858ac21e1453204c7f405737ee6e7e36", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_onadata_rhomis_858ac21e1453204c7f405737ee6e7e36", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_onadata_rhomis_858ac21e1453204c7f405737ee6e7e36"}, "created_at": 1697110854.266722, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_onadata_rhomis_858ac21e1453204c7f405737ee6e7e36\") }}", "language": "sql", "refs": [], "sources": [["onadata", "rhomis_treeaid_na4_endline_june2021_tele_final"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.onadata.rhomis_treeaid_na4_endline_june2021_tele_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_unique_onadata_mc2_rho_mis_jul-sep22_final_id.16515c892e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'mc2_rho_mis_jul-sep22_final')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_onadata_mc2_rho_mis_jul-sep22_final_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_onadata_mc2_rho_mis_jul-sep22_final_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_onadata_mc2_rho_mis_jul-sep22_final_id.16515c892e", "fqn": ["tree_aid", "staging", "source_unique_onadata_mc2_rho_mis_jul-sep22_final_id"], "alias": "source_unique_onadata_mc2_rho_mis_jul-sep22_final_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.2691095, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "mc2_rho_mis_jul-sep22_final"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.onadata.mc2_rho_mis_jul-sep22_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_not_null_onadata_mc2_rho_mis_jul-sep22_final_id.9443341505": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'mc2_rho_mis_jul-sep22_final')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_onadata_mc2_rho_mis_jul-sep22_final_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_onadata_mc2_rho_mis_jul-sep22_final_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_onadata_mc2_rho_mis_jul-sep22_final_id.9443341505", "fqn": ["tree_aid", "staging", "source_not_null_onadata_mc2_rho_mis_jul-sep22_final_id"], "alias": "source_not_null_onadata_mc2_rho_mis_jul-sep22_final_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.2709448, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "mc2_rho_mis_jul-sep22_final"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.onadata.mc2_rho_mis_jul-sep22_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_unique_onadata_tree_aid_rho_mis_bc3_oct-dec2022_final_id.bf80769e43": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'tree_aid_rho_mis_bc3_oct-dec2022_final')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_onadata_tree_aid_rho_mis_bc3_oct-dec2022_final_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_onadata_tree_aid_rho_mis_bc3_oct-dec2022_final_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_onadata_tree_aid_rho_mis_bc3_oct-dec2022_final_id.bf80769e43", "fqn": ["tree_aid", "staging", "source_unique_onadata_tree_aid_rho_mis_bc3_oct-dec2022_final_id"], "alias": "source_unique_onadata_tree_aid_rho_mis_bc3_oct-dec2022_final_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.2730632, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "tree_aid_rho_mis_bc3_oct-dec2022_final"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.onadata.tree_aid_rho_mis_bc3_oct-dec2022_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_not_null_onadata_tree_aid_rho_mis_bc3_oct-dec2022_final_id.37876d4f60": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'tree_aid_rho_mis_bc3_oct-dec2022_final')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_onadata_tree_aid_rho_mis_bc3_oct-dec2022_final_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_onadata_tree_a_bd3adef75c70ed0badd707fdd5827837.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_onadata_tree_aid_rho_mis_bc3_oct-dec2022_final_id.37876d4f60", "fqn": ["tree_aid", "staging", "source_not_null_onadata_tree_aid_rho_mis_bc3_oct-dec2022_final_id"], "alias": "source_not_null_onadata_tree_a_bd3adef75c70ed0badd707fdd5827837", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_onadata_tree_a_bd3adef75c70ed0badd707fdd5827837", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_onadata_tree_a_bd3adef75c70ed0badd707fdd5827837"}, "created_at": 1697110854.2749453, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_onadata_tree_a_bd3adef75c70ed0badd707fdd5827837\") }}", "language": "sql", "refs": [], "sources": [["onadata", "tree_aid_rho_mis_bc3_oct-dec2022_final"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.onadata.tree_aid_rho_mis_bc3_oct-dec2022_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_unique_onadata_mc3_rho_mis_oct-dec22_final_id.2107d53bf0": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'mc3_rho_mis_oct-dec22_final')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_onadata_mc3_rho_mis_oct-dec22_final_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_onadata_mc3_rho_mis_oct-dec22_final_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_onadata_mc3_rho_mis_oct-dec22_final_id.2107d53bf0", "fqn": ["tree_aid", "staging", "source_unique_onadata_mc3_rho_mis_oct-dec22_final_id"], "alias": "source_unique_onadata_mc3_rho_mis_oct-dec22_final_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.2774034, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "mc3_rho_mis_oct-dec22_final"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.onadata.mc3_rho_mis_oct-dec22_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_not_null_onadata_mc3_rho_mis_oct-dec22_final_id.04aaccab48": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'mc3_rho_mis_oct-dec22_final')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_onadata_mc3_rho_mis_oct-dec22_final_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_onadata_mc3_rho_mis_oct-dec22_final_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_onadata_mc3_rho_mis_oct-dec22_final_id.04aaccab48", "fqn": ["tree_aid", "staging", "source_not_null_onadata_mc3_rho_mis_oct-dec22_final_id"], "alias": "source_not_null_onadata_mc3_rho_mis_oct-dec22_final_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.2792299, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "mc3_rho_mis_oct-dec22_final"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.onadata.mc3_rho_mis_oct-dec22_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_unique_onadata_ec0_mini_rho_mis_jan-mar2023_final_id.331a8dbd09": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'ec0_mini_rho_mis_jan-mar2023_final')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_onadata_ec0_mini_rho_mis_jan-mar2023_final_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_onadata_ec0_mini_rho_mis_jan-mar2023_final_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_onadata_ec0_mini_rho_mis_jan-mar2023_final_id.331a8dbd09", "fqn": ["tree_aid", "staging", "source_unique_onadata_ec0_mini_rho_mis_jan-mar2023_final_id"], "alias": "source_unique_onadata_ec0_mini_rho_mis_jan-mar2023_final_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.2813392, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "ec0_mini_rho_mis_jan-mar2023_final"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.onadata.ec0_mini_rho_mis_jan-mar2023_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_not_null_onadata_ec0_mini_rho_mis_jan-mar2023_final_id.46be135da3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'ec0_mini_rho_mis_jan-mar2023_final')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_onadata_ec0_mini_rho_mis_jan-mar2023_final_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_onadata_ec0_mini_rho_mis_jan-mar2023_final_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_onadata_ec0_mini_rho_mis_jan-mar2023_final_id.46be135da3", "fqn": ["tree_aid", "staging", "source_not_null_onadata_ec0_mini_rho_mis_jan-mar2023_final_id"], "alias": "source_not_null_onadata_ec0_mini_rho_mis_jan-mar2023_final_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1697110854.2834494, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["onadata", "ec0_mini_rho_mis_jan-mar2023_final"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.onadata.ec0_mini_rho_mis_jan-mar2023_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_unique_onadata_gc6_perimeter_village_may2021_survey_final_id.253a89e524": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'gc6_perimeter_village_may2021_survey_final')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_onadata_gc6_perimeter_village_may2021_survey_final_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_onadata_gc6_peri_3e79711f67e8659bd7d8c42341d6fc5e.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_onadata_gc6_perimeter_village_may2021_survey_final_id.253a89e524", "fqn": ["tree_aid", "staging", "source_unique_onadata_gc6_perimeter_village_may2021_survey_final_id"], "alias": "source_unique_onadata_gc6_peri_3e79711f67e8659bd7d8c42341d6fc5e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_unique_onadata_gc6_peri_3e79711f67e8659bd7d8c42341d6fc5e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_unique_onadata_gc6_peri_3e79711f67e8659bd7d8c42341d6fc5e"}, "created_at": 1697110854.2860427, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_unique_onadata_gc6_peri_3e79711f67e8659bd7d8c42341d6fc5e\") }}", "language": "sql", "refs": [], "sources": [["onadata", "gc6_perimeter_village_may2021_survey_final"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.onadata.gc6_perimeter_village_may2021_survey_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "test.tree_aid.source_not_null_onadata_gc6_perimeter_village_may2021_survey_final_id.3447545492": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('onadata', 'gc6_perimeter_village_may2021_survey_final')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_onadata_gc6_perimeter_village_may2021_survey_final_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_onadata_gc6_pe_8835b834a76f294522361d62b38ef9e3.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_onadata_gc6_perimeter_village_may2021_survey_final_id.3447545492", "fqn": ["tree_aid", "staging", "source_not_null_onadata_gc6_perimeter_village_may2021_survey_final_id"], "alias": "source_not_null_onadata_gc6_pe_8835b834a76f294522361d62b38ef9e3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_onadata_gc6_pe_8835b834a76f294522361d62b38ef9e3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_onadata_gc6_pe_8835b834a76f294522361d62b38ef9e3"}, "created_at": 1697110854.2879004, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_onadata_gc6_pe_8835b834a76f294522361d62b38ef9e3\") }}", "language": "sql", "refs": [], "sources": [["onadata", "gc6_perimeter_village_may2021_survey_final"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.onadata.gc6_perimeter_village_may2021_survey_final"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.onadata", "attached_node": null}, "model.tree_aid.enterprise_survey_derivatives": {"database": "tree_aid", "schema": "dbt_bokidi", "name": "enterprise_survey_derivatives", "resource_type": "model", "package_name": "tree_aid", "path": "marts/enterprise_survey_derivatives.sql", "original_file_path": "models/marts/enterprise_survey_derivatives.sql", "unique_id": "model.tree_aid.enterprise_survey_derivatives", "fqn": ["tree_aid", "marts", "enterprise_survey_derivatives"], "alias": "enterprise_survey_derivatives", "checksum": {"name": "sha256", "checksum": "8f543a9113efe4e73136372964080a95d5e020ca58c7c602b97493466f06ebba"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "intermediate": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/tree_aid/models/marts/enterprise_survey_derivatives.sql", "deferred": false, "unrendered_config": {"intermediate": null, "materialized": "table"}, "created_at": 1698074991.175737, "relation_name": "\"tree_aid\".\"dbt_bokidi\".\"enterprise_survey_derivatives\"", "raw_code": "with repeat_group_data as\r\n(\r\n{{survey_type_table('Enterprise survey', repeat='derivatives')}} \r\n),\r\n-- this refactored\r\neasy_joining_data as \r\n(\r\nselect\r\n{{get_standard_columns('d','es')}},\r\n--repeat fields\r\nd.product_derivative,\r\nd.sales_turn_over_derivatives\r\nfrom repeat_group_data d\r\ninner join {{ ref('enterprise_surveys') }} es on d.submission_id=es.submission_id\r\nwhere d.submission_id is not null and \r\nd.product_derivative is not null and (es.test is null or es.test not in ('y', 'Y','yes','Yes'))\r\n),\r\nharder_joining_data as \r\n(\r\nselect\r\n{{get_standard_columns_2('d','es')}},\r\n--repeat fields\r\nd.product_derivative,\r\nd.sales_turn_over_derivatives\r\nfrom repeat_group_data d\r\nleft join {{ ref('enterprise_surveys') }} es on  \r\n    d.form_id::int = es.form_id::int and  d.parent_index =es.submission_index \r\nwhere d.submission_id is null and \r\nd.product_derivative is not null and (es.test is null or es.test not in ('y', 'Y','yes','Yes'))\r\n)\r\nselect * from easy_joining_data\r\nunion all\r\nselect * from harder_joining_data", "language": "sql", "refs": [{"name": "stg_core_questions_union", "package": null, "version": null}, {"name": "stg_core_questions_master", "package": null, "version": null}, {"name": "stg_survey_master", "package": null, "version": null}, {"name": "enterprise_surveys", "package": null, "version": null}, {"name": "enterprise_surveys", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.tree_aid.survey_type_table", "macro.tree_aid.get_standard_columns", "macro.tree_aid.get_standard_columns_2"], "nodes": ["model.tree_aid.stg_core_questions_union", "model.tree_aid.stg_core_questions_master", "model.tree_aid.stg_survey_master", "model.tree_aid.enterprise_surveys", "model.tree_aid.enterprise_surveys"]}, "compiled_path": "target/compiled/tree_aid/models/marts/enterprise_survey_derivatives.sql", "compiled": true, "compiled_code": "with repeat_group_data as\n(\n \n\nwith core_questions as \n(\n     \n   \n\n-- create list of forms.   -- if 'rhomis' create list that are not in extended.rhomis . And either way, up to 5-- create list of fields-- start actual macro\n    -- for each form\n\n    --finds schemaname and tablename for the db table associated to the form\n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n        \n      \n\n    -- loop through all the core fields, select the field with the appropriate name if present\n        \n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69352818 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69352818\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69352842 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69352842\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69439308 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69439308\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69439315 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69439315\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69444016 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69444016\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69507041 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69507041\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69507850 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69507850\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69512012 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69512012\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69512103 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69512103\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69517873 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69517873\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69517878 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69517878\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69536952 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69536952\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69545162 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69545162\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69555348 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69555348\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69555352 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69555352\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69557789 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69557789\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69557791 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69557791\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69565992 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69565992\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69565995 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69565995\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69566000 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69566000\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69566002 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69566002\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69583181 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69583181\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69583183 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69583183\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69583455 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69583455\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69583470 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69583470\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69589549 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69589549\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69589553 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69589553\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69589557 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69589557\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69589560 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69589560\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69668894 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69668894\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69668913 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69668913\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69711708 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69711708\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69711784 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69711784\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69711791 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69711791\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69711842 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69711842\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69711875 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69711875\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69711889 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69711889\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69711987 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69711987\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69715256 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69715256\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69715263 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69715263\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69715264 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69715264\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69716131 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69716131\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69716139 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69716139\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69716147 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69716147\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69723210 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69723210\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69723216 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69723216\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69723570 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69723570\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69724007 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69724007\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69724131 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69724131\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69724166 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69724166\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69737187 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69737187\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69774571 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69774571\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69774613 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69774613\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69797417 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69797417\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69797421 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69797421\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69797425 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69797425\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69797427 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69797427\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69811899 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69811899\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69814981 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69814981\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69843987 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69843987\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69844016 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69844016\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69860101 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69860101\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69860108 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69860108\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69863852 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69863852\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69863859 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69863859\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69904912 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69904912\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69961030 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69961030\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69961033 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69961033\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69961035 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69961035\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69966377 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69966377\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69966418 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69966418\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69966438 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69966438\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69966467 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69966467\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69985673 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69985673\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69985677 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69985677\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69985680 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69985680\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69985682 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=69985682\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70026853 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=70026853\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70044015 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=70044015\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70044018 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=70044018\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70044035 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=70044035\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70046709 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=70046709\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70046727 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=70046727\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70046766 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=70046766\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70046834 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=70046834\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70066230 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=70066230\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70066243 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=70066243\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70066278 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=70066278\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70066279 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=70066279\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70066281 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=70066281\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70066720 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=70066720\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70130732 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=70130732\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70139345 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=70139345\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70213837 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=70213837\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70213860 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=70213860\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70272813 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=70272813\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70287835 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=70287835\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70287837 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=70287837\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70287844 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_derivatives\"\n                    \n                                where parent_id=70287844\n                            \n                     \n            \n        \n            union all\n    --finds schemaname and tablename for the db table associated to the form\n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n        \n      \n\n    -- loop through all the core fields, select the field with the appropriate name if present\n        \n            --loop through all the fields in dict\n            select \n            574083::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,75914381 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"eb3_eb8_vte_edp_survey_jan2021_repeat_derivatives\"\n                    \n                                where parent_id=75914381\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            574083::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,75914385 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"eb3_eb8_vte_edp_survey_jan2021_repeat_derivatives\"\n                    \n                                where parent_id=75914385\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            574083::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,75914391 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"eb3_eb8_vte_edp_survey_jan2021_repeat_derivatives\"\n                    \n                                where parent_id=75914391\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            574083::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,75914396 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"eb3_eb8_vte_edp_survey_jan2021_repeat_derivatives\"\n                    \n                                where parent_id=75914396\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            574083::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,75914413 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"eb3_eb8_vte_edp_survey_jan2021_repeat_derivatives\"\n                    \n                                where parent_id=75914413\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            574083::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,75914418 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"eb3_eb8_vte_edp_survey_jan2021_repeat_derivatives\"\n                    \n                                where parent_id=75914418\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            574083::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,75914554 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"eb3_eb8_vte_edp_survey_jan2021_repeat_derivatives\"\n                    \n                                where parent_id=75914554\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            574083::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,75914571 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"eb3_eb8_vte_edp_survey_jan2021_repeat_derivatives\"\n                    \n                                where parent_id=75914571\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            574083::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,75914589 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"eb3_eb8_vte_edp_survey_jan2021_repeat_derivatives\"\n                    \n                                where parent_id=75914589\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            574083::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,75914602 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"eb3_eb8_vte_edp_survey_jan2021_repeat_derivatives\"\n                    \n                                where parent_id=75914602\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            574083::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,75914607 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"eb3_eb8_vte_edp_survey_jan2021_repeat_derivatives\"\n                    \n                                where parent_id=75914607\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            574083::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,75914612 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"eb3_eb8_vte_edp_survey_jan2021_repeat_derivatives\"\n                    \n                                where parent_id=75914612\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            574083::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,75914615 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"eb3_eb8_vte_edp_survey_jan2021_repeat_derivatives\"\n                    \n                                where parent_id=75914615\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            574083::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,75914624 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"eb3_eb8_vte_edp_survey_jan2021_repeat_derivatives\"\n                    \n                                where parent_id=75914624\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            574083::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,75914629 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"eb3_eb8_vte_edp_survey_jan2021_repeat_derivatives\"\n                    \n                                where parent_id=75914629\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            574083::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,75914638 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"eb3_eb8_vte_edp_survey_jan2021_repeat_derivatives\"\n                    \n                                where parent_id=75914638\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            574083::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,75914643 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"eb3_eb8_vte_edp_survey_jan2021_repeat_derivatives\"\n                    \n                                where parent_id=75914643\n                            \n                     \n            \n        \n            union all\n    --finds schemaname and tablename for the db table associated to the form\n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n        \n      \n\n    -- loop through all the core fields, select the field with the appropriate name if present\n        \n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243433 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76243433\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243435 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76243435\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243458 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76243458\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169038 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76169038\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169040 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76169040\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169042 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76169042\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169045 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76169045\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169048 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76169048\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169050 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76169050\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169052 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76169052\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169054 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76169054\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169056 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76169056\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169058 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76169058\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169060 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76169060\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169062 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76169062\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169064 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76169064\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169066 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76169066\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169068 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76169068\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169070 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76169070\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169071 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76169071\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169074 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76169074\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169077 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76169077\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169079 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76169079\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169081 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76169081\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243322 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76243322\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243326 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76243326\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243352 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76243352\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243353 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76243353\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243356 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76243356\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243367 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76243367\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243369 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76243369\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243387 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76243387\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243388 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76243388\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243389 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76243389\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243391 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76243391\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243392 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76243392\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243415 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76243415\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243417 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76243417\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243419 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76243419\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243420 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76243420\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243422 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76243422\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243431 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_derivatives\"\n                    \n                                where parent_id=76243431\n                            \n                     \n            \n        \n            union all\n    --finds schemaname and tablename for the db table associated to the form\n            \n                \n            \n                \n            \n        \n      \n\n    -- loop through all the core fields, select the field with the appropriate name if present\n        \n            --loop through all the fields in dict\n            select \n            590257::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,\n                        null as submission_id,\n                        parent_index::bigint as parent_index,\n                    \n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na4_vte_edp_survey_apr-jun2021_draft_repeat_derivatives\"\n                    \n                                where parent_index=6\n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            590257::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,\n                        null as submission_id,\n                        parent_index::bigint as parent_index,\n                    \n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na4_vte_edp_survey_apr-jun2021_draft_repeat_derivatives\"\n                    \n                                where parent_index=7\n                     \n            \n        \n            union all\n    --finds schemaname and tablename for the db table associated to the form\n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n        \n      \n\n    -- loop through all the core fields, select the field with the appropriate name if present\n        \n            --loop through all the fields in dict\n            select \n            592392::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,82031009 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2021_final_repeat_derivatives\"\n                    \n                                where parent_id=82031009\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            592392::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,82031010 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2021_final_repeat_derivatives\"\n                    \n                                where parent_id=82031010\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            592392::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,82031014 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2021_final_repeat_derivatives\"\n                    \n                                where parent_id=82031014\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            592392::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,82031021 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2021_final_repeat_derivatives\"\n                    \n                                where parent_id=82031021\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            592392::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,82031022 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2021_final_repeat_derivatives\"\n                    \n                                where parent_id=82031022\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            592392::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,82031023 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2021_final_repeat_derivatives\"\n                    \n                                where parent_id=82031023\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            592392::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,82031024 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2021_final_repeat_derivatives\"\n                    \n                                where parent_id=82031024\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            592392::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,82031026 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2021_final_repeat_derivatives\"\n                    \n                                where parent_id=82031026\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            592392::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,82031029 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2021_final_repeat_derivatives\"\n                    \n                                where parent_id=82031029\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            592392::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,82031106 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2021_final_repeat_derivatives\"\n                    \n                                where parent_id=82031106\n                            \n                     \n            \n        \n            union all\n    --finds schemaname and tablename for the db table associated to the form\n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n        \n      \n\n    -- loop through all the core fields, select the field with the appropriate name if present\n        \n            --loop through all the fields in dict\n            select \n            629847::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92858762 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_jan-mar2022_repeat_derivatives\"\n                    \n                                where parent_id=92858762\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            629847::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92858763 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_jan-mar2022_repeat_derivatives\"\n                    \n                                where parent_id=92858763\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            629847::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92858765 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_jan-mar2022_repeat_derivatives\"\n                    \n                                where parent_id=92858765\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            629847::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92858767 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_jan-mar2022_repeat_derivatives\"\n                    \n                                where parent_id=92858767\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            629847::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92858770 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_jan-mar2022_repeat_derivatives\"\n                    \n                                where parent_id=92858770\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            629847::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92858771 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_jan-mar2022_repeat_derivatives\"\n                    \n                                where parent_id=92858771\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            629847::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92858773 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_jan-mar2022_repeat_derivatives\"\n                    \n                                where parent_id=92858773\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            629847::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92858774 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_jan-mar2022_repeat_derivatives\"\n                    \n                                where parent_id=92858774\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            629847::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92858775 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_jan-mar2022_repeat_derivatives\"\n                    \n                                where parent_id=92858775\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            629847::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92858777 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_jan-mar2022_repeat_derivatives\"\n                    \n                                where parent_id=92858777\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            629847::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92858778 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_jan-mar2022_repeat_derivatives\"\n                    \n                                where parent_id=92858778\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            629847::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92858781 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_jan-mar2022_repeat_derivatives\"\n                    \n                                where parent_id=92858781\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            629847::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92858782 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_jan-mar2022_repeat_derivatives\"\n                    \n                                where parent_id=92858782\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            629847::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92858784 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_jan-mar2022_repeat_derivatives\"\n                    \n                                where parent_id=92858784\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            629847::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92858785 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_jan-mar2022_repeat_derivatives\"\n                    \n                                where parent_id=92858785\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            629847::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92858786 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_jan-mar2022_repeat_derivatives\"\n                    \n                                where parent_id=92858786\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            629847::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92858787 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_jan-mar2022_repeat_derivatives\"\n                    \n                                where parent_id=92858787\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            629847::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92858788 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_jan-mar2022_repeat_derivatives\"\n                    \n                                where parent_id=92858788\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            629847::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92858789 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_jan-mar2022_repeat_derivatives\"\n                    \n                                where parent_id=92858789\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            629847::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92858790 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_jan-mar2022_repeat_derivatives\"\n                    \n                                where parent_id=92858790\n                            \n                     \n            \n        \n            union all\n    --finds schemaname and tablename for the db table associated to the form\n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n        \n      \n\n    -- loop through all the core fields, select the field with the appropriate name if present\n        \n            --loop through all the fields in dict\n            select \n            642305::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,\n                        null as submission_id,\n                        parent_index::bigint as parent_index,\n                    \n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_vte_edp_survey_jan-mar2022_repeat_derivatives\"\n                    \n                                where parent_index=1\n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            642305::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,\n                        null as submission_id,\n                        parent_index::bigint as parent_index,\n                    \n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_vte_edp_survey_jan-mar2022_repeat_derivatives\"\n                    \n                                where parent_index=2\n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            642305::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,\n                        null as submission_id,\n                        parent_index::bigint as parent_index,\n                    \n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_vte_edp_survey_jan-mar2022_repeat_derivatives\"\n                    \n                                where parent_index=3\n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            642305::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,\n                        null as submission_id,\n                        parent_index::bigint as parent_index,\n                    \n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_vte_edp_survey_jan-mar2022_repeat_derivatives\"\n                    \n                                where parent_index=4\n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            642305::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,\n                        null as submission_id,\n                        parent_index::bigint as parent_index,\n                    \n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_vte_edp_survey_jan-mar2022_repeat_derivatives\"\n                    \n                                where parent_index=5\n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            642305::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,\n                        null as submission_id,\n                        parent_index::bigint as parent_index,\n                    \n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_vte_edp_survey_jan-mar2022_repeat_derivatives\"\n                    \n                                where parent_index=6\n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            642305::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,\n                        null as submission_id,\n                        parent_index::bigint as parent_index,\n                    \n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_vte_edp_survey_jan-mar2022_repeat_derivatives\"\n                    \n                                where parent_index=7\n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            642305::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,\n                        null as submission_id,\n                        parent_index::bigint as parent_index,\n                    \n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_vte_edp_survey_jan-mar2022_repeat_derivatives\"\n                    \n                                where parent_index=8\n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            642305::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,\n                        null as submission_id,\n                        parent_index::bigint as parent_index,\n                    \n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_vte_edp_survey_jan-mar2022_repeat_derivatives\"\n                    \n                                where parent_index=9\n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            642305::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,\n                        null as submission_id,\n                        parent_index::bigint as parent_index,\n                    \n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_vte_edp_survey_jan-mar2022_repeat_derivatives\"\n                    \n                                where parent_index=10\n                     \n            \n        \n            union all\n    --finds schemaname and tablename for the db table associated to the form\n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n        \n      \n\n    -- loop through all the core fields, select the field with the appropriate name if present\n        \n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96071481 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96071481\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96071483 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96071483\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96071484 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96071484\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96071486 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96071486\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96071487 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96071487\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96071488 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96071488\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96071496 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96071496\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96071497 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96071497\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96071499 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96071499\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96071501 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96071501\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96071502 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96071502\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96071503 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96071503\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96071505 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96071505\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96071507 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96071507\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96071508 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96071508\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98518462 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=98518462\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98518465 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=98518465\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98518467 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=98518467\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98518469 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=98518469\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98518472 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=98518472\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98518474 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=98518474\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98518475 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=98518475\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98518477 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=98518477\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98518480 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=98518480\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98518481 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=98518481\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98518483 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=98518483\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98518484 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=98518484\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98518485 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=98518485\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98518486 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=98518486\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98518487 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=98518487\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98518490 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=98518490\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98518494 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=98518494\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98518495 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=98518495\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98518497 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=98518497\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98518498 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=98518498\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98518499 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=98518499\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98518524 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=98518524\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98518526 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=98518526\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98518527 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=98518527\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98518530 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=98518530\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98518531 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=98518531\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98518532 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=98518532\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98518533 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=98518533\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98518534 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=98518534\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98518536 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=98518536\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98518538 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=98518538\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98518539 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=98518539\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98518543 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=98518543\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98518544 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=98518544\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            661432::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98518545 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb8_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=98518545\n                            \n                     \n            \n        \n            union all\n    --finds schemaname and tablename for the db table associated to the form\n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n        \n      \n\n    -- loop through all the core fields, select the field with the appropriate name if present\n        \n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96110415 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96110415\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96110417 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96110417\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96110564 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96110564\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96110575 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96110575\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96110579 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96110579\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96110584 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96110584\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96110593 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96110593\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96110599 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96110599\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96110606 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96110606\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96110625 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96110625\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96110641 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96110641\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96110653 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96110653\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96110656 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96110656\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96110660 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96110660\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96110662 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96110662\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96110667 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96110667\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96110671 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96110671\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96110675 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96110675\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96110680 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96110680\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96140640 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96140640\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96140642 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96140642\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96140656 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96140656\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96140660 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96140660\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96140666 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96140666\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96140670 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96140670\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96140677 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96140677\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96140684 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96140684\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96140698 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96140698\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96142460 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96142460\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96142463 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96142463\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96142467 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96142467\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96142476 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96142476\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96142477 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96142477\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96142478 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96142478\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96142479 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96142479\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96142482 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96142482\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96142493 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96142493\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96142495 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96142495\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662588::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96142498 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_vte_edp_survey_apr-jun2022_repeat_derivatives\"\n                    \n                                where parent_id=96142498\n                            \n                     \n            \n        \n            union all\n    --finds schemaname and tablename for the db table associated to the form\n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n        \n      \n\n    -- loop through all the core fields, select the field with the appropriate name if present\n        \n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110738888 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110738888\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110738912 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110738912\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110738920 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110738920\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110738925 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110738925\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110738961 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110738961\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110738999 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110738999\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110739014 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110739014\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110739036 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110739036\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110739218 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110739218\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110739221 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110739221\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110739229 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110739229\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110739239 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110739239\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110739246 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110739246\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110739268 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110739268\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110739277 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110739277\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110739283 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110739283\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110739289 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110739289\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110739295 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110739295\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110739303 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110739303\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110739312 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110739312\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110739391 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110739391\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110739409 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110739409\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110739423 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110739423\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110739431 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110739431\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110739438 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110739438\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110739445 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110739445\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110739450 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110739450\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110739459 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110739459\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110739468 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110739468\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110739475 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110739475\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110739484 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110739484\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110739534 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110739534\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110739569 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110739569\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110739599 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110739599\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110739607 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110739607\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110739613 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110739613\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110739620 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110739620\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110749796 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110749796\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110749798 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110749798\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110749801 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110749801\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110749806 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110749806\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110749810 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110749810\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110749816 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110749816\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110749821 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110749821\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110749829 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110749829\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110749834 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110749834\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110749838 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110749838\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            723107::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110749843 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    product_derivative::varchar \n                    as product_derivative,\n                    sales_turn_over_derivatives::varchar \n                    as sales_turn_over_derivatives\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc4_product_value_chain_survey_jan-mar23_repeat_derivatives\"\n                    \n                                where parent_id=110749843\n                            \n                     \n            \n        \n\n)\nselect \ns.form_name,\ns.type,\ns.timing,\ns.country,\ns.project_code,\ns.type_2,\ncq.*\nfrom \"tree_aid\".\"dbt_bokidi\".\"stg_survey_master\" s \nleft join core_questions cq on s.form_id::int = cq.form_id::int   \nwhere s.type = 'Enterprise survey'\n\n \n),\n-- this refactored\neasy_joining_data as \n(\nselect\n\n\"d\".form_name,\n\"d\".country,\n\"d\".project_code,\n\"d\".form_id,\n\"d\".id,\n\"d\".submission_id, --in this macro, submission id is collected from the first alias\n\"es\".region,\n\"es\".province,\n\"es\".commune,\n\"es\".date_assessment,\nextract('Year' from \"es\".date_assessment::date) as assessment_year,\n\"es\".assessment_year_date,\n\"es\".beneficiary_control\n,\n--repeat fields\nd.product_derivative,\nd.sales_turn_over_derivatives\nfrom repeat_group_data d\ninner join \"tree_aid\".\"dbt_bokidi\".\"enterprise_surveys\" es on d.submission_id=es.submission_id\nwhere d.submission_id is not null and \nd.product_derivative is not null and (es.test is null or es.test not in ('y', 'Y','yes','Yes'))\n),\nharder_joining_data as \n(\nselect\n\n\"d\".form_name,\n\"d\".country,\n\"d\".project_code,\n\"d\".form_id,\n\"d\".id,\n\"es\".submission_id,--in this macro, submission id is collected from the second alias\n\"es\".region,\n\"es\".province,\n\"es\".commune,\n\"es\".date_assessment,\nextract('Year' from \"es\".date_assessment::date) as assessment_year,\n\"es\".assessment_year_date,\n\"es\".beneficiary_control\n,\n--repeat fields\nd.product_derivative,\nd.sales_turn_over_derivatives\nfrom repeat_group_data d\nleft join \"tree_aid\".\"dbt_bokidi\".\"enterprise_surveys\" es on  \n    d.form_id::int = es.form_id::int and  d.parent_index =es.submission_index \nwhere d.submission_id is null and \nd.product_derivative is not null and (es.test is null or es.test not in ('y', 'Y','yes','Yes'))\n)\nselect * from easy_joining_data\nunion all\nselect * from harder_joining_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.tree_aid.enterprise_survey_product_combined": {"database": "tree_aid", "schema": "dbt_bokidi", "name": "enterprise_survey_product_combined", "resource_type": "model", "package_name": "tree_aid", "path": "marts/enterprise_survey_product_combined.sql", "original_file_path": "models/marts/enterprise_survey_product_combined.sql", "unique_id": "model.tree_aid.enterprise_survey_product_combined", "fqn": ["tree_aid", "marts", "enterprise_survey_product_combined"], "alias": "enterprise_survey_product_combined", "checksum": {"name": "sha256", "checksum": "1aa00c8735537e2c7ed347fe70f7e194fa3a17d3afcc72444cf4720e3d52c8a8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "intermediate": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/tree_aid/models/marts/enterprise_survey_product_combined.sql", "deferred": false, "unrendered_config": {"intermediate": null, "materialized": "table"}, "created_at": 1698074991.2296228, "relation_name": "\"tree_aid\".\"dbt_bokidi\".\"enterprise_survey_product_combined\"", "raw_code": "select \r\n{{get_common_columns()}},\r\ngroup_vte,\r\ninitcap(replace(product_element,'_',' ')) as product_primary,\r\nsales_local_income,\r\nsales_national_income,\r\nsales_international_income,\r\ncoalesce(sales_local_income::float,0) + coalesce(sales_national_income::float,0) + coalesce(sales_international_income::float,0) as total_income,\r\ngroup_costs_amount\r\nfrom {{ ref('enterprise_survey_product') }}\r\n\r\nunion all\r\n\r\nselect \r\n{{get_common_columns()}},\r\ngroup_vte,\r\ninitcap(replace(product_primary,'_',' ')) as product_primary,\r\nsales_turn_over_local_income,\r\nsales_turn_over_national_income,\r\nsales_turn_over_international_income,\r\ntotal_income,\r\ngroup_costs_amount\r\nfrom {{ ref('enterprise_surveys') }}", "language": "sql", "refs": [{"name": "enterprise_survey_product", "package": null, "version": null}, {"name": "enterprise_surveys", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.tree_aid.get_common_columns"], "nodes": ["model.tree_aid.enterprise_survey_product", "model.tree_aid.enterprise_surveys"]}, "compiled_path": "target/compiled/tree_aid/models/marts/enterprise_survey_product_combined.sql", "compiled": true, "compiled_code": "select \n\n        form_name,\n        country,\n        project_code,\n        form_id,\n        submission_id,\n        region,\n        province,\n        commune,\n        date_assessment,\n        assessment_year,\n        assessment_year_date,\n        beneficiary_control\n,\ngroup_vte,\ninitcap(replace(product_element,'_',' ')) as product_primary,\nsales_local_income,\nsales_national_income,\nsales_international_income,\ncoalesce(sales_local_income::float,0) + coalesce(sales_national_income::float,0) + coalesce(sales_international_income::float,0) as total_income,\ngroup_costs_amount\nfrom \"tree_aid\".\"dbt_bokidi\".\"enterprise_survey_product\"\n\nunion all\n\nselect \n\n        form_name,\n        country,\n        project_code,\n        form_id,\n        submission_id,\n        region,\n        province,\n        commune,\n        date_assessment,\n        assessment_year,\n        assessment_year_date,\n        beneficiary_control\n,\ngroup_vte,\ninitcap(replace(product_primary,'_',' ')) as product_primary,\nsales_turn_over_local_income,\nsales_turn_over_national_income,\nsales_turn_over_international_income,\ntotal_income,\ngroup_costs_amount\nfrom \"tree_aid\".\"dbt_bokidi\".\"enterprise_surveys\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.tree_aid.enterprise_survey_product": {"database": "tree_aid", "schema": "dbt_bokidi", "name": "enterprise_survey_product", "resource_type": "model", "package_name": "tree_aid", "path": "marts/enterprise_survey_product.sql", "original_file_path": "models/marts/enterprise_survey_product.sql", "unique_id": "model.tree_aid.enterprise_survey_product", "fqn": ["tree_aid", "marts", "enterprise_survey_product"], "alias": "enterprise_survey_product", "checksum": {"name": "sha256", "checksum": "3804827f172721d64d672bb9b8ad5cd254e65ec039b5e038245c310dcb380c27"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "intermediate": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/tree_aid/models/marts/enterprise_survey_product.sql", "deferred": false, "unrendered_config": {"intermediate": null, "materialized": "table"}, "created_at": 1698074991.2375274, "relation_name": "\"tree_aid\".\"dbt_bokidi\".\"enterprise_survey_product\"", "raw_code": "with sales_elements as \r\n(\r\n{{survey_type_table('Enterprise survey', repeat='sales_elements')}} \r\n), \r\n--updated joins\r\neasy_joining_data as \r\n(\r\nselect\r\n{{get_standard_columns('se','es')}},\r\n--repeat fields\r\nse.product_element,\r\nse.sales_local_income,\r\nse.sales_national_income,\r\nse.sales_international_income,\r\nes.group_costs_amount,\r\nes.group_vte\r\nfrom sales_elements se\r\ninner join {{ ref('enterprise_surveys') }} es on se.submission_id=es.submission_id\r\nwhere se.submission_id is not null and \r\nse.product_element is not null and (es.test is null or es.test not in ('y', 'Y','yes','Yes'))\r\n),\r\nharder_joining_data as \r\n(\r\nselect\r\n{{get_standard_columns_2('se','es')}},\r\n--repeat fields\r\nse.product_element,\r\nse.sales_local_income,\r\nse.sales_national_income,\r\nse.sales_international_income,\r\nes.group_costs_amount,\r\nes.group_vte\r\nfrom sales_elements se\r\nleft join {{ ref('enterprise_surveys') }} es on  \r\n    se.form_id::int = es.form_id::int and  se.parent_index =es.submission_index \r\nwhere se.submission_id is null and \r\nse.product_element is not null and (es.test is null or es.test not in ('y', 'Y','yes','Yes'))\r\n)\r\nselect * from easy_joining_data\r\nunion all\r\nselect * from harder_joining_data", "language": "sql", "refs": [{"name": "stg_core_questions_union", "package": null, "version": null}, {"name": "stg_core_questions_master", "package": null, "version": null}, {"name": "stg_survey_master", "package": null, "version": null}, {"name": "enterprise_surveys", "package": null, "version": null}, {"name": "enterprise_surveys", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.tree_aid.survey_type_table", "macro.tree_aid.get_standard_columns", "macro.tree_aid.get_standard_columns_2"], "nodes": ["model.tree_aid.stg_core_questions_union", "model.tree_aid.stg_core_questions_master", "model.tree_aid.stg_survey_master", "model.tree_aid.enterprise_surveys", "model.tree_aid.enterprise_surveys"]}, "compiled_path": "target/compiled/tree_aid/models/marts/enterprise_survey_product.sql", "compiled": true, "compiled_code": "with sales_elements as \n(\n \n\nwith core_questions as \n(\n     \n   \n\n-- create list of forms.   -- if 'rhomis' create list that are not in extended.rhomis . And either way, up to 5-- create list of fields-- start actual macro\n    -- for each form\n\n    --finds schemaname and tablename for the db table associated to the form\n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n        \n      \n\n    -- loop through all the core fields, select the field with the appropriate name if present\n        \n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69352818 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69352818\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69352842 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69352842\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69439308 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69439308\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69439315 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69439315\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69444016 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69444016\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69507041 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69507041\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69507850 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69507850\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69512012 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69512012\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69512103 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69512103\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69517873 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69517873\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69517878 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69517878\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69536952 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69536952\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69545162 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69545162\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69555348 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69555348\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69555352 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69555352\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69557789 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69557789\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69557791 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69557791\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69565992 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69565992\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69565995 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69565995\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69566000 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69566000\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69566002 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69566002\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69583181 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69583181\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69583183 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69583183\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69583455 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69583455\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69583470 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69583470\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69589549 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69589549\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69589553 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69589553\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69589557 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69589557\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69589560 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69589560\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69668894 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69668894\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69668913 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69668913\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69711708 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69711708\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69711784 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69711784\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69711791 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69711791\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69711842 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69711842\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69711875 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69711875\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69711889 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69711889\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69711987 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69711987\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69715256 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69715256\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69715263 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69715263\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69715264 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69715264\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69716131 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69716131\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69716139 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69716139\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69716147 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69716147\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69723210 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69723210\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69723216 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69723216\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69723570 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69723570\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69724007 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69724007\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69724131 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69724131\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69724166 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69724166\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69737187 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69737187\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69774571 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69774571\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69774613 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69774613\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69797417 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69797417\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69797421 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69797421\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69797425 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69797425\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69797427 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69797427\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69811899 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69811899\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69814981 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69814981\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69843987 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69843987\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69844016 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69844016\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69860101 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69860101\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69860108 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69860108\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69863852 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69863852\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69863859 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69863859\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69904912 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69904912\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69961030 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69961030\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69961033 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69961033\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69961035 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69961035\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69966377 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69966377\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69966418 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69966418\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69966438 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69966438\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69966467 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69966467\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69985673 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69985673\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69985677 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69985677\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69985680 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69985680\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,69985682 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=69985682\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70026853 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=70026853\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70044015 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=70044015\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70044018 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=70044018\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70044035 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=70044035\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70046709 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=70046709\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70046727 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=70046727\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70046766 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=70046766\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70046834 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=70046834\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70066230 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=70066230\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70066243 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=70066243\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70066278 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=70066278\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70066279 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=70066279\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70066281 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=70066281\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70066720 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=70066720\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70130732 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=70130732\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70139345 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=70139345\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70213837 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=70213837\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70213860 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=70213860\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70272813 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=70272813\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70287835 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=70287835\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70287837 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=70287837\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            556200::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,70287844 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc1_vte_edp_survey_nov2020_final_repeat_sales_elements\"\n                    \n                                where parent_id=70287844\n                            \n                     \n            \n        \n            union all\n    --finds schemaname and tablename for the db table associated to the form\n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n        \n      \n\n    -- loop through all the core fields, select the field with the appropriate name if present\n        \n            --loop through all the fields in dict\n            select \n            574081::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,75914547 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    vegetable_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"eb3_eb8_vte_vegetables_edp_survey_jan2021_repeat_sales_elements\"\n                    \n                                where parent_id=75914547\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            574081::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,75914596 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    vegetable_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"eb3_eb8_vte_vegetables_edp_survey_jan2021_repeat_sales_elements\"\n                    \n                                where parent_id=75914596\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            574081::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,75914621 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    vegetable_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"eb3_eb8_vte_vegetables_edp_survey_jan2021_repeat_sales_elements\"\n                    \n                                where parent_id=75914621\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            574081::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,75914636 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    vegetable_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"eb3_eb8_vte_vegetables_edp_survey_jan2021_repeat_sales_elements\"\n                    \n                                where parent_id=75914636\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            574081::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,75914646 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    vegetable_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"eb3_eb8_vte_vegetables_edp_survey_jan2021_repeat_sales_elements\"\n                    \n                                where parent_id=75914646\n                            \n                     \n            \n        \n            union all\n    --finds schemaname and tablename for the db table associated to the form\n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n        \n      \n\n    -- loop through all the core fields, select the field with the appropriate name if present\n        \n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169038 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76169038\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169040 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76169040\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169042 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76169042\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169045 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76169045\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169048 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76169048\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169050 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76169050\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169052 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76169052\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169054 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76169054\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169056 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76169056\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169058 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76169058\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169060 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76169060\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169062 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76169062\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169064 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76169064\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169066 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76169066\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169068 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76169068\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169070 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76169070\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169071 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76169071\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169074 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76169074\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169077 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76169077\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169079 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76169079\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76169081 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76169081\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243322 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76243322\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243326 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76243326\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243352 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76243352\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243353 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76243353\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243356 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76243356\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243367 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76243367\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243369 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76243369\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243387 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76243387\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243388 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76243388\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243389 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76243389\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243391 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76243391\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243392 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76243392\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243415 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76243415\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243417 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76243417\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243419 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76243419\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243420 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76243420\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243422 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76243422\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243431 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76243431\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243433 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76243433\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243435 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76243435\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            579084::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,76243458 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gb1_vte_edp_survey_jan-mar2021_repeat_sales_elements\"\n                    \n                                where parent_id=76243458\n                            \n                     \n            \n        \n            union all\n    --finds schemaname and tablename for the db table associated to the form\n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n        \n      \n\n    -- loop through all the core fields, select the field with the appropriate name if present\n        \n            --loop through all the fields in dict\n            select \n            590257::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,\n                        null as submission_id,\n                        parent_index::bigint as parent_index,\n                    \n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na4_vte_edp_survey_apr-jun2021_draft_repeat_sales_elements\"\n                    \n                                where parent_index=1\n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            590257::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,\n                        null as submission_id,\n                        parent_index::bigint as parent_index,\n                    \n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na4_vte_edp_survey_apr-jun2021_draft_repeat_sales_elements\"\n                    \n                                where parent_index=2\n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            590257::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,\n                        null as submission_id,\n                        parent_index::bigint as parent_index,\n                    \n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na4_vte_edp_survey_apr-jun2021_draft_repeat_sales_elements\"\n                    \n                                where parent_index=3\n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            590257::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,\n                        null as submission_id,\n                        parent_index::bigint as parent_index,\n                    \n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na4_vte_edp_survey_apr-jun2021_draft_repeat_sales_elements\"\n                    \n                                where parent_index=4\n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            590257::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,\n                        null as submission_id,\n                        parent_index::bigint as parent_index,\n                    \n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na4_vte_edp_survey_apr-jun2021_draft_repeat_sales_elements\"\n                    \n                                where parent_index=6\n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            590257::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,\n                        null as submission_id,\n                        parent_index::bigint as parent_index,\n                    \n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na4_vte_edp_survey_apr-jun2021_draft_repeat_sales_elements\"\n                    \n                                where parent_index=7\n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            590257::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,\n                        null as submission_id,\n                        parent_index::bigint as parent_index,\n                    \n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na4_vte_edp_survey_apr-jun2021_draft_repeat_sales_elements\"\n                    \n                                where parent_index=8\n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            590257::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,\n                        null as submission_id,\n                        parent_index::bigint as parent_index,\n                    \n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na4_vte_edp_survey_apr-jun2021_draft_repeat_sales_elements\"\n                    \n                                where parent_index=9\n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            590257::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,\n                        null as submission_id,\n                        parent_index::bigint as parent_index,\n                    \n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na4_vte_edp_survey_apr-jun2021_draft_repeat_sales_elements\"\n                    \n                                where parent_index=10\n                     \n            \n        \n            union all\n    --finds schemaname and tablename for the db table associated to the form\n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n        \n      \n\n    -- loop through all the core fields, select the field with the appropriate name if present\n        \n            --loop through all the fields in dict\n            select \n            642305::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,\n                        null as submission_id,\n                        parent_index::bigint as parent_index,\n                    \n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_vte_edp_survey_jan-mar2022_repeat_sales_elements\"\n                    \n                                where parent_index=1\n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            642305::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,\n                        null as submission_id,\n                        parent_index::bigint as parent_index,\n                    \n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_vte_edp_survey_jan-mar2022_repeat_sales_elements\"\n                    \n                                where parent_index=2\n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            642305::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,\n                        null as submission_id,\n                        parent_index::bigint as parent_index,\n                    \n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_vte_edp_survey_jan-mar2022_repeat_sales_elements\"\n                    \n                                where parent_index=3\n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            642305::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,\n                        null as submission_id,\n                        parent_index::bigint as parent_index,\n                    \n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_vte_edp_survey_jan-mar2022_repeat_sales_elements\"\n                    \n                                where parent_index=4\n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            642305::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,\n                        null as submission_id,\n                        parent_index::bigint as parent_index,\n                    \n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_vte_edp_survey_jan-mar2022_repeat_sales_elements\"\n                    \n                                where parent_index=5\n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            642305::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,\n                        null as submission_id,\n                        parent_index::bigint as parent_index,\n                    \n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_vte_edp_survey_jan-mar2022_repeat_sales_elements\"\n                    \n                                where parent_index=6\n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            642305::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,\n                        null as submission_id,\n                        parent_index::bigint as parent_index,\n                    \n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_vte_edp_survey_jan-mar2022_repeat_sales_elements\"\n                    \n                                where parent_index=7\n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            642305::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,\n                        null as submission_id,\n                        parent_index::bigint as parent_index,\n                    \n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_vte_edp_survey_jan-mar2022_repeat_sales_elements\"\n                    \n                                where parent_index=8\n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            642305::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,\n                        null as submission_id,\n                        parent_index::bigint as parent_index,\n                    \n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_vte_edp_survey_jan-mar2022_repeat_sales_elements\"\n                    \n                                where parent_index=9\n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            642305::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,\n                        null as submission_id,\n                        parent_index::bigint as parent_index,\n                    \n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    sales_elements_label::varchar \n                    as product_element,\n                    sales_turn_over_local_income::varchar \n                    as sales_local_income,\n                    sales_turn_over_national_income::varchar \n                    as sales_national_income,\n                    sales_turn_over_international_income::varchar \n                    as sales_international_income\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_vte_edp_survey_jan-mar2022_repeat_sales_elements\"\n                    \n                                where parent_index=10\n                     \n            \n        \n\n)\nselect \ns.form_name,\ns.type,\ns.timing,\ns.country,\ns.project_code,\ns.type_2,\ncq.*\nfrom \"tree_aid\".\"dbt_bokidi\".\"stg_survey_master\" s \nleft join core_questions cq on s.form_id::int = cq.form_id::int   \nwhere s.type = 'Enterprise survey'\n\n \n), \n--updated joins\neasy_joining_data as \n(\nselect\n\n\"se\".form_name,\n\"se\".country,\n\"se\".project_code,\n\"se\".form_id,\n\"se\".id,\n\"se\".submission_id, --in this macro, submission id is collected from the first alias\n\"es\".region,\n\"es\".province,\n\"es\".commune,\n\"es\".date_assessment,\nextract('Year' from \"es\".date_assessment::date) as assessment_year,\n\"es\".assessment_year_date,\n\"es\".beneficiary_control\n,\n--repeat fields\nse.product_element,\nse.sales_local_income,\nse.sales_national_income,\nse.sales_international_income,\nes.group_costs_amount,\nes.group_vte\nfrom sales_elements se\ninner join \"tree_aid\".\"dbt_bokidi\".\"enterprise_surveys\" es on se.submission_id=es.submission_id\nwhere se.submission_id is not null and \nse.product_element is not null and (es.test is null or es.test not in ('y', 'Y','yes','Yes'))\n),\nharder_joining_data as \n(\nselect\n\n\"se\".form_name,\n\"se\".country,\n\"se\".project_code,\n\"se\".form_id,\n\"se\".id,\n\"es\".submission_id,--in this macro, submission id is collected from the second alias\n\"es\".region,\n\"es\".province,\n\"es\".commune,\n\"es\".date_assessment,\nextract('Year' from \"es\".date_assessment::date) as assessment_year,\n\"es\".assessment_year_date,\n\"es\".beneficiary_control\n,\n--repeat fields\nse.product_element,\nse.sales_local_income,\nse.sales_national_income,\nse.sales_international_income,\nes.group_costs_amount,\nes.group_vte\nfrom sales_elements se\nleft join \"tree_aid\".\"dbt_bokidi\".\"enterprise_surveys\" es on  \n    se.form_id::int = es.form_id::int and  se.parent_index =es.submission_index \nwhere se.submission_id is null and \nse.product_element is not null and (es.test is null or es.test not in ('y', 'Y','yes','Yes'))\n)\nselect * from easy_joining_data\nunion all\nselect * from harder_joining_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.tree_aid.int_filter_values": {"database": "tree_aid", "schema": "dbt_bokidi", "name": "int_filter_values", "resource_type": "model", "package_name": "tree_aid", "path": "intermediate/int_filter_values.sql", "original_file_path": "models/intermediate/int_filter_values.sql", "unique_id": "model.tree_aid.int_filter_values", "fqn": ["tree_aid", "intermediate", "int_filter_values"], "alias": "int_filter_values", "checksum": {"name": "sha256", "checksum": "9c32ce84013efcd67d2e5b02eee578259fa56e0934d108af6beabc723262e263"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "intermediate": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/tree_aid/models/intermediate/int_filter_values.sql", "deferred": false, "unrendered_config": {"intermediate": null, "materialized": "view"}, "created_at": 1698074991.2446384, "relation_name": "\"tree_aid\".\"dbt_bokidi\".\"int_filter_values\"", "raw_code": "with filter_values as\r\n(\r\nselect country, project_code, assessment_year, assessment_year_date, beneficiary_control from {{ ref('enterprise_surveys') }}\r\nunion all\r\nselect country, project_code, assessment_year, assessment_year_date, beneficiary_control from {{ ref('land_surveys') }}\r\nunion all\r\nselect  country,project_code, assessment_year, assessment_year_date, beneficiary_control from {{ ref('rhomis_surveys') }}\r\nunion all\r\nselect  country,project as project_code, assessment_year, assessment_year_date,beneficiary_control from {{ ref('beneficiaries') }}\r\n)\r\nselect \r\ncountry,\r\nproject_code,\r\nassessment_year,\r\nassessment_year_date,\r\nbeneficiary_control\r\nfrom filter_values\r\nwhere assessment_year is not null", "language": "sql", "refs": [{"name": "enterprise_surveys", "package": null, "version": null}, {"name": "land_surveys", "package": null, "version": null}, {"name": "rhomis_surveys", "package": null, "version": null}, {"name": "beneficiaries", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.tree_aid.enterprise_surveys", "model.tree_aid.land_surveys", "model.tree_aid.rhomis_surveys", "model.tree_aid.beneficiaries"]}, "compiled_path": "target/compiled/tree_aid/models/intermediate/int_filter_values.sql", "compiled": true, "compiled_code": "with filter_values as\n(\nselect country, project_code, assessment_year, assessment_year_date, beneficiary_control from \"tree_aid\".\"dbt_bokidi\".\"enterprise_surveys\"\nunion all\nselect country, project_code, assessment_year, assessment_year_date, beneficiary_control from \"tree_aid\".\"dbt_bokidi\".\"land_surveys\"\nunion all\nselect  country,project_code, assessment_year, assessment_year_date, beneficiary_control from \"tree_aid\".\"dbt_bokidi\".\"rhomis_surveys\"\nunion all\nselect  country,project as project_code, assessment_year, assessment_year_date,beneficiary_control from \"tree_aid\".\"dbt_bokidi\".\"beneficiaries\"\n)\nselect \ncountry,\nproject_code,\nassessment_year,\nassessment_year_date,\nbeneficiary_control\nfrom filter_values\nwhere assessment_year is not null", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.tree_aid.survey_test": {"database": "tree_aid", "schema": "dbt_bokidi", "name": "survey_test", "resource_type": "model", "package_name": "tree_aid", "path": "marts/survey_test.sql", "original_file_path": "models/marts/survey_test.sql", "unique_id": "model.tree_aid.survey_test", "fqn": ["tree_aid", "marts", "survey_test"], "alias": "survey_test", "checksum": {"name": "sha256", "checksum": "6a0d2594b9ef5e00cf2bf9a40f9cbb6b7c6386458216378c422529ab203fd661"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "intermediate": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/tree_aid/models/marts/survey_test.sql", "deferred": false, "unrendered_config": {"intermediate": null, "materialized": "table"}, "created_at": 1698074991.250772, "relation_name": "\"tree_aid\".\"dbt_bokidi\".\"survey_test\"", "raw_code": "select form_name,timing,date_assessment::date,assessment_year as year, country,NULL as iso_country_code, project_code,form_id,submission_id,submission_index,region,province,\r\ncommune,'Enterprise survey' as survey_type  from {{ ref('enterprise_surveys') }}\r\nwhere test_check is true\r\nUNION ALL\r\nselect form_name,timing,date_assessment::date,year,country,iso_country_code,project_code,form_id,\tsubmission_id, NULL as submission_index,region,province,\r\ncommune,'Rhomis survey' as survey_type\r\n from {{ref('rhomis_surveys')}}\r\nwhere test_check is true\r\nUNION ALL\r\nselect form_name,NULL as timing,date_assessment::date,assessment_year as year,country,NULL as iso_country_code,project_code,form_id,submission_id,NULL as submission_index,region,province,\r\ncommune,'Land survey' as survey_type\r\nfrom {{ref('land_surveys')}}\r\nwhere test_check is true", "language": "sql", "refs": [{"name": "enterprise_surveys", "package": null, "version": null}, {"name": "rhomis_surveys", "package": null, "version": null}, {"name": "land_surveys", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.tree_aid.enterprise_surveys", "model.tree_aid.rhomis_surveys", "model.tree_aid.land_surveys"]}, "compiled_path": "target/compiled/tree_aid/models/marts/survey_test.sql", "compiled": true, "compiled_code": "select form_name,timing,date_assessment::date,assessment_year as year, country,NULL as iso_country_code, project_code,form_id,submission_id,submission_index,region,province,\ncommune,'Enterprise survey' as survey_type  from \"tree_aid\".\"dbt_bokidi\".\"enterprise_surveys\"\nwhere test_check is true\nUNION ALL\nselect form_name,timing,date_assessment::date,year,country,iso_country_code,project_code,form_id,\tsubmission_id, NULL as submission_index,region,province,\ncommune,'Rhomis survey' as survey_type\n from \"tree_aid\".\"dbt_bokidi\".\"rhomis_surveys\"\nwhere test_check is true\nUNION ALL\nselect form_name,NULL as timing,date_assessment::date,assessment_year as year,country,NULL as iso_country_code,project_code,form_id,submission_id,NULL as submission_index,region,province,\ncommune,'Land survey' as survey_type\nfrom \"tree_aid\".\"dbt_bokidi\".\"land_surveys\"\nwhere test_check is true", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.tree_aid.enterprise_surveys": {"database": "tree_aid", "schema": "dbt_bokidi", "name": "enterprise_surveys", "resource_type": "model", "package_name": "tree_aid", "path": "marts/enterprise_surveys.sql", "original_file_path": "models/marts/enterprise_surveys.sql", "unique_id": "model.tree_aid.enterprise_surveys", "fqn": ["tree_aid", "marts", "enterprise_surveys"], "alias": "enterprise_surveys", "checksum": {"name": "sha256", "checksum": "e8b31466faa811aff77d06aa0a17c802df9a6de858b82d0e0f741164d0135e6f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "intermediate": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/tree_aid/models/marts/enterprise_surveys.sql", "deferred": false, "unrendered_config": {"intermediate": null, "materialized": "table"}, "created_at": 1698074991.2567546, "relation_name": "\"tree_aid\".\"dbt_bokidi\".\"enterprise_surveys\"", "raw_code": "with enterprise_surveys as\r\n(\r\n {{survey_type_table('Enterprise survey')}} \r\n)\r\nselect  \r\n es.form_name,\r\n es.type,\r\n es.timing,\r\n es.country,\r\n es.project_code,\r\n es.form_id,\r\n es.submission_id,\r\n es.submission_index, \r\n initcap(replace(es.region,'_',' ')) as region,\r\n initcap(replace(es.province,'_',' ')) as province,\r\n initcap(replace(es.commune,'_',' ')) as commune,\t\r\n es.date_assessment::date,\r\n extract('Year' from es.date_assessment::date) as assessment_year,\r\n date_trunc('year',es.date_assessment::date) as assessment_year_date,\r\n es.group_vte,\r\n es.product_primary,\r\n es.sales_turn_over_local_income,\r\n es.sales_turn_over_national_income,\r\n es.sales_turn_over_international_income,\r\n coalesce(es.sales_turn_over_local_income::INTEGER,0) + coalesce(es.sales_turn_over_national_income::INTEGER,0) + \r\n coalesce(es.sales_turn_over_international_income::INTEGER,0) as total_income,\r\n es.test,\r\n es.group_costs_amount,\r\n 'Yes' as beneficiary_control,\r\n case -- add a test field to get test indicators BAO\r\n    when ((es.test is null ) or (es.test not in ('y', 'Y','yes','Yes')) ) then false\r\n    else true\r\nend as test_check\r\n from enterprise_surveys es\r\n where es.form_id is not null  \r\n --and ((es.test is null) or (es.test not in ('y', 'Y','yes','Yes'))) -- BAO add a test field to get test indicators", "language": "sql", "refs": [{"name": "stg_core_questions_master", "package": null, "version": null}, {"name": "stg_core_questions_union", "package": null, "version": null}, {"name": "stg_survey_master", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.tree_aid.survey_type_table"], "nodes": ["model.tree_aid.stg_core_questions_master", "model.tree_aid.stg_core_questions_union", "model.tree_aid.stg_survey_master"]}, "compiled_path": "target/compiled/tree_aid/models/marts/enterprise_surveys.sql", "compiled": true, "compiled_code": "with enterprise_surveys as\n(\n  \n\nwith core_questions as \n(\n\n\n\n--find all the expected core fields for that form type    \n\n\n--For all forms for a selected survey type\n\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n552854::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    \n    _index::int as submission_index,\n    \n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region,\n        NULL::varchar \n        as province, \n        district::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        date_interview::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        product_primary::varchar    -- finds the item of the list that correspond to a rule \n        as product_primary, \n        sales_turn_over_local_income::varchar    -- finds the item of the list that correspond to a rule \n        as sales_turn_over_local_income, \n        sales_turn_over_national_income::varchar    -- finds the item of the list that correspond to a rule \n        as sales_turn_over_national_income, \n        sales_turn_over_international_income::varchar    -- finds the item of the list that correspond to a rule \n        as sales_turn_over_international_income, \n        group_vte::varchar    -- finds the item of the list that correspond to a rule \n        as group_vte,\n        NULL::varchar \n        as test, \n        group_costs_amount::varchar    -- finds the item of the list that correspond to a rule \n        as group_costs_amount\n-- appropriate from statement\n    from onadata.\"gb8_vte_edp_survey_oct2020_final\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n556200::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region, \n        province::varchar    -- finds the item of the list that correspond to a rule \n        as province, \n        commune::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        date_interview::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        product::varchar    -- finds the item of the list that correspond to a rule \n        as product_primary,\n        NULL::varchar \n        as sales_turn_over_local_income,\n        NULL::varchar \n        as sales_turn_over_national_income,\n        NULL::varchar \n        as sales_turn_over_international_income, \n        group_vte::varchar    -- finds the item of the list that correspond to a rule \n        as group_vte,\n        NULL::varchar \n        as test, \n        group_costs_amount::varchar    -- finds the item of the list that correspond to a rule \n        as group_costs_amount\n-- appropriate from statement\n    from onadata.\"bc1_vte_edp_survey_nov2020_final\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n556205::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region, \n        province::varchar    -- finds the item of the list that correspond to a rule \n        as province, \n        commune::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        beg_time::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment,\n        NULL::varchar \n        as product_primary,\n        NULL::varchar \n        as sales_turn_over_local_income,\n        NULL::varchar \n        as sales_turn_over_national_income,\n        NULL::varchar \n        as sales_turn_over_international_income, \n        group_vte::varchar    -- finds the item of the list that correspond to a rule \n        as group_vte,\n        NULL::varchar \n        as test,\n        NULL::varchar \n        as group_costs_amount\n-- appropriate from statement\n    from onadata.\"bc1_vte_capacity_assessment_nov2020_final\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n574081::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region, \n        province::varchar    -- finds the item of the list that correspond to a rule \n        as province, \n        kebele::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        date_interview::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment,\n        NULL::varchar \n        as product_primary,\n        NULL::varchar \n        as sales_turn_over_local_income,\n        NULL::varchar \n        as sales_turn_over_national_income,\n        NULL::varchar \n        as sales_turn_over_international_income, \n        group_vte::varchar    -- finds the item of the list that correspond to a rule \n        as group_vte,\n        NULL::varchar \n        as test, \n        group_costs_amount::varchar    -- finds the item of the list that correspond to a rule \n        as group_costs_amount\n-- appropriate from statement\n    from onadata.\"eb3_eb8_vte_vegetables_edp_survey_jan2021\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n574083::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region, \n        province::varchar    -- finds the item of the list that correspond to a rule \n        as province, \n        kebele::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        date_interview::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        product_primary::varchar    -- finds the item of the list that correspond to a rule \n        as product_primary, \n        sales_turn_over_local_income::varchar    -- finds the item of the list that correspond to a rule \n        as sales_turn_over_local_income, \n        sales_turn_over_national_income::varchar    -- finds the item of the list that correspond to a rule \n        as sales_turn_over_national_income, \n        sales_turn_over_international_income::varchar    -- finds the item of the list that correspond to a rule \n        as sales_turn_over_international_income, \n        group_vte::varchar    -- finds the item of the list that correspond to a rule \n        as group_vte,\n        NULL::varchar \n        as test, \n        group_costs_amount::varchar    -- finds the item of the list that correspond to a rule \n        as group_costs_amount\n-- appropriate from statement\n    from onadata.\"eb3_eb8_vte_edp_survey_jan2021\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n579084::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region,\n        NULL::varchar \n        as province, \n        district::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        date_interview::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        product_raw::varchar    -- finds the item of the list that correspond to a rule \n        as product_primary,\n        NULL::varchar \n        as sales_turn_over_local_income,\n        NULL::varchar \n        as sales_turn_over_national_income,\n        NULL::varchar \n        as sales_turn_over_international_income, \n        group_vte::varchar    -- finds the item of the list that correspond to a rule \n        as group_vte,\n        NULL::varchar \n        as test, \n        group_costs_amount::varchar    -- finds the item of the list that correspond to a rule \n        as group_costs_amount\n-- appropriate from statement\n    from onadata.\"gb1_vte_edp_survey_jan-mar2021\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n590257::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    \n    _index::int as submission_index,\n    \n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region,\n        NULL::varchar \n        as province, \n        commune::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        date_interview::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        product::varchar    -- finds the item of the list that correspond to a rule \n        as product_primary,\n        NULL::varchar \n        as sales_turn_over_local_income,\n        NULL::varchar \n        as sales_turn_over_national_income,\n        NULL::varchar \n        as sales_turn_over_international_income, \n        group_vte::varchar    -- finds the item of the list that correspond to a rule \n        as group_vte,\n        NULL::varchar \n        as test, \n        group_costs_amount::varchar    -- finds the item of the list that correspond to a rule \n        as group_costs_amount\n-- appropriate from statement\n    from onadata.\"na4_vte_edp_survey_apr-jun2021_draft\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n592392::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region,\n        NULL::varchar \n        as province, \n        district::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        date_interview::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        product::varchar    -- finds the item of the list that correspond to a rule \n        as product_primary, \n        sales_turn_over_local_income::varchar    -- finds the item of the list that correspond to a rule \n        as sales_turn_over_local_income, \n        sales_turn_over_national_income::varchar    -- finds the item of the list that correspond to a rule \n        as sales_turn_over_national_income, \n        sales_turn_over_international_income::varchar    -- finds the item of the list that correspond to a rule \n        as sales_turn_over_international_income, \n        group_vte::varchar    -- finds the item of the list that correspond to a rule \n        as group_vte,\n        NULL::varchar \n        as test, \n        group_costs_amount::varchar    -- finds the item of the list that correspond to a rule \n        as group_costs_amount\n-- appropriate from statement\n    from onadata.\"gb8_vte_edp_survey_apr-jun2021_final\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n629847::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region,\n        NULL::varchar \n        as province, \n        district::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        date_interview::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        product_primary::varchar    -- finds the item of the list that correspond to a rule \n        as product_primary, \n        sales_turn_over_local_income::varchar    -- finds the item of the list that correspond to a rule \n        as sales_turn_over_local_income, \n        sales_turn_over_national_income::varchar    -- finds the item of the list that correspond to a rule \n        as sales_turn_over_national_income, \n        sales_turn_over_international_income::varchar    -- finds the item of the list that correspond to a rule \n        as sales_turn_over_international_income, \n        group_vte::varchar    -- finds the item of the list that correspond to a rule \n        as group_vte, \n        test::varchar    -- finds the item of the list that correspond to a rule \n        as test, \n        group_costs_amount::varchar    -- finds the item of the list that correspond to a rule \n        as group_costs_amount\n-- appropriate from statement\n    from onadata.\"gb8_vte_edp_survey_jan-mar2022\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n642305::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    \n    _index::int as submission_index,\n    \n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region,\n        NULL::varchar \n        as province, \n        commune::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        date_interview::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment,\n        NULL::varchar \n        as product_primary,\n        NULL::varchar \n        as sales_turn_over_local_income,\n        NULL::varchar \n        as sales_turn_over_national_income,\n        NULL::varchar \n        as sales_turn_over_international_income, \n        group_vte::varchar    -- finds the item of the list that correspond to a rule \n        as group_vte,\n        NULL::varchar \n        as test, \n        group_costs_amount::varchar    -- finds the item of the list that correspond to a rule \n        as group_costs_amount\n-- appropriate from statement\n    from onadata.\"na6_vte_edp_survey_jan-mar2022\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n661432::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region,\n        NULL::varchar \n        as province, \n        district::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        date_interview::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        product_primary::varchar    -- finds the item of the list that correspond to a rule \n        as product_primary, \n        sales_turn_over_local_income::varchar    -- finds the item of the list that correspond to a rule \n        as sales_turn_over_local_income, \n        sales_turn_over_national_income::varchar    -- finds the item of the list that correspond to a rule \n        as sales_turn_over_national_income, \n        sales_turn_over_international_income::varchar    -- finds the item of the list that correspond to a rule \n        as sales_turn_over_international_income, \n        group_vte::varchar    -- finds the item of the list that correspond to a rule \n        as group_vte, \n        test::varchar    -- finds the item of the list that correspond to a rule \n        as test, \n        group_costs_amount::varchar    -- finds the item of the list that correspond to a rule \n        as group_costs_amount\n-- appropriate from statement\n    from onadata.\"gb8_vte_edp_survey_apr-jun2022\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n662588::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region,\n        NULL::varchar \n        as province, \n        district::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        date_interview::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        product_primary::varchar    -- finds the item of the list that correspond to a rule \n        as product_primary, \n        sales_turn_over_local_income::varchar    -- finds the item of the list that correspond to a rule \n        as sales_turn_over_local_income, \n        sales_turn_over_national_income::varchar    -- finds the item of the list that correspond to a rule \n        as sales_turn_over_national_income, \n        sales_turn_over_international_income::varchar    -- finds the item of the list that correspond to a rule \n        as sales_turn_over_international_income, \n        group_vte::varchar    -- finds the item of the list that correspond to a rule \n        as group_vte, \n        test::varchar    -- finds the item of the list that correspond to a rule \n        as test, \n        group_costs_amount::varchar    -- finds the item of the list that correspond to a rule \n        as group_costs_amount\n-- appropriate from statement\n    from onadata.\"mb6_vte_edp_survey_apr-jun2022\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n723107::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region, \n        province::varchar    -- finds the item of the list that correspond to a rule \n        as province, \n        district::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        date_assessment::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        product_primary::varchar    -- finds the item of the list that correspond to a rule \n        as product_primary, \n        sales_turn_over_local_income::varchar    -- finds the item of the list that correspond to a rule \n        as sales_turn_over_local_income, \n        sales_turn_over_national_income::varchar    -- finds the item of the list that correspond to a rule \n        as sales_turn_over_national_income, \n        sales_turn_over_international_income::varchar    -- finds the item of the list that correspond to a rule \n        as sales_turn_over_international_income, \n        group_vte::varchar    -- finds the item of the list that correspond to a rule \n        as group_vte, \n        test::varchar    -- finds the item of the list that correspond to a rule \n        as test, \n        group_costs_amount::varchar    -- finds the item of the list that correspond to a rule \n        as group_costs_amount\n-- appropriate from statement\n    from onadata.\"mc4_product_value_chain_survey_jan-mar23\"\n\n\n\n\n)\nselect \ns.form_name,\ns.type,\ns.timing,\ns.country,\ns.project_code,\ns.type_2,\ncq.*\nfrom \"tree_aid\".\"dbt_bokidi\".\"stg_survey_master\" s \nleft join core_questions cq on s.form_id::int = cq.form_id::int   \nwhere s.type = 'Enterprise survey'\n\n \n)\nselect  \n es.form_name,\n es.type,\n es.timing,\n es.country,\n es.project_code,\n es.form_id,\n es.submission_id,\n es.submission_index, \n initcap(replace(es.region,'_',' ')) as region,\n initcap(replace(es.province,'_',' ')) as province,\n initcap(replace(es.commune,'_',' ')) as commune,\t\n es.date_assessment::date,\n extract('Year' from es.date_assessment::date) as assessment_year,\n date_trunc('year',es.date_assessment::date) as assessment_year_date,\n es.group_vte,\n es.product_primary,\n es.sales_turn_over_local_income,\n es.sales_turn_over_national_income,\n es.sales_turn_over_international_income,\n coalesce(es.sales_turn_over_local_income::INTEGER,0) + coalesce(es.sales_turn_over_national_income::INTEGER,0) + \n coalesce(es.sales_turn_over_international_income::INTEGER,0) as total_income,\n es.test,\n es.group_costs_amount,\n 'Yes' as beneficiary_control,\n case -- add a test field to get test indicators BAO\n    when ((es.test is null ) or (es.test not in ('y', 'Y','yes','Yes')) ) then false\n    else true\nend as test_check\n from enterprise_surveys es\n where es.form_id is not null  \n --and ((es.test is null) or (es.test not in ('y', 'Y','yes','Yes'))) -- BAO add a test field to get test indicators", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.tree_aid.int_land_restoration_activities": {"database": "tree_aid", "schema": "dbt_bokidi", "name": "int_land_restoration_activities", "resource_type": "model", "package_name": "tree_aid", "path": "intermediate/int_land_restoration_activities.sql", "original_file_path": "models/intermediate/int_land_restoration_activities.sql", "unique_id": "model.tree_aid.int_land_restoration_activities", "fqn": ["tree_aid", "intermediate", "int_land_restoration_activities"], "alias": "int_land_restoration_activities", "checksum": {"name": "sha256", "checksum": "f7adca6223fc6d074306a76afcd82fc9922bc47439ed35eddda5bf26c58f95db"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "intermediate": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/tree_aid/models/intermediate/int_land_restoration_activities.sql", "deferred": false, "unrendered_config": {"intermediate": null, "materialized": "view"}, "created_at": 1698074991.2767732, "relation_name": "\"tree_aid\".\"dbt_bokidi\".\"int_land_restoration_activities\"", "raw_code": "with land_data as \r\n (\r\n select * from {{ ref('land_surveys') }}\r\n ),\r\n nrm_category as\r\n (\r\n    select \r\n    submission_id,\r\n    'Biological methods' as category,\r\n    unnest(string_to_array(biological_methods,',')) as technique\r\n    from land_data\r\n ),\r\n soil_water as \r\n (\r\n    select \r\n    submission_id,\r\n    'Soil and water conservation' as category,\r\n    unnest(string_to_array(soil_water_cons,',')) as technique\r\n    from land_data \r\n ),\r\n gully as \r\n (\r\n  select \r\n    submission_id,\r\n    'Gully control' as category,\r\n    unnest(string_to_array(gully_methods,',')) as technique\r\n    from land_data   \r\n ),\r\n restoration_activities as \r\n (\r\nselect * from nrm_category\r\nunion all\r\nselect * from soil_water\r\nunion all \r\nselect * from gully\r\n )\r\n select \r\n        form_name,\r\n        country,\r\n        project_code,\r\n        form_id,\r\n        ra.submission_id,\r\n        region,\r\n        province,\r\n        commune,\r\n        date_assessment,\r\n        assessment_year,\r\n        ra.category,\r\n        trim(replace(replace(replace(ra.technique,'_', ' '),'Biological',''),'Swc','')) as technique,\r\n        type_2\r\n        from restoration_activities ra\r\n        left join land_data on ra.submission_id=land_data.submission_id", "language": "sql", "refs": [{"name": "land_surveys", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.tree_aid.land_surveys"]}, "compiled_path": "target/compiled/tree_aid/models/intermediate/int_land_restoration_activities.sql", "compiled": true, "compiled_code": "with land_data as \n (\n select * from \"tree_aid\".\"dbt_bokidi\".\"land_surveys\"\n ),\n nrm_category as\n (\n    select \n    submission_id,\n    'Biological methods' as category,\n    unnest(string_to_array(biological_methods,',')) as technique\n    from land_data\n ),\n soil_water as \n (\n    select \n    submission_id,\n    'Soil and water conservation' as category,\n    unnest(string_to_array(soil_water_cons,',')) as technique\n    from land_data \n ),\n gully as \n (\n  select \n    submission_id,\n    'Gully control' as category,\n    unnest(string_to_array(gully_methods,',')) as technique\n    from land_data   \n ),\n restoration_activities as \n (\nselect * from nrm_category\nunion all\nselect * from soil_water\nunion all \nselect * from gully\n )\n select \n        form_name,\n        country,\n        project_code,\n        form_id,\n        ra.submission_id,\n        region,\n        province,\n        commune,\n        date_assessment,\n        assessment_year,\n        ra.category,\n        trim(replace(replace(replace(ra.technique,'_', ' '),'Biological',''),'Swc','')) as technique,\n        type_2\n        from restoration_activities ra\n        left join land_data on ra.submission_id=land_data.submission_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.tree_aid.land_surveys_planted": {"database": "tree_aid", "schema": "dbt_bokidi", "name": "land_surveys_planted", "resource_type": "model", "package_name": "tree_aid", "path": "marts/land_surveys_planted.sql", "original_file_path": "models/marts/land_surveys_planted.sql", "unique_id": "model.tree_aid.land_surveys_planted", "fqn": ["tree_aid", "marts", "land_surveys_planted"], "alias": "land_surveys_planted", "checksum": {"name": "sha256", "checksum": "2b680c51918d945c5b6c9d4958571c392609bfdcd0eb17a2e80c8fdaf8308149"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "intermediate": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/tree_aid/models/marts/land_surveys_planted.sql", "deferred": false, "unrendered_config": {"intermediate": null, "materialized": "table"}, "created_at": 1698074991.2836146, "relation_name": "\"tree_aid\".\"dbt_bokidi\".\"land_surveys_planted\"", "raw_code": "with data as\r\n(\r\n{{survey_type_table('Land survey', repeat='planted')}} \r\n)\r\n-- set of fields from all  table\r\nselect\r\n{{get_standard_columns('d','ls')}},\r\n-- set of fields from child table\r\nd.species,\r\nd.number_planted,\r\nd.number_regenerated,\r\nls.type_2,\r\nTRUE as odk_source \r\nfrom data d\r\ninner join {{ ref('land_surveys') }} ls on d.submission_id=ls.submission_id\r\nwhere ls.test not in ('y', 'Y','yes','Yes') or ls.test is null\r\n-- Gemma to add union to new sources once they have been created (e.g. trees_planted_legacy, using dbt union)\r\n-- select * , FALSE as odk_source\r\n--from scr('trees_planted_legacy')\r\n--\r\nunion all\r\nselect \r\n    form_name, \r\n    country, \r\n    project_code, \r\n    form_id, \r\n    id::bigint as id, \r\n    legacy_id::int as submission_id, \r\n    region, \r\n    province, \r\n    commune, \r\n    date_assessment, \r\n    assessment_year::int,\r\n    to_timestamp(assessment_year_date,'YYYY-MM-DD HH:MI:SS') as assessment_year_date, \r\n    beneficiary_control, \r\n    species, \r\n    number_planted, \r\n    number_regenerated, \r\n    type_2,\r\n    TRUE as odk_source\r\nfrom {{ source('airbyte', 'trees_planted_legacy') }}", "language": "sql", "refs": [{"name": "stg_core_questions_union", "package": null, "version": null}, {"name": "stg_core_questions_master", "package": null, "version": null}, {"name": "stg_survey_master", "package": null, "version": null}, {"name": "land_surveys", "package": null, "version": null}], "sources": [["airbyte", "trees_planted_legacy"]], "metrics": [], "depends_on": {"macros": ["macro.tree_aid.survey_type_table", "macro.tree_aid.get_standard_columns"], "nodes": ["source.tree_aid.airbyte.trees_planted_legacy", "model.tree_aid.stg_core_questions_union", "model.tree_aid.stg_core_questions_master", "model.tree_aid.stg_survey_master", "model.tree_aid.land_surveys"]}, "compiled_path": "target/compiled/tree_aid/models/marts/land_surveys_planted.sql", "compiled": true, "compiled_code": "with data as\n(\n \n\nwith core_questions as \n(\n     \n   \n\n-- create list of forms.   -- if 'rhomis' create list that are not in extended.rhomis . And either way, up to 5-- create list of fields-- start actual macro\n    -- for each form\n\n    --finds schemaname and tablename for the db table associated to the form\n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n        \n      \n\n    -- loop through all the core fields, select the field with the appropriate name if present\n        \n            --loop through all the fields in dict\n            select \n            567720::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,74410291 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_land_use_survey_jan2021_group_survey_repeat_planted\"\n                    \n                                where parent_id=74410291\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            567720::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,74410904 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_land_use_survey_jan2021_group_survey_repeat_planted\"\n                    \n                                where parent_id=74410904\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            567720::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,74411123 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_land_use_survey_jan2021_group_survey_repeat_planted\"\n                    \n                                where parent_id=74411123\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            567720::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,74410755 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_land_use_survey_jan2021_group_survey_repeat_planted\"\n                    \n                                where parent_id=74410755\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            567720::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,74411290 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_land_use_survey_jan2021_group_survey_repeat_planted\"\n                    \n                                where parent_id=74411290\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            567720::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,74412089 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_land_use_survey_jan2021_group_survey_repeat_planted\"\n                    \n                                where parent_id=74412089\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            567720::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,74412580 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_land_use_survey_jan2021_group_survey_repeat_planted\"\n                    \n                                where parent_id=74412580\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            567720::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,74415179 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_land_use_survey_jan2021_group_survey_repeat_planted\"\n                    \n                                where parent_id=74415179\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            567720::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,74411494 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_land_use_survey_jan2021_group_survey_repeat_planted\"\n                    \n                                where parent_id=74411494\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            567720::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,74412744 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_land_use_survey_jan2021_group_survey_repeat_planted\"\n                    \n                                where parent_id=74412744\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            567720::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,74417233 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb6_land_use_survey_jan2021_group_survey_repeat_planted\"\n                    \n                                where parent_id=74417233\n                            \n                     \n            \n        \n            union all\n    --finds schemaname and tablename for the db table associated to the form\n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n        \n      \n\n    -- loop through all the core fields, select the field with the appropriate name if present\n        \n            --loop through all the fields in dict\n            select \n            593428::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,81577228 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_use_survey_apr-jun2021_repeat_planted\"\n                    \n                                where parent_id=81577228\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            593428::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,81663509 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_use_survey_apr-jun2021_repeat_planted\"\n                    \n                                where parent_id=81663509\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            593428::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,81663638 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_use_survey_apr-jun2021_repeat_planted\"\n                    \n                                where parent_id=81663638\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            593428::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,81663649 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_use_survey_apr-jun2021_repeat_planted\"\n                    \n                                where parent_id=81663649\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            593428::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,81699268 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_use_survey_apr-jun2021_repeat_planted\"\n                    \n                                where parent_id=81699268\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            593428::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,81740499 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_use_survey_apr-jun2021_repeat_planted\"\n                    \n                                where parent_id=81740499\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            593428::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,81740519 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_use_survey_apr-jun2021_repeat_planted\"\n                    \n                                where parent_id=81740519\n                            \n                     \n            \n        \n            union all\n    --finds schemaname and tablename for the db table associated to the form\n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n        \n      \n\n    -- loop through all the core fields, select the field with the appropriate name if present\n        \n            --loop through all the fields in dict\n            select \n            605332::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,81243731 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_land_use_survey_jul_sep2021_repeat_planted\"\n                    \n                                where parent_id=81243731\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            605332::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,81252488 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_land_use_survey_jul_sep2021_repeat_planted\"\n                    \n                                where parent_id=81252488\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            605332::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,81254407 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_land_use_survey_jul_sep2021_repeat_planted\"\n                    \n                                where parent_id=81254407\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            605332::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,81261964 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_land_use_survey_jul_sep2021_repeat_planted\"\n                    \n                                where parent_id=81261964\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            605332::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,81510563 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_land_use_survey_jul_sep2021_repeat_planted\"\n                    \n                                where parent_id=81510563\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            605332::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,81510576 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_land_use_survey_jul_sep2021_repeat_planted\"\n                    \n                                where parent_id=81510576\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            605332::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,81510638 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_land_use_survey_jul_sep2021_repeat_planted\"\n                    \n                                where parent_id=81510638\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            605332::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,81510679 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_land_use_survey_jul_sep2021_repeat_planted\"\n                    \n                                where parent_id=81510679\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            605332::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,81510748 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_land_use_survey_jul_sep2021_repeat_planted\"\n                    \n                                where parent_id=81510748\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            605332::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,81510790 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_land_use_survey_jul_sep2021_repeat_planted\"\n                    \n                                where parent_id=81510790\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            605332::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,81511599 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_land_use_survey_jul_sep2021_repeat_planted\"\n                    \n                                where parent_id=81511599\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            605332::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,81511720 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_land_use_survey_jul_sep2021_repeat_planted\"\n                    \n                                where parent_id=81511720\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            605332::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,81511848 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_land_use_survey_jul_sep2021_repeat_planted\"\n                    \n                                where parent_id=81511848\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            605332::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,81511928 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_land_use_survey_jul_sep2021_repeat_planted\"\n                    \n                                where parent_id=81511928\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            605332::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,81511995 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_land_use_survey_jul_sep2021_repeat_planted\"\n                    \n                                where parent_id=81511995\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            605332::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,81512017 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_land_use_survey_jul_sep2021_repeat_planted\"\n                    \n                                where parent_id=81512017\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            605332::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,81512044 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_land_use_survey_jul_sep2021_repeat_planted\"\n                    \n                                where parent_id=81512044\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            605332::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,81512302 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_land_use_survey_jul_sep2021_repeat_planted\"\n                    \n                                where parent_id=81512302\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            605332::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,81512327 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"na6_land_use_survey_jul_sep2021_repeat_planted\"\n                    \n                                where parent_id=81512327\n                            \n                     \n            \n        \n            union all\n    --finds schemaname and tablename for the db table associated to the form\n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n        \n      \n\n    -- loop through all the core fields, select the field with the appropriate name if present\n        \n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85164453 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85164453\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85167271 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85167271\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85164506 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85164506\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85164561 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85164561\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85164576 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85164576\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85164669 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85164669\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85164710 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85164710\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85164783 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85164783\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85164834 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85164834\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85164852 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85164852\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85164886 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85164886\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85165024 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85165024\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85162980 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85162980\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85163288 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85163288\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85163363 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85163363\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85163434 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85163434\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85163462 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85163462\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85163543 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85163543\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85163596 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85163596\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85163664 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85163664\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85163724 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85163724\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85163748 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85163748\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85163760 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85163760\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85163902 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85163902\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85163946 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85163946\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85164021 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85164021\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85164134 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85164134\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85164183 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85164183\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85164189 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85164189\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85164205 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85164205\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85164296 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85164296\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85164307 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85164307\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85164406 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85164406\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85165054 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85165054\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85165069 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85165069\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85165175 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85165175\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85165216 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85165216\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85165385 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85165385\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85165512 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85165512\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85165577 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85165577\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85165662 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85165662\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85165718 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85165718\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85165762 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85165762\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85165850 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85165850\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85165920 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85165920\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85166069 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85166069\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85166521 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85166521\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85166582 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85166582\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85166656 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85166656\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85166721 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85166721\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85166764 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85166764\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85166799 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85166799\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85166879 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85166879\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85166917 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85166917\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85166985 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85166985\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            610315::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,85167152 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mali_land_use_survey_final_repeat_planted\"\n                    \n                                where parent_id=85167152\n                            \n                     \n            \n        \n            union all\n    --finds schemaname and tablename for the db table associated to the form\n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n        \n      \n\n    -- loop through all the core fields, select the field with the appropriate name if present\n        \n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92395662 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92395662\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92395664 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92395664\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92395700 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92395700\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92395788 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92395788\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92395855 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92395855\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92395861 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92395861\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92415173 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92415173\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92415179 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92415179\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92415241 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92415241\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92415255 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92415255\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92416904 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92416904\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92416953 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92416953\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92423078 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92423078\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92428739 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92428739\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92428741 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92428741\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92428759 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92428759\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92428761 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92428761\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92468042 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92468042\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92468055 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92468055\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92468071 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92468071\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92489675 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92489675\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92489696 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92489696\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92489703 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92489703\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92489712 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92489712\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92489734 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92489734\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92490205 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92490205\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92490263 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92490263\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92490281 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92490281\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92490316 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92490316\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92490331 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92490331\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92490346 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92490346\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92490412 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92490412\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92490480 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92490480\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92490998 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92490998\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92527678 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92527678\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92527685 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92527685\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92527692 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92527692\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92527695 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92527695\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92527852 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92527852\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92527853 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92527853\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92527856 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92527856\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,88790998 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=88790998\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,88790336 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=88790336\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,88790382 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=88790382\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,88790402 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=88790402\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,88790464 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=88790464\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,88790486 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=88790486\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,88790513 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=88790513\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,88790684 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=88790684\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,88790726 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=88790726\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,88790866 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=88790866\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,88791087 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=88791087\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,88791129 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=88791129\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,88791141 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=88791141\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,88791169 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=88791169\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,88791212 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=88791212\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,88791258 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=88791258\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,88791281 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=88791281\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,88791305 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=88791305\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,88791329 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=88791329\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,88791384 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=88791384\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,88791389 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=88791389\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92393997 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92393997\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92394022 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92394022\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92394036 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92394036\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92394046 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92394046\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92394236 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92394236\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92394237 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92394237\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92394268 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92394268\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92394699 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92394699\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92394703 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92394703\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92394706 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92394706\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92394815 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92394815\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92394817 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92394817\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92395518 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92395518\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92527862 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92527862\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92794479 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92794479\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92794842 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92794842\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92958835 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92958835\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92958842 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92958842\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92958853 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92958853\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92958862 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92958862\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92958880 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92958880\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92958919 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92958919\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92959060 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92959060\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92959073 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92959073\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92959097 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92959097\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            631196::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92959102 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_oct-dec21_repeat_planted\"\n                    \n                                where parent_id=92959102\n                            \n                     \n            \n        \n            union all\n    --finds schemaname and tablename for the db table associated to the form\n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n        \n      \n\n    -- loop through all the core fields, select the field with the appropriate name if present\n        \n            --loop through all the fields in dict\n            select \n            636142::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,90473673 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    NULL::varchar \n                     \n                    as number_planted,\n                    NULL::varchar \n                     \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb9_land_restoration_survey_oct-dec21_meds_repeat_planted\"\n                    \n                                where parent_id=90473673\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            636142::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,90473780 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    NULL::varchar \n                     \n                    as number_planted,\n                    NULL::varchar \n                     \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb9_land_restoration_survey_oct-dec21_meds_repeat_planted\"\n                    \n                                where parent_id=90473780\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            636142::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,90149159 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    NULL::varchar \n                     \n                    as number_planted,\n                    NULL::varchar \n                     \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb9_land_restoration_survey_oct-dec21_meds_repeat_planted\"\n                    \n                                where parent_id=90149159\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            636142::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,90149256 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    NULL::varchar \n                     \n                    as number_planted,\n                    NULL::varchar \n                     \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb9_land_restoration_survey_oct-dec21_meds_repeat_planted\"\n                    \n                                where parent_id=90149256\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            636142::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,90473561 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    NULL::varchar \n                     \n                    as number_planted,\n                    NULL::varchar \n                     \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb9_land_restoration_survey_oct-dec21_meds_repeat_planted\"\n                    \n                                where parent_id=90473561\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            636142::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,90473596 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    NULL::varchar \n                     \n                    as number_planted,\n                    NULL::varchar \n                     \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb9_land_restoration_survey_oct-dec21_meds_repeat_planted\"\n                    \n                                where parent_id=90473596\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            636142::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,90473617 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    NULL::varchar \n                     \n                    as number_planted,\n                    NULL::varchar \n                     \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb9_land_restoration_survey_oct-dec21_meds_repeat_planted\"\n                    \n                                where parent_id=90473617\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            636142::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,90473640 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    NULL::varchar \n                     \n                    as number_planted,\n                    NULL::varchar \n                     \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mb9_land_restoration_survey_oct-dec21_meds_repeat_planted\"\n                    \n                                where parent_id=90473640\n                            \n                     \n            \n        \n            union all\n    --finds schemaname and tablename for the db table associated to the form\n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n        \n      \n\n    -- loop through all the core fields, select the field with the appropriate name if present\n        \n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92291459 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92291459\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92291483 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92291483\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92291505 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92291505\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92298300 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92298300\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92298349 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92298349\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92298350 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92298350\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92314800 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92314800\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92341214 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92341214\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92348356 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92348356\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92348359 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92348359\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92348363 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92348363\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92460909 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92460909\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92460957 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92460957\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92460964 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92460964\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92461033 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92461033\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92461040 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92461040\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92464563 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92464563\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92467879 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92467879\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92509527 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92509527\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92509529 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92509529\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92509530 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92509530\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92509534 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92509534\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92509536 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92509536\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92509541 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92509541\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92509547 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92509547\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92510579 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92510579\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92511162 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92511162\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92511198 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92511198\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92576636 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92576636\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92576660 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92576660\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92576664 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92576664\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92576674 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92576674\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92594546 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92594546\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92594557 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92594557\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92606704 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92606704\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92658813 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92658813\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92693095 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92693095\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92467899 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92467899\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92500823 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92500823\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92693110 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92693110\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92693126 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92693126\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            647207::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,92780258 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bc3_land_restoration_survey_jan-mar22_repeat_planted\"\n                    \n                                where parent_id=92780258\n                            \n                     \n            \n        \n            union all\n    --finds schemaname and tablename for the db table associated to the form\n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n        \n      \n\n    -- loop through all the core fields, select the field with the appropriate name if present\n        \n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98783553 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98783553\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96257025 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=96257025\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,96778340 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=96778340\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98447989 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98447989\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98447993 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98447993\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98447998 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98447998\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98448006 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98448006\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98448045 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98448045\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98448060 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98448060\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98448062 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98448062\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98448064 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98448064\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98448070 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98448070\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98448381 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98448381\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98690985 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98690985\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98690996 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98690996\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98691002 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98691002\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98691007 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98691007\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98691008 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98691008\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98691011 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98691011\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98691015 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98691015\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98691019 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98691019\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98691022 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98691022\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98691025 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98691025\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98691030 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98691030\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98691033 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98691033\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98691035 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98691035\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98783469 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98783469\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98783472 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98783472\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98783530 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98783530\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98783544 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98783544\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98859036 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98859036\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98859041 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98859041\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98866081 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98866081\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98866083 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98866083\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98866127 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98866127\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98866216 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98866216\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98866257 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98866257\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98866357 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98866357\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,98866738 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=98866738\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,99031166 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=99031166\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,99031168 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=99031168\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,99031172 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=99031172\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,99031179 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=99031179\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,99031184 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=99031184\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,99031193 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=99031193\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,99031197 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=99031197\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,99031201 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=99031201\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,99031206 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=99031206\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,99031214 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=99031214\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,99031222 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=99031222\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,99031238 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=99031238\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,99031240 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=99031240\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,99031245 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=99031245\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            662617::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,99031256 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"bb6_land_restoration_survey_apr-jun22_repeat_planted\"\n                    \n                                where parent_id=99031256\n                            \n                     \n            \n        \n            union all\n    --finds schemaname and tablename for the db table associated to the form\n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n        \n      \n\n    -- loop through all the core fields, select the field with the appropriate name if present\n        \n            --loop through all the fields in dict\n            select \n            694812::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108432279 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc9_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108432279\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            694812::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108432414 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc9_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108432414\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            694812::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108433375 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc9_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108433375\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            694812::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108440027 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc9_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108440027\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            694812::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108440831 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc9_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108440831\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            694812::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108489536 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc9_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108489536\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            694812::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108489560 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc9_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108489560\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            694812::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108489583 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc9_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108489583\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            694812::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108489604 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc9_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108489604\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            694812::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108489609 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc9_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108489609\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            694812::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108551416 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc9_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108551416\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            694812::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108593462 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc9_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108593462\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            694812::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108593561 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc9_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108593561\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            694812::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108593698 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc9_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108593698\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            694812::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108593751 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc9_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108593751\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            694812::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108593816 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc9_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108593816\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            694812::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108593842 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc9_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108593842\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            694812::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108594294 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc9_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108594294\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            694812::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108594726 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc9_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108594726\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            694812::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108594964 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc9_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108594964\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            694812::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108595432 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc9_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108595432\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            694812::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108804437 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc9_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108804437\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            694812::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108827775 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc9_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108827775\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            694812::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,109029783 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc9_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=109029783\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            694812::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,109029789 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc9_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=109029789\n                            \n                     \n            \n        \n            union all\n    --finds schemaname and tablename for the db table associated to the form\n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n        \n      \n\n    -- loop through all the core fields, select the field with the appropriate name if present\n        \n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107860411 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107860411\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107860434 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107860434\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107860489 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107860489\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107860511 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107860511\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107860535 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107860535\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107860547 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107860547\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107860588 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107860588\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107860612 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107860612\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107860938 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107860938\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107860977 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107860977\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107860986 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107860986\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107864630 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107864630\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107864678 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107864678\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107864715 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107864715\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107864791 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107864791\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107864868 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107864868\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107864983 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107864983\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107859434 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107859434\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107859450 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107859450\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107859451 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107859451\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107859453 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107859453\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107859455 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107859455\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107859459 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107859459\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107859480 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107859480\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107859482 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107859482\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107859488 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107859488\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107859492 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107859492\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107859498 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107859498\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107859592 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107859592\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107859603 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107859603\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107859622 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107859622\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107859633 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107859633\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107859645 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107859645\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107859651 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107859651\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107859666 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107859666\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107859677 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107859677\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107859836 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107859836\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107859840 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107859840\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107859851 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107859851\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107859865 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107859865\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107859873 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107859873\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107859878 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107859878\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107859884 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107859884\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107865064 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107865064\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107867486 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107867486\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107867494 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107867494\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107867520 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107867520\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107867616 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107867616\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107867689 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107867689\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107867738 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107867738\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107867772 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107867772\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107872173 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107872173\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107872267 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107872267\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107872307 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107872307\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107872394 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107872394\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107872445 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107872445\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696091::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,107872475 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"gc6_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=107872475\n                            \n                     \n            \n        \n            union all\n    --finds schemaname and tablename for the db table associated to the form\n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n        \n      \n\n    -- loop through all the core fields, select the field with the appropriate name if present\n        \n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728554 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728554\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728590 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728590\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728628 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728628\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728665 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728665\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108752568 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108752568\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108752572 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108752572\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728712 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728712\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728761 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728761\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728807 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728807\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728843 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728843\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728888 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728888\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728918 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728918\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728956 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728956\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728998 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728998\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108729032 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108729032\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108749265 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108749265\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108749284 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108749284\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108749306 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108749306\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108749330 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108749330\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108749484 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108749484\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108749511 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108749511\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108749526 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108749526\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108749540 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108749540\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108749554 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108749554\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108749579 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108749579\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108749599 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108749599\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108749618 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108749618\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108749634 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108749634\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108749649 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108749649\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108749668 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108749668\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108749731 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108749731\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108749781 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108749781\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108749797 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108749797\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108750024 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108750024\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108750069 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108750069\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108750097 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108750097\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108750116 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108750116\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108750128 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108750128\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728311 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728311\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728314 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728314\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728317 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728317\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728320 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728320\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728334 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728334\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728342 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728342\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728356 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728356\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728373 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728373\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728379 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728379\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728385 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728385\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728389 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728389\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728399 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728399\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728404 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728404\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728414 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728414\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728425 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728425\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728435 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728435\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728439 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728439\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728444 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728444\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728447 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728447\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728451 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728451\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728455 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728455\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728457 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728457\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728459 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728459\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728462 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728462\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728467 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728467\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728469 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728469\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728478 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728478\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728482 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728482\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728490 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728490\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728504 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728504\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728505 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728505\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108728519 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108728519\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108750142 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108750142\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108750156 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108750156\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108750170 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108750170\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108750213 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108750213\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108750257 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108750257\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108750309 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108750309\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108750326 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108750326\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108751896 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108751896\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108751901 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108751901\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108751903 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108751903\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108751905 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108751905\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108751912 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108751912\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108751914 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108751914\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108751916 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108751916\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108751934 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108751934\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108751940 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108751940\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108751943 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108751943\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108751946 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108751946\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108751950 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108751950\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108751954 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108751954\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108751960 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108751960\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108751967 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108751967\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108751981 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108751981\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108752313 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108752313\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108752316 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108752316\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108752323 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108752323\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108752338 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108752338\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108752347 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108752347\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108752358 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108752358\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108752366 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108752366\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108752372 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108752372\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108752375 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108752375\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108752378 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108752378\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108752380 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108752380\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108752517 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108752517\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108752518 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108752518\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108752519 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108752519\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108752520 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108752520\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108752521 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108752521\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108752533 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108752533\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108752548 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108752548\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108752554 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108752554\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696098::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,108752561 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc0_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=108752561\n                            \n                     \n            \n        \n            union all\n    --finds schemaname and tablename for the db table associated to the form\n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n                \n            \n        \n      \n\n    -- loop through all the core fields, select the field with the appropriate name if present\n        \n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110193908 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110193908\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110193910 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110193910\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110193913 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110193913\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110193914 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110193914\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110193976 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110193976\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110193984 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110193984\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110194035 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110194035\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110194053 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110194053\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110194064 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110194064\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110194069 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110194069\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110194071 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110194071\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110194074 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110194074\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110194076 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110194076\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110194086 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110194086\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110194132 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110194132\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110194138 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110194138\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110194162 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110194162\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110194210 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110194210\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110194244 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110194244\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110194261 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110194261\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110195666 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110195666\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110195676 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110195676\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110195683 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110195683\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110195686 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110195686\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110195688 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110195688\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110195691 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110195691\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110195736 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110195736\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110256905 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110256905\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110256914 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110256914\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110256985 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110256985\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110257004 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110257004\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110257019 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110257019\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110257038 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110257038\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110257046 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110257046\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110257065 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110257065\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110257090 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110257090\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110257111 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110257111\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110257129 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110257129\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110257157 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110257157\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110257183 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110257183\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110257365 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110257365\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110257430 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110257430\n                            \n                    \n                    union all\n            --loop through all the fields in dict\n            select \n            696106::varchar as form_id, \n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\n                id as id,110257679 as submission_id,                    \n                        null::bigint as parent_index,\n                \n                -- loop through all the core fields, select the field with the appropriate name if present\n                \n                    species::varchar \n                    as species,\n                    number_planted::varchar \n                    as number_planted,\n                    number_regenerated::varchar \n                    as number_regenerated\n            \n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\n                from \n                onadata.\"mc2_land_restoration_survey_2022_repeat_planted\"\n                    \n                                where parent_id=110257679\n                            \n                     \n            \n        \n\n)\nselect \ns.form_name,\ns.type,\ns.timing,\ns.country,\ns.project_code,\ns.type_2,\ncq.*\nfrom \"tree_aid\".\"dbt_bokidi\".\"stg_survey_master\" s \nleft join core_questions cq on s.form_id::int = cq.form_id::int   \nwhere s.type = 'Land survey'\n\n \n)\n-- set of fields from all  table\nselect\n\n\"d\".form_name,\n\"d\".country,\n\"d\".project_code,\n\"d\".form_id,\n\"d\".id,\n\"d\".submission_id, --in this macro, submission id is collected from the first alias\n\"ls\".region,\n\"ls\".province,\n\"ls\".commune,\n\"ls\".date_assessment,\nextract('Year' from \"ls\".date_assessment::date) as assessment_year,\n\"ls\".assessment_year_date,\n\"ls\".beneficiary_control\n,\n-- set of fields from child table\nd.species,\nd.number_planted,\nd.number_regenerated,\nls.type_2,\nTRUE as odk_source \nfrom data d\ninner join \"tree_aid\".\"dbt_bokidi\".\"land_surveys\" ls on d.submission_id=ls.submission_id\nwhere ls.test not in ('y', 'Y','yes','Yes') or ls.test is null\n-- Gemma to add union to new sources once they have been created (e.g. trees_planted_legacy, using dbt union)\n-- select * , FALSE as odk_source\n--from scr('trees_planted_legacy')\n--\nunion all\nselect \n    form_name, \n    country, \n    project_code, \n    form_id, \n    id::bigint as id, \n    legacy_id::int as submission_id, \n    region, \n    province, \n    commune, \n    date_assessment, \n    assessment_year::int,\n    to_timestamp(assessment_year_date,'YYYY-MM-DD HH:MI:SS') as assessment_year_date, \n    beneficiary_control, \n    species, \n    number_planted, \n    number_regenerated, \n    type_2,\n    TRUE as odk_source\nfrom \"tree_aid\".\"airbyte\".\"trees_planted_legacy\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.tree_aid.land_surveys": {"database": "tree_aid", "schema": "dbt_bokidi", "name": "land_surveys", "resource_type": "model", "package_name": "tree_aid", "path": "marts/land_surveys.sql", "original_file_path": "models/marts/land_surveys.sql", "unique_id": "model.tree_aid.land_surveys", "fqn": ["tree_aid", "marts", "land_surveys"], "alias": "land_surveys", "checksum": {"name": "sha256", "checksum": "86e8ebae4b16553b7d850132eb41694b631beca682abedb6d82cf99fa03357d7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "intermediate": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/tree_aid/models/marts/land_surveys.sql", "deferred": false, "unrendered_config": {"intermediate": null, "materialized": "table"}, "created_at": 1698074991.2906356, "relation_name": "\"tree_aid\".\"dbt_bokidi\".\"land_surveys\"", "raw_code": "with land_survey as\r\n(\r\n{{survey_type_table('Land survey')}}\r\n)\r\nselect \r\n        ls.form_name,\r\n        ls.country,\r\n        ls.project_code,\r\n        ls.form_id,\r\n        ls.submission_id,\r\n        initcap(replace(ls.region,'_',' ')) as region,\r\n        initcap(replace(ls.province,'_',' ')) as province,\r\n        initcap(replace(ls.commune,'_',' ')) as commune,\r\n        ls.date_assessment,\r\n        extract('Year' from ls.date_assessment::date) as assessment_year,\r\n        date_trunc('year',ls.date_assessment::date) as assessment_year_date,\r\n        ls.gps_shape_area as gps_shape_area_m2,\r\n        {{area_in_hectares('gps_shape_area::FLOAT')}} as gps_shape_area_ha,\r\n        ls.test,\r\n        ls.geoshape,\r\n        initcap(replace((replace(regexp_replace(ls.biological_methods,'[^a-zA-Z,,_]','','g'),'_',' ')),'Biological','')) as biological_methods,\r\n        initcap(replace(regexp_replace(ls.soil_water_cons,'[^a-zA-Z,,_]','','g'),'_',' ')) as soil_water_cons,\r\n        initcap(replace(regexp_replace(ls.gully_methods,'[^a-zA-Z,,_]','','g'),'_',' ')) as gully_methods,\r\n        ls.type_2,\r\n        'Yes' as beneficiary_control,\r\n        case -- add a test field to get test indicators BAO\r\n            when ((ls.test is null ) or (ls.test not in ('y', 'Y','yes','Yes')) ) then false\r\n            else true\r\n        end as test_check\r\n    from land_survey ls\r\n    where ls.form_id is not null -- filters forms that don't have survey definitions yet\r\n    --and ((ls.test is null ) or (ls.test not in ('y', 'Y','yes','Yes')) ) -- BAO add a test field to get test indicators\r\n    union all\r\n    select form_name, country, project_code, form_id, legacy_id::int, region, province, commune, date_assessment, assessment_year::int,to_timestamp(assessment_year_date,'YYYY-MM-DD HH:MI:SS'), gps_shape_area_m2, gps_shape_area_ha::int, test, geoshape, biological_methods, soil_water_cons, gully_methods, type_2, beneficiary_control,\r\n    case -- add a test field to get test indicators BAO\r\n        when ((test is null ) or (test not in ('y', 'Y','yes','Yes')) ) then false\r\n        else true\r\n    end as test_check\r\n    from {{ source('airbyte', 'land_area_legacy') }}", "language": "sql", "refs": [{"name": "stg_core_questions_master", "package": null, "version": null}, {"name": "stg_core_questions_union", "package": null, "version": null}, {"name": "stg_survey_master", "package": null, "version": null}], "sources": [["airbyte", "land_area_legacy"]], "metrics": [], "depends_on": {"macros": ["macro.tree_aid.survey_type_table", "macro.tree_aid.area_in_hectares"], "nodes": ["source.tree_aid.airbyte.land_area_legacy", "model.tree_aid.stg_core_questions_master", "model.tree_aid.stg_core_questions_union", "model.tree_aid.stg_survey_master"]}, "compiled_path": "target/compiled/tree_aid/models/marts/land_surveys.sql", "compiled": true, "compiled_code": "with land_survey as\n(\n \n\nwith core_questions as \n(\n\n\n\n--find all the expected core fields for that form type    \n\n\n--For all forms for a selected survey type\n\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n567720::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region, \n        province::varchar    -- finds the item of the list that correspond to a rule \n        as province, \n        district::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        collection_date::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        gps_shape_area::varchar    -- finds the item of the list that correspond to a rule \n        as gps_shape_area, \n        biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods,\n        NULL::varchar \n        as test, \n        gps_shape::varchar    -- finds the item of the list that correspond to a rule \n        as geoshape, \n        soil_water_cons_methods::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        biological_proportion::varchar    -- finds the item of the list that correspond to a rule \n        as biological_proportion, \n        soil_water_cons_proportion::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons_proportion, \n        gully_methods::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods, \n        gully_proportion::varchar    -- finds the item of the list that correspond to a rule \n        as gully_proportion\n-- appropriate from statement\n    from onadata.\"mb6_land_use_survey_jan2021\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n587716::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region,\n        NULL::varchar \n        as province, \n        commune::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        date_assessment::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        gps_shape_area::varchar    -- finds the item of the list that correspond to a rule \n        as gps_shape_area,\n        NULL::varchar \n        as biological_methods,\n        NULL::varchar \n        as test, \n        gps_shape::varchar    -- finds the item of the list that correspond to a rule \n        as geoshape,\n        NULL::varchar \n        as soil_water_cons,\n        NULL::varchar \n        as biological_proportion,\n        NULL::varchar \n        as soil_water_cons_proportion,\n        NULL::varchar \n        as gully_methods,\n        NULL::varchar \n        as gully_proportion\n-- appropriate from statement\n    from onadata.\"mc1_perimeter_village_area_survey_final\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n589057::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region,\n        NULL::varchar \n        as province, \n        commune::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        date_assessment::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment,\n        NULL::varchar \n        as gps_shape_area,\n        NULL::varchar \n        as biological_methods,\n        NULL::varchar \n        as test, \n        geoshape::varchar    -- finds the item of the list that correspond to a rule \n        as geoshape,\n        NULL::varchar \n        as soil_water_cons,\n        NULL::varchar \n        as biological_proportion,\n        NULL::varchar \n        as soil_water_cons_proportion,\n        NULL::varchar \n        as gully_methods,\n        NULL::varchar \n        as gully_proportion\n-- appropriate from statement\n    from onadata.\"gc6_perimeter_village_area_survey_draft\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n592217::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region,\n        NULL::varchar \n        as province, \n        commune::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        date_assessment::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        calculate_area::varchar    -- finds the item of the list that correspond to a rule \n        as gps_shape_area,\n        NULL::varchar \n        as biological_methods,\n        NULL::varchar \n        as test, \n        geoshape::varchar    -- finds the item of the list that correspond to a rule \n        as geoshape,\n        NULL::varchar \n        as soil_water_cons,\n        NULL::varchar \n        as biological_proportion,\n        NULL::varchar \n        as soil_water_cons_proportion,\n        NULL::varchar \n        as gully_methods,\n        NULL::varchar \n        as gully_proportion\n-- appropriate from statement\n    from onadata.\"gc6_perimeter_village_may2021_survey_final\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n593428::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region,\n        NULL::varchar \n        as province, \n        commune::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        date_assessment::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        calculate_area::varchar    -- finds the item of the list that correspond to a rule \n        as gps_shape_area, \n        biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods, \n        test::varchar    -- finds the item of the list that correspond to a rule \n        as test, \n        geoshape::varchar    -- finds the item of the list that correspond to a rule \n        as geoshape, \n        soil_water_cons_methods::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        biological_proportion::varchar    -- finds the item of the list that correspond to a rule \n        as biological_proportion, \n        soil_water_cons_proportion::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons_proportion, \n        gully_methods::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods, \n        gully_proportion::varchar    -- finds the item of the list that correspond to a rule \n        as gully_proportion\n-- appropriate from statement\n    from onadata.\"bb6_land_use_survey_apr-jun2021\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n605332::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region,\n        NULL::varchar \n        as province, \n        commune::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        date_assessment::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        calculate_area::varchar    -- finds the item of the list that correspond to a rule \n        as gps_shape_area, \n        biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods, \n        test::varchar    -- finds the item of the list that correspond to a rule \n        as test, \n        geoshape::varchar    -- finds the item of the list that correspond to a rule \n        as geoshape, \n        soil_water_cons_methods::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        biological_proportion::varchar    -- finds the item of the list that correspond to a rule \n        as biological_proportion, \n        soil_water_cons_proportion::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons_proportion, \n        gully_methods::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods, \n        gully_proportion::varchar    -- finds the item of the list that correspond to a rule \n        as gully_proportion\n-- appropriate from statement\n    from onadata.\"na6_land_use_survey_jul_sep2021\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n610315::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region,\n        NULL::varchar \n        as province, \n        commune::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        date_assessment::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        calculate_area::varchar    -- finds the item of the list that correspond to a rule \n        as gps_shape_area, \n        biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods, \n        test::varchar    -- finds the item of the list that correspond to a rule \n        as test, \n        geoshape::varchar    -- finds the item of the list that correspond to a rule \n        as geoshape, \n        soil_water_cons_methods::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        biological_proportion::varchar    -- finds the item of the list that correspond to a rule \n        as biological_proportion, \n        soil_water_cons_proportion::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons_proportion, \n        gully_methods::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods, \n        gully_proportion::varchar    -- finds the item of the list that correspond to a rule \n        as gully_proportion\n-- appropriate from statement\n    from onadata.\"mali_land_use_survey_final\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n631196::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region,\n        NULL::varchar \n        as province, \n        commune::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        date_assessment::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        calculate_area::varchar    -- finds the item of the list that correspond to a rule \n        as gps_shape_area, \n        biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods, \n        test::varchar    -- finds the item of the list that correspond to a rule \n        as test, \n        geoshape::varchar    -- finds the item of the list that correspond to a rule \n        as geoshape, \n        soil_water_cons_methods::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        biological_proportion::varchar    -- finds the item of the list that correspond to a rule \n        as biological_proportion, \n        soil_water_cons_proportion::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons_proportion, \n        gully_methods::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods, \n        gully_proportion::varchar    -- finds the item of the list that correspond to a rule \n        as gully_proportion\n-- appropriate from statement\n    from onadata.\"gc6_land_restoration_survey_oct-dec21\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n631214::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region,\n        NULL::varchar \n        as province, \n        commune::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        date_assessment::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        calculate_area::varchar    -- finds the item of the list that correspond to a rule \n        as gps_shape_area,\n        NULL::varchar \n        as biological_methods, \n        test::varchar    -- finds the item of the list that correspond to a rule \n        as test, \n        geoshape::varchar    -- finds the item of the list that correspond to a rule \n        as geoshape,\n        NULL::varchar \n        as soil_water_cons,\n        NULL::varchar \n        as biological_proportion,\n        NULL::varchar \n        as soil_water_cons_proportion,\n        NULL::varchar \n        as gully_methods,\n        NULL::varchar \n        as gully_proportion\n-- appropriate from statement\n    from onadata.\"gc8_perimeter_land_use_survey_oct-dec21\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n634119::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region,\n        NULL::varchar \n        as province, \n        commune::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        date_assessment::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        calculate_area::varchar    -- finds the item of the list that correspond to a rule \n        as gps_shape_area,\n        NULL::varchar \n        as biological_methods, \n        test::varchar    -- finds the item of the list that correspond to a rule \n        as test, \n        geoshape::varchar    -- finds the item of the list that correspond to a rule \n        as geoshape,\n        NULL::varchar \n        as soil_water_cons,\n        NULL::varchar \n        as biological_proportion,\n        NULL::varchar \n        as soil_water_cons_proportion,\n        NULL::varchar \n        as gully_methods,\n        NULL::varchar \n        as gully_proportion\n-- appropriate from statement\n    from onadata.\"mc1_perimeter_land_use_survey_oct-dec21\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n636142::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region,\n        NULL::varchar \n        as province, \n        commune::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        date_assessment::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        calculate_area::varchar    -- finds the item of the list that correspond to a rule \n        as gps_shape_area, \n        biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods, \n        test::varchar    -- finds the item of the list that correspond to a rule \n        as test, \n        geoshape::varchar    -- finds the item of the list that correspond to a rule \n        as geoshape, \n        soil_water_cons_methods::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        biological_proportion::varchar    -- finds the item of the list that correspond to a rule \n        as biological_proportion, \n        soil_water_cons_proportion::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons_proportion, \n        gully_methods::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods, \n        gully_proportion::varchar    -- finds the item of the list that correspond to a rule \n        as gully_proportion\n-- appropriate from statement\n    from onadata.\"mb9_land_restoration_survey_oct-dec21_meds\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n647207::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region, \n        province::varchar    -- finds the item of the list that correspond to a rule \n        as province, \n        commune::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        date_assessment::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        calculate_area::varchar    -- finds the item of the list that correspond to a rule \n        as gps_shape_area, \n        biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods, \n        test::varchar    -- finds the item of the list that correspond to a rule \n        as test, \n        geoshape::varchar    -- finds the item of the list that correspond to a rule \n        as geoshape, \n        soil_water_cons_methods::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        biological_proportion::varchar    -- finds the item of the list that correspond to a rule \n        as biological_proportion, \n        soil_water_cons_proportion::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons_proportion, \n        gully_methods::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods, \n        gully_proportion::varchar    -- finds the item of the list that correspond to a rule \n        as gully_proportion\n-- appropriate from statement\n    from onadata.\"bc3_land_restoration_survey_jan-mar22\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n662617::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region,\n        NULL::varchar \n        as province, \n        commune::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        date_assessment::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        calculate_area::varchar    -- finds the item of the list that correspond to a rule \n        as gps_shape_area, \n        biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods, \n        test::varchar    -- finds the item of the list that correspond to a rule \n        as test, \n        geoshape::varchar    -- finds the item of the list that correspond to a rule \n        as geoshape, \n        soil_water_cons_methods::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        biological_proportion::varchar    -- finds the item of the list that correspond to a rule \n        as biological_proportion, \n        soil_water_cons_proportion::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons_proportion, \n        gully_methods::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods, \n        gully_proportion::varchar    -- finds the item of the list that correspond to a rule \n        as gully_proportion\n-- appropriate from statement\n    from onadata.\"bb6_land_restoration_survey_apr-jun22\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n670712::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region,\n        NULL::varchar \n        as province, \n        commune::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        date_assessment::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        calculate_area::varchar    -- finds the item of the list that correspond to a rule \n        as gps_shape_area,\n        NULL::varchar \n        as biological_methods, \n        test::varchar    -- finds the item of the list that correspond to a rule \n        as test, \n        geoshape::varchar    -- finds the item of the list that correspond to a rule \n        as geoshape,\n        NULL::varchar \n        as soil_water_cons,\n        NULL::varchar \n        as biological_proportion,\n        NULL::varchar \n        as soil_water_cons_proportion,\n        NULL::varchar \n        as gully_methods,\n        NULL::varchar \n        as gully_proportion\n-- appropriate from statement\n    from onadata.\"gc9_perimeter_land_use_survey_may2022\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n670758::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region,\n        NULL::varchar \n        as province, \n        commune::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        date_assessment::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        calculate_area::varchar    -- finds the item of the list that correspond to a rule \n        as gps_shape_area,\n        NULL::varchar \n        as biological_methods, \n        test::varchar    -- finds the item of the list that correspond to a rule \n        as test, \n        geoshape::varchar    -- finds the item of the list that correspond to a rule \n        as geoshape,\n        NULL::varchar \n        as soil_water_cons,\n        NULL::varchar \n        as biological_proportion,\n        NULL::varchar \n        as soil_water_cons_proportion,\n        NULL::varchar \n        as gully_methods,\n        NULL::varchar \n        as gully_proportion\n-- appropriate from statement\n    from onadata.\"mc1_perimeter_land_use_survey_senegal_may2022\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n673709::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region, \n        cercle::varchar    -- finds the item of the list that correspond to a rule \n        as province, \n        commune::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        date_assessment::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        calculate_area::varchar    -- finds the item of the list that correspond to a rule \n        as gps_shape_area,\n        NULL::varchar \n        as biological_methods, \n        test::varchar    -- finds the item of the list that correspond to a rule \n        as test, \n        geoshape::varchar    -- finds the item of the list that correspond to a rule \n        as geoshape,\n        NULL::varchar \n        as soil_water_cons,\n        NULL::varchar \n        as biological_proportion,\n        NULL::varchar \n        as soil_water_cons_proportion,\n        NULL::varchar \n        as gully_methods,\n        NULL::varchar \n        as gully_proportion\n-- appropriate from statement\n    from onadata.\"mc2_perimeter_land_use_june2022\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n694812::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region,\n        NULL::varchar \n        as province, \n        district::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        date_assessment::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        calculate_area::varchar    -- finds the item of the list that correspond to a rule \n        as gps_shape_area, \n        biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods, \n        test::varchar    -- finds the item of the list that correspond to a rule \n        as test, \n        geoshape::varchar    -- finds the item of the list that correspond to a rule \n        as geoshape, \n        soil_water_cons_methods::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        biological_proportion::varchar    -- finds the item of the list that correspond to a rule \n        as biological_proportion, \n        soil_water_cons_proportion::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons_proportion, \n        gully_methods::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods, \n        gully_proportion::varchar    -- finds the item of the list that correspond to a rule \n        as gully_proportion\n-- appropriate from statement\n    from onadata.\"gc9_land_restoration_survey_2022\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n696091::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region,\n        NULL::varchar \n        as province, \n        district::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        date_assessment::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        calculate_area::varchar    -- finds the item of the list that correspond to a rule \n        as gps_shape_area, \n        biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods, \n        test::varchar    -- finds the item of the list that correspond to a rule \n        as test, \n        geoshape::varchar    -- finds the item of the list that correspond to a rule \n        as geoshape, \n        soil_water_cons_methods::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        biological_proportion::varchar    -- finds the item of the list that correspond to a rule \n        as biological_proportion, \n        soil_water_cons_proportion::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons_proportion, \n        gully_methods::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods, \n        gully_proportion::varchar    -- finds the item of the list that correspond to a rule \n        as gully_proportion\n-- appropriate from statement\n    from onadata.\"gc6_land_restoration_survey_2022\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n696098::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region, \n        province::varchar    -- finds the item of the list that correspond to a rule \n        as province, \n        district::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        date_assessment::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        calculate_area::varchar    -- finds the item of the list that correspond to a rule \n        as gps_shape_area, \n        biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods, \n        test::varchar    -- finds the item of the list that correspond to a rule \n        as test, \n        geoshape::varchar    -- finds the item of the list that correspond to a rule \n        as geoshape, \n        soil_water_cons_methods::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        biological_proportion::varchar    -- finds the item of the list that correspond to a rule \n        as biological_proportion, \n        soil_water_cons_proportion::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons_proportion, \n        gully_methods::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods, \n        gully_proportion::varchar    -- finds the item of the list that correspond to a rule \n        as gully_proportion\n-- appropriate from statement\n    from onadata.\"mc0_land_restoration_survey_2022\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n696106::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region, \n        province::varchar    -- finds the item of the list that correspond to a rule \n        as province, \n        district::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        date_assessment::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        calculate_area::varchar    -- finds the item of the list that correspond to a rule \n        as gps_shape_area, \n        biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods, \n        test::varchar    -- finds the item of the list that correspond to a rule \n        as test, \n        geoshape::varchar    -- finds the item of the list that correspond to a rule \n        as geoshape, \n        soil_water_cons_methods::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        biological_proportion::varchar    -- finds the item of the list that correspond to a rule \n        as biological_proportion, \n        soil_water_cons_proportion::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons_proportion, \n        gully_methods::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods, \n        gully_proportion::varchar    -- finds the item of the list that correspond to a rule \n        as gully_proportion\n-- appropriate from statement\n    from onadata.\"mc2_land_restoration_survey_2022\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n696156::varchar as form_id, \n     \n    _id::bigint as submission_id,\n    \n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        \"group_survey/group_b__information_01/region\"::varchar    -- finds the item of the list that correspond to a rule \n        as region, \n        \"group_survey/group_b__formation_02/province\"::varchar    -- finds the item of the list that correspond to a rule \n        as province, \n        \"group_survey/group_b__formation_02/district\"::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        \"group_survey/date_assessment\"::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        \"group_survey/group_g__olygon/calculate_area\"::varchar    -- finds the item of the list that correspond to a rule \n        as gps_shape_area, \n        \"group_survey/group_n__al/biological_methods\"::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods, \n        test::varchar    -- finds the item of the list that correspond to a rule \n        as test, \n        \"group_survey/group_gps/geoshape\"::varchar    -- finds the item of the list that correspond to a rule \n        as geoshape, \n        \"group_survey/group_n__il_water_cons_methods\"::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        \"group_survey/group_n__biological_proportion\"::varchar    -- finds the item of the list that correspond to a rule \n        as biological_proportion, \n        \"group_survey/group_n__water_cons_proportion\"::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons_proportion, \n        \"group_survey/group_n__p_gully/gully_methods\"::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods, \n        \"group_survey/group_n__ully/gully_proportion\"::varchar    -- finds the item of the list that correspond to a rule \n        as gully_proportion\n-- appropriate from statement\n    from airbyte.\"sbm_bc3_land_restoration_survey_2022\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n696611::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region,\n        NULL::varchar \n        as province, \n        district::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        date_assessment::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        calculate_area::varchar    -- finds the item of the list that correspond to a rule \n        as gps_shape_area,\n        NULL::varchar \n        as biological_methods, \n        test::varchar    -- finds the item of the list that correspond to a rule \n        as test, \n        geoshape::varchar    -- finds the item of the list that correspond to a rule \n        as geoshape,\n        NULL::varchar \n        as soil_water_cons,\n        NULL::varchar \n        as biological_proportion,\n        NULL::varchar \n        as soil_water_cons_proportion,\n        NULL::varchar \n        as gully_methods,\n        NULL::varchar \n        as gully_proportion\n-- appropriate from statement\n    from onadata.\"gc6_perimeter_land_use_survey_2022\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n697375::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region,\n        NULL::varchar \n        as province, \n        district::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        date_assessment::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        calculate_area::varchar    -- finds the item of the list that correspond to a rule \n        as gps_shape_area,\n        NULL::varchar \n        as biological_methods, \n        test::varchar    -- finds the item of the list that correspond to a rule \n        as test, \n        geoshape::varchar    -- finds the item of the list that correspond to a rule \n        as geoshape,\n        NULL::varchar \n        as soil_water_cons,\n        NULL::varchar \n        as biological_proportion,\n        NULL::varchar \n        as soil_water_cons_proportion,\n        NULL::varchar \n        as gully_methods,\n        NULL::varchar \n        as gully_proportion\n-- appropriate from statement\n    from onadata.\"gd0_perimeter_land_use_survey_2022\"\n\n\n\n\n)\nselect \ns.form_name,\ns.type,\ns.timing,\ns.country,\ns.project_code,\ns.type_2,\ncq.*\nfrom \"tree_aid\".\"dbt_bokidi\".\"stg_survey_master\" s \nleft join core_questions cq on s.form_id::int = cq.form_id::int   \nwhere s.type = 'Land survey'\n\n\n)\nselect \n        ls.form_name,\n        ls.country,\n        ls.project_code,\n        ls.form_id,\n        ls.submission_id,\n        initcap(replace(ls.region,'_',' ')) as region,\n        initcap(replace(ls.province,'_',' ')) as province,\n        initcap(replace(ls.commune,'_',' ')) as commune,\n        ls.date_assessment,\n        extract('Year' from ls.date_assessment::date) as assessment_year,\n        date_trunc('year',ls.date_assessment::date) as assessment_year_date,\n        ls.gps_shape_area as gps_shape_area_m2,\n        gps_shape_area::FLOAT / 10000 as gps_shape_area_ha,\n        ls.test,\n        ls.geoshape,\n        initcap(replace((replace(regexp_replace(ls.biological_methods,'[^a-zA-Z,,_]','','g'),'_',' ')),'Biological','')) as biological_methods,\n        initcap(replace(regexp_replace(ls.soil_water_cons,'[^a-zA-Z,,_]','','g'),'_',' ')) as soil_water_cons,\n        initcap(replace(regexp_replace(ls.gully_methods,'[^a-zA-Z,,_]','','g'),'_',' ')) as gully_methods,\n        ls.type_2,\n        'Yes' as beneficiary_control,\n        case -- add a test field to get test indicators BAO\n            when ((ls.test is null ) or (ls.test not in ('y', 'Y','yes','Yes')) ) then false\n            else true\n        end as test_check\n    from land_survey ls\n    where ls.form_id is not null -- filters forms that don't have survey definitions yet\n    --and ((ls.test is null ) or (ls.test not in ('y', 'Y','yes','Yes')) ) -- BAO add a test field to get test indicators\n    union all\n    select form_name, country, project_code, form_id, legacy_id::int, region, province, commune, date_assessment, assessment_year::int,to_timestamp(assessment_year_date,'YYYY-MM-DD HH:MI:SS'), gps_shape_area_m2, gps_shape_area_ha::int, test, geoshape, biological_methods, soil_water_cons, gully_methods, type_2, beneficiary_control,\n    case -- add a test field to get test indicators BAO\n        when ((test is null ) or (test not in ('y', 'Y','yes','Yes')) ) then false\n        else true\n    end as test_check\n    from \"tree_aid\".\"airbyte\".\"land_area_legacy\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.tree_aid.rhomis_nrm_land_techniques": {"database": "tree_aid", "schema": "dbt_bokidi", "name": "rhomis_nrm_land_techniques", "resource_type": "model", "package_name": "tree_aid", "path": "marts/rhomis_nrm_land_techniques.sql", "original_file_path": "models/marts/rhomis_nrm_land_techniques.sql", "unique_id": "model.tree_aid.rhomis_nrm_land_techniques", "fqn": ["tree_aid", "marts", "rhomis_nrm_land_techniques"], "alias": "rhomis_nrm_land_techniques", "checksum": {"name": "sha256", "checksum": "1ee380e3c7c1cac08babafe30d35bdcaf6265e2e772ea7c96094a0058b5ff2f0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "intermediate": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/tree_aid/models/marts/rhomis_nrm_land_techniques.sql", "deferred": false, "unrendered_config": {"intermediate": null, "materialized": "table"}, "created_at": 1698074991.2982762, "relation_name": "\"tree_aid\".\"dbt_bokidi\".\"rhomis_nrm_land_techniques\"", "raw_code": "select *\nfrom {{ref('rhomis_nrm_techniques')}}", "language": "sql", "refs": [{"name": "rhomis_nrm_techniques", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.tree_aid.rhomis_nrm_techniques"]}, "compiled_path": "target/compiled/tree_aid/models/marts/rhomis_nrm_land_techniques.sql", "compiled": true, "compiled_code": "select *\nfrom \"tree_aid\".\"dbt_bokidi\".\"rhomis_nrm_techniques\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.tree_aid.rhomis_nrm_techniques": {"database": "tree_aid", "schema": "dbt_bokidi", "name": "rhomis_nrm_techniques", "resource_type": "model", "package_name": "tree_aid", "path": "intermediate/rhomis_nrm_techniques.sql", "original_file_path": "models/intermediate/rhomis_nrm_techniques.sql", "unique_id": "model.tree_aid.rhomis_nrm_techniques", "fqn": ["tree_aid", "intermediate", "rhomis_nrm_techniques"], "alias": "rhomis_nrm_techniques", "checksum": {"name": "sha256", "checksum": "f32a103dea17a8b014239826e4cad46a98c283c4f70590cf75385d267d44376a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "intermediate": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/tree_aid/models/intermediate/rhomis_nrm_techniques.sql", "deferred": false, "unrendered_config": {"intermediate": null, "materialized": "view"}, "created_at": 1698074991.3043416, "relation_name": "\"tree_aid\".\"dbt_bokidi\".\"rhomis_nrm_techniques\"", "raw_code": "with nrm as \r\n (\r\nselect \r\nform_name,\r\ncountry,\r\nproject_code,\r\nform_id,\r\nsubmission_id,\r\ninitcap(replace(region,'_',' ')) as region,\r\ninitcap(replace(province,'_',' ')) as province,\r\ninitcap(replace(commune,'_',' ')) as commune,\r\ndate_assessment,\r\ninitcap(replace(replace(replace(replace(biological_methods,'[',''),']',''),'\"',''),',','')) as biological_methods,\r\ninitcap(replace(replace(replace(replace(soil_water_cons,'[',''),']',''),'\"',''),',','')) as soil_water_cons,\r\ninitcap(replace(replace(replace(replace(gully_methods,'[',''),']',''),'\"',''),',','')) as gully_methods \r\nfrom {{ref('stg_rhomis_data')}}\r\nwhere form_id is not null -- filters forms that don't have survey definitions yet\r\nand ((test is null ) or (test not in ('y', 'Y','yes','Yes')) )\r\n ),\r\n biological as\r\n (\r\n    select \r\n    submission_id,\r\n    'Biological methods' as category,\r\n    unnest(string_to_array(biological_methods,' ')) as technique\r\n    from nrm\r\n ),\r\n soil_water as \r\n (\r\n    select \r\n    submission_id,\r\n    'Soil and water conservation' as category,\r\n    unnest(string_to_array(soil_water_cons,' ')) as technique\r\n    from nrm\r\n ),\r\n gully as \r\n (\r\n  select \r\n    submission_id,\r\n    'Gully control' as category,\r\n    unnest(string_to_array(gully_methods,' ')) as technique\r\n    from nrm  \r\n ),\r\n land_mngt as \r\n (\r\nselect * from biological\r\nunion all\r\nselect * from soil_water\r\nunion all \r\nselect * from gully\r\n ),\r\ntotal_agg as (\r\nselect \r\nform_id,\r\nproject_code,\r\ncount(distinct concat(form_id, nrm.submission_id, category)) filter (where category = 'Biological methods') as bio_total,\r\ncount(distinct concat(form_id, nrm.submission_id, category)) filter (where category = 'Soil and water conservation') as swc_total,\r\ncount(distinct concat(form_id, nrm.submission_id, category)) filter (where category = 'Gully control') as gully_total\r\nfrom nrm\r\nleft join land_mngt lm on lm.submission_id=nrm.submission_id\r\ngroup by 1,2\r\n )\r\n\r\nselect \r\nform_name,\r\nnrm.form_id,\r\nnrm.submission_id,\r\nnrm.project_code,\r\ncountry,\r\nregion,\r\nprovince,\r\ncommune,\r\ndate_assessment,\r\ncategory,\r\ncase \r\n when category = 'Biological methods' then bio_total\r\n when category = 'Soil and water conservation' then swc_total\r\n when category = 'Gully control' then gully_total\r\n else null end as total_submissions,\r\nreplace(technique,'_',' ') as technique\r\nfrom nrm\r\nleft join land_mngt lm on lm.submission_id=nrm.submission_id\r\nleft join total_agg tg on tg.form_id=nrm.form_id and tg.project_code = nrm.project_code\r\nwhere nrm.project_code = 'MB6'", "language": "sql", "refs": [{"name": "stg_rhomis_data", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.tree_aid.stg_rhomis_data"]}, "compiled_path": "target/compiled/tree_aid/models/intermediate/rhomis_nrm_techniques.sql", "compiled": true, "compiled_code": "with nrm as \n (\nselect \nform_name,\ncountry,\nproject_code,\nform_id,\nsubmission_id,\ninitcap(replace(region,'_',' ')) as region,\ninitcap(replace(province,'_',' ')) as province,\ninitcap(replace(commune,'_',' ')) as commune,\ndate_assessment,\ninitcap(replace(replace(replace(replace(biological_methods,'[',''),']',''),'\"',''),',','')) as biological_methods,\ninitcap(replace(replace(replace(replace(soil_water_cons,'[',''),']',''),'\"',''),',','')) as soil_water_cons,\ninitcap(replace(replace(replace(replace(gully_methods,'[',''),']',''),'\"',''),',','')) as gully_methods \nfrom \"tree_aid\".\"dbt_bokidi\".\"stg_rhomis_data\"\nwhere form_id is not null -- filters forms that don't have survey definitions yet\nand ((test is null ) or (test not in ('y', 'Y','yes','Yes')) )\n ),\n biological as\n (\n    select \n    submission_id,\n    'Biological methods' as category,\n    unnest(string_to_array(biological_methods,' ')) as technique\n    from nrm\n ),\n soil_water as \n (\n    select \n    submission_id,\n    'Soil and water conservation' as category,\n    unnest(string_to_array(soil_water_cons,' ')) as technique\n    from nrm\n ),\n gully as \n (\n  select \n    submission_id,\n    'Gully control' as category,\n    unnest(string_to_array(gully_methods,' ')) as technique\n    from nrm  \n ),\n land_mngt as \n (\nselect * from biological\nunion all\nselect * from soil_water\nunion all \nselect * from gully\n ),\ntotal_agg as (\nselect \nform_id,\nproject_code,\ncount(distinct concat(form_id, nrm.submission_id, category)) filter (where category = 'Biological methods') as bio_total,\ncount(distinct concat(form_id, nrm.submission_id, category)) filter (where category = 'Soil and water conservation') as swc_total,\ncount(distinct concat(form_id, nrm.submission_id, category)) filter (where category = 'Gully control') as gully_total\nfrom nrm\nleft join land_mngt lm on lm.submission_id=nrm.submission_id\ngroup by 1,2\n )\n\nselect \nform_name,\nnrm.form_id,\nnrm.submission_id,\nnrm.project_code,\ncountry,\nregion,\nprovince,\ncommune,\ndate_assessment,\ncategory,\ncase \n when category = 'Biological methods' then bio_total\n when category = 'Soil and water conservation' then swc_total\n when category = 'Gully control' then gully_total\n else null end as total_submissions,\nreplace(technique,'_',' ') as technique\nfrom nrm\nleft join land_mngt lm on lm.submission_id=nrm.submission_id\nleft join total_agg tg on tg.form_id=nrm.form_id and tg.project_code = nrm.project_code\nwhere nrm.project_code = 'MB6'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.tree_aid.rhomis_survey_aggregations": {"database": "tree_aid", "schema": "dbt_bokidi", "name": "rhomis_survey_aggregations", "resource_type": "model", "package_name": "tree_aid", "path": "marts/rhomis_survey_aggregations.sql", "original_file_path": "models/marts/rhomis_survey_aggregations.sql", "unique_id": "model.tree_aid.rhomis_survey_aggregations", "fqn": ["tree_aid", "marts", "rhomis_survey_aggregations"], "alias": "rhomis_survey_aggregations", "checksum": {"name": "sha256", "checksum": "37d48d1a736c47cb13314287bccf57139f3a653eb70c668726a94b93c7034fad"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "intermediate": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/tree_aid/models/marts/rhomis_survey_aggregations.sql", "deferred": false, "unrendered_config": {"intermediate": null, "materialized": "table"}, "created_at": 1698074991.3102934, "relation_name": "\"tree_aid\".\"dbt_bokidi\".\"rhomis_survey_aggregations\"", "raw_code": "with year_details as (\n    select\n    project_code,\n    start_date,\n    end_date,\n    generate_series(right(start_date, 4)::int,right(end_date, 4)::int,1)::varchar as years\n    from {{source('airbyte', 'projects')}}\n\n),\nproject_years as (\n    select\n    project_code,\n    start_date,\n    end_date,\n    string_agg(years::varchar, ', ') as overall_years\n    from year_details\n    group by 1, 2, 3\n),\ninitial_agg as (\n    select\n        r.country,\n        r.project_code,\n        -- beneficiary_control,\n        timing,\n        min(right(p.start_date, 4)) as start_year,\n        max(right(p.end_date, 4)) as end_year,\n        p.overall_years as year,\n        avg(coalesce(total_income_with_ntfp_per_year,0)) as mean_total_income_with_ntfp_per_year,\n        percentile_cont(0.5) within group (order by coalesce(total_income_with_ntfp_per_year,0)) as median_total_income_with_ntfp_per_year,\n        avg(coalesce(ntfp_income_per_year,0)) as mean_ntfp_income_per_year,\n        percentile_cont(0.5) within group (order by coalesce(ntfp_income_per_year,0)) as median_ntfp_income_per_year,\n        avg(coalesce(crop_income_per_year,0)) as mean_crop_income_per_year,\n        percentile_cont(0.5) within group (order by coalesce(crop_income_per_year,0)) as median_crop_income_per_year,\n        avg(coalesce(livestock_income_per_year,0)) as mean_livestock_income_per_year,\n        percentile_cont(0.5) within group (order by coalesce(livestock_income_per_year,0)) as median_livestock_income_per_year,\n        avg(coalesce(off_farm_income_per_year,0)) as mean_off_farm_income_per_year,\n        percentile_cont(0.5) within group (order by coalesce(off_farm_income_per_year,0)) as median_off_farm_income_per_year,\n        ((count(distinct submission_id) filter (where extreme_poverty = 'true'))::FLOAT / nullif(count(distinct submission_id)::float,0))*100 as below_poverty_line,\n        ((count(distinct submission_id) filter (where extreme_poverty_TVA_incl = 'true'))::FLOAT / nullif(count(distinct submission_id)::float,0))*100 as below_poverty_line_tva,\n        ((count(distinct submission_id) filter (where below_calline = 'true'))::FLOAT / nullif(count(distinct submission_id)::float,0))*100 as below_calorie_line,\n        ((count(distinct submission_id) filter (where below_calline_potential = 'true'))::FLOAT / nullif(count(distinct submission_id)::float,0))*100 as below_calorie_line_potential,\n        avg(proportion_ntfp_in_diet*100) as proportion_ntfp_in_diet,\n        avg(proportion_ntfp_in_diet_potential*100) as proportion_ntfp_in_diet_potential,\n        ((count(distinct submission_id) filter (where uses_nrm_techniques='true'))::FLOAT / nullif(count(distinct submission_id)::float,0))*100 as proportion_uses_nrm_techniques,\n        ((count(distinct submission_id) filter (where uses_bio_techniques='true'))::FLOAT / nullif(count(distinct submission_id)::float,0))*100 as proportion_uses_bio_techniques,\n        ((count(distinct submission_id) filter (where uses_swc_techniques='true'))::FLOAT / nullif(count(distinct submission_id)::float,0))*100 as proportion_uses_swc_techniques,\n        ((count(distinct submission_id) filter (where uses_gully_techniques='true'))::FLOAT / nullif(count(distinct submission_id)::float,0))*100 as proportion_uses_gully_techniques\n    from {{ ref('rhomis_surveys') }} r\n    left join project_years p on p.project_code = r.project_code\n    where test_check = 'False'\n    group by 1,2,3,6\n\n), indicator_nesting as (\n    select\n        country,\n        project_code,\n        -- beneficiary_control,\n        timing,\n        start_year,\n        end_year,\n        year,\n        case \n            when end_year::int < 2017 then 'Pre 2017'\n            when start_year::int >= 2017 and end_year::int <= 2022  then '2017 - 2022'\n            when (start_year::int > 2017 and start_year::int < 2022) and end_year::int > 2022 then '2017 - 2022, 2022 - 2027'\n            when start_year::int >= 2022 and (end_year::int between 2022 and 2027) then '2022 - 2027'\n            else null\n        end as strategic_period,\n        unnest(array[\n            'mean_total_income',\n            'median_total_income',\n            'mean_ntfp_income',\n            'median_ntfp_income',\n            'mean_crop_income',\n            'median_crop_income',\n            'mean_livestock_income',\n            'median_livestock_income',\n            'mean_off_farm_income',\n            'median_off_farm_income',\n            'below_poverty_line',\n            'below_poverty_line_tva',\n            'below_calorie_line',\n            'below_calorie_line_potential',\n            'proportion_ntfp_in_diet',\n            'proportion_ntfp_in_diet_potential',\n            'proportion_uses_nrm_techniques',\n            'proportion_uses_bio_techniques',\n            'proportion_uses_swc_techniques',\n            'proportion_uses_gully_techniques']) AS rhomis_indicator,\n        unnest(array[\n            mean_total_income_with_ntfp_per_year,\n            median_total_income_with_ntfp_per_year,\n            mean_ntfp_income_per_year,\n            median_ntfp_income_per_year,\n            mean_crop_income_per_year,\n            median_crop_income_per_year,\n            mean_livestock_income_per_year,\n            median_livestock_income_per_year,\n            mean_off_farm_income_per_year,\n            median_off_farm_income_per_year,\n            below_poverty_line,\n            below_poverty_line_tva,\n            below_calorie_line, \n            below_calorie_line_potential,\n            proportion_ntfp_in_diet, \n            proportion_ntfp_in_diet_potential,\n            proportion_uses_nrm_techniques,\n            proportion_uses_bio_techniques,\n            proportion_uses_swc_techniques,\n            proportion_uses_gully_techniques]) AS indicator_value\n    from initial_agg\n), baseline as(\n    select\n        country,\n        project_code,\n        -- beneficiary_control,\n        start_year,\n        end_year,\n        year,\n        strategic_period,\n        rhomis_indicator,\n        indicator_value as baseline_results\n    from indicator_nesting\n    where timing = 'Baseline'\n), midline as(\n    select\n        country,\n        project_code,\n        -- beneficiary_control,\n        rhomis_indicator,\n        indicator_value as midline_results\n    from indicator_nesting\n    where timing = 'Midline'\n), endline as(\n    select\n        country,\n        project_code,\n        -- beneficiary_control,\n        rhomis_indicator,\n        indicator_value as endline_results\n    from indicator_nesting\n    where timing = 'Endline'\n)\n\nselect \n    b.country,\n    b.project_code,\n    -- b.beneficiary_control,\n    b.start_year,\n    b.end_year,\n    b.year,\n    b.strategic_period,\n    b.rhomis_indicator,\n    baseline_results,\n    midline_results,\n    endline_results\nfrom baseline b\nleft join midline m on m.project_code = b.project_code and m.rhomis_indicator = b.rhomis_indicator\nleft join endline e on e.project_code = b.project_code and e.rhomis_indicator = b.rhomis_indicator", "language": "sql", "refs": [{"name": "rhomis_surveys", "package": null, "version": null}], "sources": [["airbyte", "projects"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.tree_aid.airbyte.projects", "model.tree_aid.rhomis_surveys"]}, "compiled_path": "target/compiled/tree_aid/models/marts/rhomis_survey_aggregations.sql", "compiled": true, "compiled_code": "with year_details as (\n    select\n    project_code,\n    start_date,\n    end_date,\n    generate_series(right(start_date, 4)::int,right(end_date, 4)::int,1)::varchar as years\n    from \"tree_aid\".\"airbyte\".\"projects\"\n\n),\nproject_years as (\n    select\n    project_code,\n    start_date,\n    end_date,\n    string_agg(years::varchar, ', ') as overall_years\n    from year_details\n    group by 1, 2, 3\n),\ninitial_agg as (\n    select\n        r.country,\n        r.project_code,\n        -- beneficiary_control,\n        timing,\n        min(right(p.start_date, 4)) as start_year,\n        max(right(p.end_date, 4)) as end_year,\n        p.overall_years as year,\n        avg(coalesce(total_income_with_ntfp_per_year,0)) as mean_total_income_with_ntfp_per_year,\n        percentile_cont(0.5) within group (order by coalesce(total_income_with_ntfp_per_year,0)) as median_total_income_with_ntfp_per_year,\n        avg(coalesce(ntfp_income_per_year,0)) as mean_ntfp_income_per_year,\n        percentile_cont(0.5) within group (order by coalesce(ntfp_income_per_year,0)) as median_ntfp_income_per_year,\n        avg(coalesce(crop_income_per_year,0)) as mean_crop_income_per_year,\n        percentile_cont(0.5) within group (order by coalesce(crop_income_per_year,0)) as median_crop_income_per_year,\n        avg(coalesce(livestock_income_per_year,0)) as mean_livestock_income_per_year,\n        percentile_cont(0.5) within group (order by coalesce(livestock_income_per_year,0)) as median_livestock_income_per_year,\n        avg(coalesce(off_farm_income_per_year,0)) as mean_off_farm_income_per_year,\n        percentile_cont(0.5) within group (order by coalesce(off_farm_income_per_year,0)) as median_off_farm_income_per_year,\n        ((count(distinct submission_id) filter (where extreme_poverty = 'true'))::FLOAT / nullif(count(distinct submission_id)::float,0))*100 as below_poverty_line,\n        ((count(distinct submission_id) filter (where extreme_poverty_TVA_incl = 'true'))::FLOAT / nullif(count(distinct submission_id)::float,0))*100 as below_poverty_line_tva,\n        ((count(distinct submission_id) filter (where below_calline = 'true'))::FLOAT / nullif(count(distinct submission_id)::float,0))*100 as below_calorie_line,\n        ((count(distinct submission_id) filter (where below_calline_potential = 'true'))::FLOAT / nullif(count(distinct submission_id)::float,0))*100 as below_calorie_line_potential,\n        avg(proportion_ntfp_in_diet*100) as proportion_ntfp_in_diet,\n        avg(proportion_ntfp_in_diet_potential*100) as proportion_ntfp_in_diet_potential,\n        ((count(distinct submission_id) filter (where uses_nrm_techniques='true'))::FLOAT / nullif(count(distinct submission_id)::float,0))*100 as proportion_uses_nrm_techniques,\n        ((count(distinct submission_id) filter (where uses_bio_techniques='true'))::FLOAT / nullif(count(distinct submission_id)::float,0))*100 as proportion_uses_bio_techniques,\n        ((count(distinct submission_id) filter (where uses_swc_techniques='true'))::FLOAT / nullif(count(distinct submission_id)::float,0))*100 as proportion_uses_swc_techniques,\n        ((count(distinct submission_id) filter (where uses_gully_techniques='true'))::FLOAT / nullif(count(distinct submission_id)::float,0))*100 as proportion_uses_gully_techniques\n    from \"tree_aid\".\"dbt_bokidi\".\"rhomis_surveys\" r\n    left join project_years p on p.project_code = r.project_code\n    where test_check = 'False'\n    group by 1,2,3,6\n\n), indicator_nesting as (\n    select\n        country,\n        project_code,\n        -- beneficiary_control,\n        timing,\n        start_year,\n        end_year,\n        year,\n        case \n            when end_year::int < 2017 then 'Pre 2017'\n            when start_year::int >= 2017 and end_year::int <= 2022  then '2017 - 2022'\n            when (start_year::int > 2017 and start_year::int < 2022) and end_year::int > 2022 then '2017 - 2022, 2022 - 2027'\n            when start_year::int >= 2022 and (end_year::int between 2022 and 2027) then '2022 - 2027'\n            else null\n        end as strategic_period,\n        unnest(array[\n            'mean_total_income',\n            'median_total_income',\n            'mean_ntfp_income',\n            'median_ntfp_income',\n            'mean_crop_income',\n            'median_crop_income',\n            'mean_livestock_income',\n            'median_livestock_income',\n            'mean_off_farm_income',\n            'median_off_farm_income',\n            'below_poverty_line',\n            'below_poverty_line_tva',\n            'below_calorie_line',\n            'below_calorie_line_potential',\n            'proportion_ntfp_in_diet',\n            'proportion_ntfp_in_diet_potential',\n            'proportion_uses_nrm_techniques',\n            'proportion_uses_bio_techniques',\n            'proportion_uses_swc_techniques',\n            'proportion_uses_gully_techniques']) AS rhomis_indicator,\n        unnest(array[\n            mean_total_income_with_ntfp_per_year,\n            median_total_income_with_ntfp_per_year,\n            mean_ntfp_income_per_year,\n            median_ntfp_income_per_year,\n            mean_crop_income_per_year,\n            median_crop_income_per_year,\n            mean_livestock_income_per_year,\n            median_livestock_income_per_year,\n            mean_off_farm_income_per_year,\n            median_off_farm_income_per_year,\n            below_poverty_line,\n            below_poverty_line_tva,\n            below_calorie_line, \n            below_calorie_line_potential,\n            proportion_ntfp_in_diet, \n            proportion_ntfp_in_diet_potential,\n            proportion_uses_nrm_techniques,\n            proportion_uses_bio_techniques,\n            proportion_uses_swc_techniques,\n            proportion_uses_gully_techniques]) AS indicator_value\n    from initial_agg\n), baseline as(\n    select\n        country,\n        project_code,\n        -- beneficiary_control,\n        start_year,\n        end_year,\n        year,\n        strategic_period,\n        rhomis_indicator,\n        indicator_value as baseline_results\n    from indicator_nesting\n    where timing = 'Baseline'\n), midline as(\n    select\n        country,\n        project_code,\n        -- beneficiary_control,\n        rhomis_indicator,\n        indicator_value as midline_results\n    from indicator_nesting\n    where timing = 'Midline'\n), endline as(\n    select\n        country,\n        project_code,\n        -- beneficiary_control,\n        rhomis_indicator,\n        indicator_value as endline_results\n    from indicator_nesting\n    where timing = 'Endline'\n)\n\nselect \n    b.country,\n    b.project_code,\n    -- b.beneficiary_control,\n    b.start_year,\n    b.end_year,\n    b.year,\n    b.strategic_period,\n    b.rhomis_indicator,\n    baseline_results,\n    midline_results,\n    endline_results\nfrom baseline b\nleft join midline m on m.project_code = b.project_code and m.rhomis_indicator = b.rhomis_indicator\nleft join endline e on e.project_code = b.project_code and e.rhomis_indicator = b.rhomis_indicator", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.tree_aid.stg_rhomis_data": {"database": "tree_aid", "schema": "dbt_bokidi", "name": "stg_rhomis_data", "resource_type": "model", "package_name": "tree_aid", "path": "staging/stg_rhomis_data.sql", "original_file_path": "models/staging/stg_rhomis_data.sql", "unique_id": "model.tree_aid.stg_rhomis_data", "fqn": ["tree_aid", "staging", "stg_rhomis_data"], "alias": "stg_rhomis_data", "checksum": {"name": "sha256", "checksum": "093819f48e0b3cbed65e097db85ea67546c7309a0ff9d6f1d8c59db36b0f9aab"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "intermediate": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/tree_aid/models/staging/stg_rhomis_data.sql", "deferred": false, "unrendered_config": {"intermediate": null, "materialized": "view"}, "created_at": 1698074991.3326852, "relation_name": "\"tree_aid\".\"dbt_bokidi\".\"stg_rhomis_data\"", "raw_code": "-- what we're trying to do: \r\n-- 1. find using `survey_type_table('Rhomis')` the data that is not already present in  extended.rhomis_surveys \r\n-- 2. insert into extended.rhomis_survey the missing rows (if any)\r\n-- 3. create view stg_rhomis_data as equivalent to extended.rhomis_survey\r\n\r\nwith rhomis_data as \r\n(\r\n{{survey_type_table('Rhomis')}} \r\n)\r\nselect \r\nrow_number() over (partition by form_name order by submission_id) as row_id, \r\ndate_trunc('quarter',date_assessment::date) as assessment_quarter_date,\r\n* \r\nfrom rhomis_data", "language": "sql", "refs": [{"name": "stg_core_questions_master", "package": null, "version": null}, {"name": "stg_core_questions_union", "package": null, "version": null}, {"name": "stg_survey_master", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.tree_aid.survey_type_table"], "nodes": ["model.tree_aid.stg_core_questions_master", "model.tree_aid.stg_core_questions_union", "model.tree_aid.stg_survey_master"]}, "compiled_path": "target/compiled/tree_aid/models/staging/stg_rhomis_data.sql", "compiled": true, "compiled_code": "-- what we're trying to do: \n-- 1. find using `survey_type_table('Rhomis')` the data that is not already present in  extended.rhomis_surveys \n-- 2. insert into extended.rhomis_survey the missing rows (if any)\n-- 3. create view stg_rhomis_data as equivalent to extended.rhomis_survey\n\nwith rhomis_data as \n(\n \n\nwith core_questions as \n(\n\n\n\n--find all the expected core fields for that form type    \n\n\n--For all forms for a selected survey type\n\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n220721::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    \n    _index::int as submission_index,\n    \n-- loop through all the core fields, select the field with the appropriate name if present\n\n        NULL::varchar \n        as region, \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as province, \n        subregion::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        starttime_auto::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods,\n        NULL::varchar \n        as population_needs_met,\n        NULL::varchar \n        as voice_hh_food,\n        NULL::varchar \n        as voice_hh_spending,\n        NULL::varchar \n        as voice_hh_crops,\n        NULL::varchar \n        as voice_hh_confidence,\n        NULL::varchar \n        as voice_comm_speaking,\n        NULL::varchar \n        as voice_comm_meetings,\n        NULL::varchar \n        as voice_comm_activities,\n        NULL::varchar \n        as seeing,\n        NULL::varchar \n        as seeing_others,\n        NULL::varchar \n        as hearing,\n        NULL::varchar \n        as hearing_others,\n        NULL::varchar \n        as walking,\n        NULL::varchar \n        as walking_others,\n        NULL::varchar \n        as memory,\n        NULL::varchar \n        as memory_others,\n        NULL::varchar \n        as self_care,\n        NULL::varchar \n        as self_care_others,\n        NULL::varchar \n        as language,\n        NULL::varchar \n        as language_others,\n        NULL::varchar \n        as test,\n        NULL::varchar \n        as access_equality,\n        NULL::varchar \n        as management_member,\n        NULL::varchar \n        as access_permission,\n        NULL::varchar \n        as village_engagement, \n        soil_water_cons::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        gully_control::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods,\n        NULL::varchar \n        as choice_hh_income_women,\n        NULL::varchar \n        as control_hh_farm_land,\n        NULL::varchar \n        as control_hh_comm_land,\n        NULL::varchar \n        as control_hh_assets,\n        NULL::varchar \n        as control_hh_livestock,\n        NULL::varchar \n        as control_hh_trees,\n        NULL::varchar \n        as control_hh_savings,\n        NULL::varchar \n        as control_comm_resources,\n        NULL::varchar \n        as choice_comm_market,\n        NULL::varchar \n        as choice_comm_committee,\n        NULL::varchar \n        as control_comm_leadership,\n        NULL::varchar \n        as control_comm_by_laws,\n        NULL::varchar \n        as forest_management_tools_yn,\n        NULL::varchar \n        as protection_actions_yn,\n        NULL::varchar \n        as village_protection, \n        respondentsex::varchar    -- finds the item of the list that correspond to a rule \n        as respondentsex,\n        NULL::varchar \n        as choice_hh_training,\n        NULL::varchar \n        as choice_hh_decisions,\n        NULL::varchar \n        as respondent_ntfp,\n        NULL::varchar \n        as beneficiary_control, \n        quality_rapport::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport, \n        quality_reliability::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability,\n        NULL::varchar \n        as quality_rapport_resp2,\n        NULL::varchar \n        as quality_reliability_resp2\n-- appropriate from statement\n    from onadata.\"ethiopia_meki_2\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n229423::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    \n    _index::int as submission_index,\n    \n-- loop through all the core fields, select the field with the appropriate name if present\n\n        NULL::varchar \n        as region, \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as province, \n        subregion::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        starttime_auto::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods,\n        NULL::varchar \n        as population_needs_met,\n        NULL::varchar \n        as voice_hh_food,\n        NULL::varchar \n        as voice_hh_spending,\n        NULL::varchar \n        as voice_hh_crops,\n        NULL::varchar \n        as voice_hh_confidence,\n        NULL::varchar \n        as voice_comm_speaking,\n        NULL::varchar \n        as voice_comm_meetings,\n        NULL::varchar \n        as voice_comm_activities,\n        NULL::varchar \n        as seeing,\n        NULL::varchar \n        as seeing_others,\n        NULL::varchar \n        as hearing,\n        NULL::varchar \n        as hearing_others,\n        NULL::varchar \n        as walking,\n        NULL::varchar \n        as walking_others,\n        NULL::varchar \n        as memory,\n        NULL::varchar \n        as memory_others,\n        NULL::varchar \n        as self_care,\n        NULL::varchar \n        as self_care_others,\n        NULL::varchar \n        as language,\n        NULL::varchar \n        as language_others,\n        NULL::varchar \n        as test,\n        NULL::varchar \n        as access_equality,\n        NULL::varchar \n        as management_member,\n        NULL::varchar \n        as access_permission,\n        NULL::varchar \n        as village_engagement, \n        soil_water_cons::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        gully_control::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods,\n        NULL::varchar \n        as choice_hh_income_women,\n        NULL::varchar \n        as control_hh_farm_land,\n        NULL::varchar \n        as control_hh_comm_land,\n        NULL::varchar \n        as control_hh_assets,\n        NULL::varchar \n        as control_hh_livestock,\n        NULL::varchar \n        as control_hh_trees,\n        NULL::varchar \n        as control_hh_savings,\n        NULL::varchar \n        as control_comm_resources,\n        NULL::varchar \n        as choice_comm_market,\n        NULL::varchar \n        as choice_comm_committee,\n        NULL::varchar \n        as control_comm_leadership,\n        NULL::varchar \n        as control_comm_by_laws,\n        NULL::varchar \n        as forest_management_tools_yn,\n        NULL::varchar \n        as protection_actions_yn,\n        NULL::varchar \n        as village_protection, \n        respondentsex::varchar    -- finds the item of the list that correspond to a rule \n        as respondentsex,\n        NULL::varchar \n        as choice_hh_training,\n        NULL::varchar \n        as choice_hh_decisions,\n        NULL::varchar \n        as respondent_ntfp,\n        NULL::varchar \n        as beneficiary_control, \n        quality_rapport::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport, \n        quality_reliability::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability,\n        NULL::varchar \n        as quality_rapport_resp2,\n        NULL::varchar \n        as quality_reliability_resp2\n-- appropriate from statement\n    from onadata.\"ethiopia_meki_2_extra\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n255992::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    \n    _index::int as submission_index,\n    \n-- loop through all the core fields, select the field with the appropriate name if present\n\n        NULL::varchar \n        as region,\n        NULL::varchar \n        as province, \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        starttime_auto::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods,\n        NULL::varchar \n        as population_needs_met,\n        NULL::varchar \n        as voice_hh_food,\n        NULL::varchar \n        as voice_hh_spending,\n        NULL::varchar \n        as voice_hh_crops,\n        NULL::varchar \n        as voice_hh_confidence,\n        NULL::varchar \n        as voice_comm_speaking,\n        NULL::varchar \n        as voice_comm_meetings,\n        NULL::varchar \n        as voice_comm_activities,\n        NULL::varchar \n        as seeing,\n        NULL::varchar \n        as seeing_others,\n        NULL::varchar \n        as hearing,\n        NULL::varchar \n        as hearing_others,\n        NULL::varchar \n        as walking,\n        NULL::varchar \n        as walking_others,\n        NULL::varchar \n        as memory,\n        NULL::varchar \n        as memory_others,\n        NULL::varchar \n        as self_care,\n        NULL::varchar \n        as self_care_others,\n        NULL::varchar \n        as language,\n        NULL::varchar \n        as language_others,\n        NULL::varchar \n        as test,\n        NULL::varchar \n        as access_equality,\n        NULL::varchar \n        as management_member,\n        NULL::varchar \n        as access_permission,\n        NULL::varchar \n        as village_engagement, \n        soil_water_cons::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        gully_control::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods,\n        NULL::varchar \n        as choice_hh_income_women,\n        NULL::varchar \n        as control_hh_farm_land,\n        NULL::varchar \n        as control_hh_comm_land,\n        NULL::varchar \n        as control_hh_assets,\n        NULL::varchar \n        as control_hh_livestock,\n        NULL::varchar \n        as control_hh_trees,\n        NULL::varchar \n        as control_hh_savings,\n        NULL::varchar \n        as control_comm_resources,\n        NULL::varchar \n        as choice_comm_market,\n        NULL::varchar \n        as choice_comm_committee,\n        NULL::varchar \n        as control_comm_leadership,\n        NULL::varchar \n        as control_comm_by_laws,\n        NULL::varchar \n        as forest_management_tools_yn,\n        NULL::varchar \n        as protection_actions_yn,\n        NULL::varchar \n        as village_protection, \n        respondentsex::varchar    -- finds the item of the list that correspond to a rule \n        as respondentsex,\n        NULL::varchar \n        as choice_hh_training,\n        NULL::varchar \n        as choice_hh_decisions,\n        NULL::varchar \n        as respondent_ntfp, \n        beneficiary::varchar    -- finds the item of the list that correspond to a rule \n        as beneficiary_control, \n        quality_rapport::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport, \n        quality_reliability::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability,\n        NULL::varchar \n        as quality_rapport_resp2,\n        NULL::varchar \n        as quality_reliability_resp2\n-- appropriate from statement\n    from onadata.\"mb2_baseline\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n270181::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    \n    _index::int as submission_index,\n    \n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region, \n        province::varchar    -- finds the item of the list that correspond to a rule \n        as province, \n        commune::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        starttime_auto::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods,\n        NULL::varchar \n        as population_needs_met,\n        NULL::varchar \n        as voice_hh_food,\n        NULL::varchar \n        as voice_hh_spending,\n        NULL::varchar \n        as voice_hh_crops,\n        NULL::varchar \n        as voice_hh_confidence,\n        NULL::varchar \n        as voice_comm_speaking,\n        NULL::varchar \n        as voice_comm_meetings,\n        NULL::varchar \n        as voice_comm_activities,\n        NULL::varchar \n        as seeing,\n        NULL::varchar \n        as seeing_others,\n        NULL::varchar \n        as hearing,\n        NULL::varchar \n        as hearing_others,\n        NULL::varchar \n        as walking,\n        NULL::varchar \n        as walking_others,\n        NULL::varchar \n        as memory,\n        NULL::varchar \n        as memory_others,\n        NULL::varchar \n        as self_care,\n        NULL::varchar \n        as self_care_others,\n        NULL::varchar \n        as language,\n        NULL::varchar \n        as language_others,\n        NULL::varchar \n        as test,\n        NULL::varchar \n        as access_equality,\n        NULL::varchar \n        as management_member,\n        NULL::varchar \n        as access_permission,\n        NULL::varchar \n        as village_engagement, \n        soil_water_cons::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        gully_control::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods,\n        NULL::varchar \n        as choice_hh_income_women,\n        NULL::varchar \n        as control_hh_farm_land,\n        NULL::varchar \n        as control_hh_comm_land,\n        NULL::varchar \n        as control_hh_assets,\n        NULL::varchar \n        as control_hh_livestock,\n        NULL::varchar \n        as control_hh_trees,\n        NULL::varchar \n        as control_hh_savings,\n        NULL::varchar \n        as control_comm_resources,\n        NULL::varchar \n        as choice_comm_market,\n        NULL::varchar \n        as choice_comm_committee,\n        NULL::varchar \n        as control_comm_leadership,\n        NULL::varchar \n        as control_comm_by_laws,\n        NULL::varchar \n        as forest_management_tools_yn,\n        NULL::varchar \n        as protection_actions_yn,\n        NULL::varchar \n        as village_protection, \n        respondentsex::varchar    -- finds the item of the list that correspond to a rule \n        as respondentsex,\n        NULL::varchar \n        as choice_hh_training,\n        NULL::varchar \n        as choice_hh_decisions,\n        NULL::varchar \n        as respondent_ntfp,\n        NULL::varchar \n        as beneficiary_control, \n        quality_rapport::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport, \n        quality_reliability::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability,\n        NULL::varchar \n        as quality_rapport_resp2,\n        NULL::varchar \n        as quality_reliability_resp2\n-- appropriate from statement\n    from onadata.\"burkina_ta_baseline_v1_3_webform\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n292240::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    \n    _index::int as submission_index,\n    \n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region,\n        NULL::varchar \n        as province, \n        community::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        starttime_auto::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods,\n        NULL::varchar \n        as population_needs_met,\n        NULL::varchar \n        as voice_hh_food,\n        NULL::varchar \n        as voice_hh_spending,\n        NULL::varchar \n        as voice_hh_crops,\n        NULL::varchar \n        as voice_hh_confidence,\n        NULL::varchar \n        as voice_comm_speaking,\n        NULL::varchar \n        as voice_comm_meetings,\n        NULL::varchar \n        as voice_comm_activities, \n        seeing::varchar    -- finds the item of the list that correspond to a rule \n        as seeing, \n        seeing_others::varchar    -- finds the item of the list that correspond to a rule \n        as seeing_others, \n        hearing::varchar    -- finds the item of the list that correspond to a rule \n        as hearing, \n        hearing_others::varchar    -- finds the item of the list that correspond to a rule \n        as hearing_others, \n        walking::varchar    -- finds the item of the list that correspond to a rule \n        as walking, \n        walking_others::varchar    -- finds the item of the list that correspond to a rule \n        as walking_others, \n        memory::varchar    -- finds the item of the list that correspond to a rule \n        as memory, \n        memory_others::varchar    -- finds the item of the list that correspond to a rule \n        as memory_others, \n        self_care::varchar    -- finds the item of the list that correspond to a rule \n        as self_care, \n        self_care_others::varchar    -- finds the item of the list that correspond to a rule \n        as self_care_others, \n        language::varchar    -- finds the item of the list that correspond to a rule \n        as language, \n        language_others::varchar    -- finds the item of the list that correspond to a rule \n        as language_others,\n        NULL::varchar \n        as test,\n        NULL::varchar \n        as access_equality,\n        NULL::varchar \n        as management_member,\n        NULL::varchar \n        as access_permission,\n        NULL::varchar \n        as village_engagement, \n        soil_water_cons::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        gully_control::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods,\n        NULL::varchar \n        as choice_hh_income_women,\n        NULL::varchar \n        as control_hh_farm_land,\n        NULL::varchar \n        as control_hh_comm_land,\n        NULL::varchar \n        as control_hh_assets,\n        NULL::varchar \n        as control_hh_livestock,\n        NULL::varchar \n        as control_hh_trees,\n        NULL::varchar \n        as control_hh_savings,\n        NULL::varchar \n        as control_comm_resources,\n        NULL::varchar \n        as choice_comm_market,\n        NULL::varchar \n        as choice_comm_committee,\n        NULL::varchar \n        as control_comm_leadership,\n        NULL::varchar \n        as control_comm_by_laws,\n        NULL::varchar \n        as forest_management_tools_yn,\n        NULL::varchar \n        as protection_actions_yn,\n        NULL::varchar \n        as village_protection, \n        respondentsex::varchar    -- finds the item of the list that correspond to a rule \n        as respondentsex,\n        NULL::varchar \n        as choice_hh_training,\n        NULL::varchar \n        as choice_hh_decisions,\n        NULL::varchar \n        as respondent_ntfp,\n        NULL::varchar \n        as beneficiary_control, \n        quality_rapport::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport, \n        quality_reliability::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability,\n        NULL::varchar \n        as quality_rapport_resp2,\n        NULL::varchar \n        as quality_reliability_resp2\n-- appropriate from statement\n    from onadata.\"gb1_ta_baseline_v1_3_3\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n298153::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region, \n        province::varchar    -- finds the item of the list that correspond to a rule \n        as province, \n        commune::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        starttime_auto::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods,\n        NULL::varchar \n        as population_needs_met,\n        NULL::varchar \n        as voice_hh_food,\n        NULL::varchar \n        as voice_hh_spending,\n        NULL::varchar \n        as voice_hh_crops,\n        NULL::varchar \n        as voice_hh_confidence,\n        NULL::varchar \n        as voice_comm_speaking,\n        NULL::varchar \n        as voice_comm_meetings,\n        NULL::varchar \n        as voice_comm_activities, \n        seeing::varchar    -- finds the item of the list that correspond to a rule \n        as seeing, \n        seeing_others::varchar    -- finds the item of the list that correspond to a rule \n        as seeing_others, \n        hearing::varchar    -- finds the item of the list that correspond to a rule \n        as hearing, \n        hearing_others::varchar    -- finds the item of the list that correspond to a rule \n        as hearing_others, \n        walking::varchar    -- finds the item of the list that correspond to a rule \n        as walking, \n        walking_others::varchar    -- finds the item of the list that correspond to a rule \n        as walking_others, \n        memory::varchar    -- finds the item of the list that correspond to a rule \n        as memory, \n        memory_others::varchar    -- finds the item of the list that correspond to a rule \n        as memory_others, \n        self_care::varchar    -- finds the item of the list that correspond to a rule \n        as self_care, \n        self_care_others::varchar    -- finds the item of the list that correspond to a rule \n        as self_care_others, \n        language::varchar    -- finds the item of the list that correspond to a rule \n        as language, \n        language_others::varchar    -- finds the item of the list that correspond to a rule \n        as language_others,\n        NULL::varchar \n        as test,\n        NULL::varchar \n        as access_equality,\n        NULL::varchar \n        as management_member,\n        NULL::varchar \n        as access_permission,\n        NULL::varchar \n        as village_engagement, \n        soil_water_cons::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        gully_control::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods,\n        NULL::varchar \n        as choice_hh_income_women,\n        NULL::varchar \n        as control_hh_farm_land,\n        NULL::varchar \n        as control_hh_comm_land,\n        NULL::varchar \n        as control_hh_assets,\n        NULL::varchar \n        as control_hh_livestock,\n        NULL::varchar \n        as control_hh_trees,\n        NULL::varchar \n        as control_hh_savings,\n        NULL::varchar \n        as control_comm_resources,\n        NULL::varchar \n        as choice_comm_market,\n        NULL::varchar \n        as choice_comm_committee,\n        NULL::varchar \n        as control_comm_leadership,\n        NULL::varchar \n        as control_comm_by_laws,\n        NULL::varchar \n        as forest_management_tools_yn,\n        NULL::varchar \n        as protection_actions_yn,\n        NULL::varchar \n        as village_protection, \n        respondentsex::varchar    -- finds the item of the list that correspond to a rule \n        as respondentsex,\n        NULL::varchar \n        as choice_hh_training,\n        NULL::varchar \n        as choice_hh_decisions,\n        NULL::varchar \n        as respondent_ntfp,\n        NULL::varchar \n        as beneficiary_control, \n        quality_rapport::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport, \n        quality_reliability::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability,\n        NULL::varchar \n        as quality_rapport_resp2,\n        NULL::varchar \n        as quality_reliability_resp2\n-- appropriate from statement\n    from onadata.\"burkina_ta_bb1_v1_3_1_tablet\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n305636::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    \n    _index::int as submission_index,\n    \n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region,\n        NULL::varchar \n        as province, \n        subregion::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        starttime_auto::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods,\n        NULL::varchar \n        as population_needs_met,\n        NULL::varchar \n        as voice_hh_food,\n        NULL::varchar \n        as voice_hh_spending,\n        NULL::varchar \n        as voice_hh_crops,\n        NULL::varchar \n        as voice_hh_confidence,\n        NULL::varchar \n        as voice_comm_speaking,\n        NULL::varchar \n        as voice_comm_meetings,\n        NULL::varchar \n        as voice_comm_activities, \n        seeing::varchar    -- finds the item of the list that correspond to a rule \n        as seeing, \n        seeing_others::varchar    -- finds the item of the list that correspond to a rule \n        as seeing_others, \n        hearing::varchar    -- finds the item of the list that correspond to a rule \n        as hearing, \n        hearing_others::varchar    -- finds the item of the list that correspond to a rule \n        as hearing_others, \n        walking::varchar    -- finds the item of the list that correspond to a rule \n        as walking, \n        walking_others::varchar    -- finds the item of the list that correspond to a rule \n        as walking_others, \n        memory::varchar    -- finds the item of the list that correspond to a rule \n        as memory, \n        memory_others::varchar    -- finds the item of the list that correspond to a rule \n        as memory_others, \n        self_care::varchar    -- finds the item of the list that correspond to a rule \n        as self_care, \n        self_care_others::varchar    -- finds the item of the list that correspond to a rule \n        as self_care_others, \n        language::varchar    -- finds the item of the list that correspond to a rule \n        as language, \n        language_others::varchar    -- finds the item of the list that correspond to a rule \n        as language_others,\n        NULL::varchar \n        as test,\n        NULL::varchar \n        as access_equality,\n        NULL::varchar \n        as management_member,\n        NULL::varchar \n        as access_permission,\n        NULL::varchar \n        as village_engagement, \n        soil_water_cons::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        gully_control::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods,\n        NULL::varchar \n        as choice_hh_income_women,\n        NULL::varchar \n        as control_hh_farm_land,\n        NULL::varchar \n        as control_hh_comm_land,\n        NULL::varchar \n        as control_hh_assets,\n        NULL::varchar \n        as control_hh_livestock,\n        NULL::varchar \n        as control_hh_trees,\n        NULL::varchar \n        as control_hh_savings,\n        NULL::varchar \n        as control_comm_resources,\n        NULL::varchar \n        as choice_comm_market,\n        NULL::varchar \n        as choice_comm_committee,\n        NULL::varchar \n        as control_comm_leadership,\n        NULL::varchar \n        as control_comm_by_laws,\n        NULL::varchar \n        as forest_management_tools_yn,\n        NULL::varchar \n        as protection_actions_yn,\n        NULL::varchar \n        as village_protection, \n        respondentsex::varchar    -- finds the item of the list that correspond to a rule \n        as respondentsex,\n        NULL::varchar \n        as choice_hh_training,\n        NULL::varchar \n        as choice_hh_decisions,\n        NULL::varchar \n        as respondent_ntfp, \n        beneficiary::varchar    -- finds the item of the list that correspond to a rule \n        as beneficiary_control, \n        quality_rapport::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport, \n        quality_reliability::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability,\n        NULL::varchar \n        as quality_rapport_resp2,\n        NULL::varchar \n        as quality_reliability_resp2\n-- appropriate from statement\n    from onadata.\"ethiopia_ea3_eb5_1_3_4\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n369679::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    \n    _index::int as submission_index,\n    \n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region, \n        sublocation::varchar    -- finds the item of the list that correspond to a rule \n        as province,\n        NULL::varchar \n        as commune, \n        starttime_auto::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods, \n        population_needs_met::varchar    -- finds the item of the list that correspond to a rule \n        as population_needs_met, \n        voice_hh_food::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_food, \n        voice_hh_spending::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_spending, \n        voice_hh_crops::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_crops, \n        voice_hh_confidence::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_confidence, \n        voice_comm_speaking::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_speaking, \n        voice_comm_meetings::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_meetings, \n        voice_comm_activities::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_activities, \n        seeing::varchar    -- finds the item of the list that correspond to a rule \n        as seeing, \n        seeing_others::varchar    -- finds the item of the list that correspond to a rule \n        as seeing_others, \n        hearing::varchar    -- finds the item of the list that correspond to a rule \n        as hearing, \n        hearing_others::varchar    -- finds the item of the list that correspond to a rule \n        as hearing_others, \n        walking::varchar    -- finds the item of the list that correspond to a rule \n        as walking, \n        walking_others::varchar    -- finds the item of the list that correspond to a rule \n        as walking_others, \n        memory::varchar    -- finds the item of the list that correspond to a rule \n        as memory, \n        memory_others::varchar    -- finds the item of the list that correspond to a rule \n        as memory_others, \n        self_care::varchar    -- finds the item of the list that correspond to a rule \n        as self_care, \n        self_care_others::varchar    -- finds the item of the list that correspond to a rule \n        as self_care_others, \n        language::varchar    -- finds the item of the list that correspond to a rule \n        as language, \n        language_others::varchar    -- finds the item of the list that correspond to a rule \n        as language_others,\n        NULL::varchar \n        as test, \n        access_equality::varchar    -- finds the item of the list that correspond to a rule \n        as access_equality, \n        management_member::varchar    -- finds the item of the list that correspond to a rule \n        as management_member, \n        access_permission::varchar    -- finds the item of the list that correspond to a rule \n        as access_permission, \n        village_engagement::varchar    -- finds the item of the list that correspond to a rule \n        as village_engagement, \n        soil_water_cons::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons,\n        NULL::varchar \n        as gully_methods, \n        choice_hh_income_women::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_income_women, \n        control_hh_farm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_farm_land, \n        control_hh_comm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_comm_land, \n        control_hh_assets::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_assets, \n        control_hh_livestock::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_livestock, \n        control_hh_trees::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_trees, \n        control_hh_savings::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_savings, \n        control_comm_resources::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_resources, \n        choice_comm_market::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_market, \n        choice_comm_committee::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_committee, \n        control_comm_leadership::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_leadership, \n        control_comm_by_laws::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_by_laws, \n        forest_management_tools_yn::varchar    -- finds the item of the list that correspond to a rule \n        as forest_management_tools_yn, \n        protection_actions_yn::varchar    -- finds the item of the list that correspond to a rule \n        as protection_actions_yn, \n        village_protection::varchar    -- finds the item of the list that correspond to a rule \n        as village_protection, \n        respondentsex::varchar    -- finds the item of the list that correspond to a rule \n        as respondentsex, \n        choice_hh_training::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_training, \n        choice_hh_decisions::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_decisions, \n        respondent_ntfp::varchar    -- finds the item of the list that correspond to a rule \n        as respondent_ntfp, \n        beneficiary_ta::varchar    -- finds the item of the list that correspond to a rule \n        as beneficiary_control, \n        quality_rapport::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport, \n        quality_reliability::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability, \n        quality_rapport_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport_resp2, \n        quality_reliability_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability_resp2\n-- appropriate from statement\n    from onadata.\"tree_aid_rhomis_2_0_niger_na4\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n437605::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region, \n        sublocation2::varchar    -- finds the item of the list that correspond to a rule \n        as province, \n        sublocation::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        starttime_auto::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods, \n        population_needs_met::varchar    -- finds the item of the list that correspond to a rule \n        as population_needs_met, \n        voice_hh_food::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_food, \n        voice_hh_spending::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_spending, \n        voice_hh_crops::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_crops, \n        voice_hh_confidence::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_confidence, \n        voice_comm_speaking::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_speaking, \n        voice_comm_meetings::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_meetings, \n        voice_comm_activities::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_activities, \n        seeing::varchar    -- finds the item of the list that correspond to a rule \n        as seeing, \n        seeing_others::varchar    -- finds the item of the list that correspond to a rule \n        as seeing_others, \n        hearing::varchar    -- finds the item of the list that correspond to a rule \n        as hearing, \n        hearing_others::varchar    -- finds the item of the list that correspond to a rule \n        as hearing_others, \n        walking::varchar    -- finds the item of the list that correspond to a rule \n        as walking, \n        walking_others::varchar    -- finds the item of the list that correspond to a rule \n        as walking_others, \n        memory::varchar    -- finds the item of the list that correspond to a rule \n        as memory, \n        memory_others::varchar    -- finds the item of the list that correspond to a rule \n        as memory_others, \n        self_care::varchar    -- finds the item of the list that correspond to a rule \n        as self_care, \n        self_care_others::varchar    -- finds the item of the list that correspond to a rule \n        as self_care_others, \n        language::varchar    -- finds the item of the list that correspond to a rule \n        as language, \n        language_others::varchar    -- finds the item of the list that correspond to a rule \n        as language_others,\n        NULL::varchar \n        as test, \n        access_equality::varchar    -- finds the item of the list that correspond to a rule \n        as access_equality, \n        management_member::varchar    -- finds the item of the list that correspond to a rule \n        as management_member, \n        access_permission::varchar    -- finds the item of the list that correspond to a rule \n        as access_permission, \n        village_engagement::varchar    -- finds the item of the list that correspond to a rule \n        as village_engagement, \n        soil_water_cons::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        gully_control::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods, \n        choice_hh_income_women::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_income_women, \n        control_hh_farm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_farm_land, \n        control_hh_comm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_comm_land, \n        control_hh_assets::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_assets, \n        control_hh_livestock::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_livestock, \n        control_hh_trees::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_trees, \n        control_hh_savings::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_savings, \n        control_comm_resources::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_resources, \n        choice_comm_market::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_market, \n        choice_comm_committee::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_committee, \n        control_comm_leadership::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_leadership, \n        control_comm_by_laws::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_by_laws, \n        forest_management_tools_yn::varchar    -- finds the item of the list that correspond to a rule \n        as forest_management_tools_yn, \n        protection_actions_yn::varchar    -- finds the item of the list that correspond to a rule \n        as protection_actions_yn, \n        village_protection::varchar    -- finds the item of the list that correspond to a rule \n        as village_protection, \n        respondentsex::varchar    -- finds the item of the list that correspond to a rule \n        as respondentsex, \n        choice_hh_training::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_training, \n        choice_hh_decisions::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_decisions, \n        respondent_ntfp::varchar    -- finds the item of the list that correspond to a rule \n        as respondent_ntfp,\n        NULL::varchar \n        as beneficiary_control, \n        Additional_respondents::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport, \n        quality_reliability::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability, \n        quality_rapport_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport_resp2, \n        quality_reliability_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability_resp2\n-- appropriate from statement\n    from onadata.\"eb8_2019\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n457632::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    \n    _index::int as submission_index,\n    \n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region, \n        sublocation::varchar    -- finds the item of the list that correspond to a rule \n        as province,\n        NULL::varchar \n        as commune, \n        starttime_auto::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods,\n        NULL::varchar \n        as population_needs_met, \n        voice_hh_food::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_food, \n        voice_hh_spending::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_spending, \n        voice_hh_crops::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_crops, \n        voice_hh_confidence::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_confidence, \n        voice_comm_speaking::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_speaking, \n        voice_comm_meetings::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_meetings, \n        voice_comm_activities::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_activities, \n        seeing::varchar    -- finds the item of the list that correspond to a rule \n        as seeing, \n        seeing_others::varchar    -- finds the item of the list that correspond to a rule \n        as seeing_others, \n        hearing::varchar    -- finds the item of the list that correspond to a rule \n        as hearing, \n        hearing_others::varchar    -- finds the item of the list that correspond to a rule \n        as hearing_others, \n        walking::varchar    -- finds the item of the list that correspond to a rule \n        as walking, \n        walking_others::varchar    -- finds the item of the list that correspond to a rule \n        as walking_others, \n        memory::varchar    -- finds the item of the list that correspond to a rule \n        as memory, \n        memory_others::varchar    -- finds the item of the list that correspond to a rule \n        as memory_others, \n        self_care::varchar    -- finds the item of the list that correspond to a rule \n        as self_care, \n        self_care_others::varchar    -- finds the item of the list that correspond to a rule \n        as self_care_others, \n        language::varchar    -- finds the item of the list that correspond to a rule \n        as language, \n        language_others::varchar    -- finds the item of the list that correspond to a rule \n        as language_others,\n        NULL::varchar \n        as test,\n        NULL::varchar \n        as access_equality,\n        NULL::varchar \n        as management_member,\n        NULL::varchar \n        as access_permission,\n        NULL::varchar \n        as village_engagement, \n        soil_water_cons::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons,\n        NULL::varchar \n        as gully_methods, \n        choice_hh_income_women::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_income_women, \n        control_hh_farm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_farm_land, \n        control_hh_comm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_comm_land, \n        control_hh_assets::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_assets, \n        control_hh_livestock::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_livestock, \n        control_hh_trees::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_trees, \n        control_hh_savings::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_savings, \n        control_comm_resources::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_resources, \n        choice_comm_market::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_market, \n        choice_comm_committee::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_committee, \n        control_comm_leadership::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_leadership, \n        control_comm_by_laws::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_by_laws,\n        NULL::varchar \n        as forest_management_tools_yn,\n        NULL::varchar \n        as protection_actions_yn,\n        NULL::varchar \n        as village_protection, \n        respondentsex::varchar    -- finds the item of the list that correspond to a rule \n        as respondentsex, \n        choice_hh_training::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_training, \n        choice_hh_decisions::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_decisions, \n        respondent_ntfp::varchar    -- finds the item of the list that correspond to a rule \n        as respondent_ntfp,\n        NULL::varchar \n        as beneficiary_control, \n        quality_rapport::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport, \n        quality_reliability::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability, \n        quality_rapport_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport_resp2, \n        quality_reliability_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability_resp2\n-- appropriate from statement\n    from onadata.\"tree_aid_rhomis_gb8_final\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n463770::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    \n    _index::int as submission_index,\n    \n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region, \n        province::varchar    -- finds the item of the list that correspond to a rule \n        as province, \n        commune::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        starttime_auto::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment,\n        NULL::varchar \n        as biological_methods,\n        NULL::varchar \n        as population_needs_met,\n        NULL::varchar \n        as voice_hh_food,\n        NULL::varchar \n        as voice_hh_spending,\n        NULL::varchar \n        as voice_hh_crops,\n        NULL::varchar \n        as voice_hh_confidence,\n        NULL::varchar \n        as voice_comm_speaking,\n        NULL::varchar \n        as voice_comm_meetings,\n        NULL::varchar \n        as voice_comm_activities,\n        NULL::varchar \n        as seeing,\n        NULL::varchar \n        as seeing_others,\n        NULL::varchar \n        as hearing,\n        NULL::varchar \n        as hearing_others,\n        NULL::varchar \n        as walking,\n        NULL::varchar \n        as walking_others,\n        NULL::varchar \n        as memory,\n        NULL::varchar \n        as memory_others,\n        NULL::varchar \n        as self_care,\n        NULL::varchar \n        as self_care_others,\n        NULL::varchar \n        as language,\n        NULL::varchar \n        as language_others,\n        NULL::varchar \n        as test,\n        NULL::varchar \n        as access_equality,\n        NULL::varchar \n        as management_member,\n        NULL::varchar \n        as access_permission,\n        NULL::varchar \n        as village_engagement,\n        NULL::varchar \n        as soil_water_cons,\n        NULL::varchar \n        as gully_methods,\n        NULL::varchar \n        as choice_hh_income_women,\n        NULL::varchar \n        as control_hh_farm_land,\n        NULL::varchar \n        as control_hh_comm_land,\n        NULL::varchar \n        as control_hh_assets,\n        NULL::varchar \n        as control_hh_livestock,\n        NULL::varchar \n        as control_hh_trees,\n        NULL::varchar \n        as control_hh_savings,\n        NULL::varchar \n        as control_comm_resources,\n        NULL::varchar \n        as choice_comm_market,\n        NULL::varchar \n        as choice_comm_committee,\n        NULL::varchar \n        as control_comm_leadership,\n        NULL::varchar \n        as control_comm_by_laws,\n        NULL::varchar \n        as forest_management_tools_yn,\n        NULL::varchar \n        as protection_actions_yn,\n        NULL::varchar \n        as village_protection, \n        respondentsex::varchar    -- finds the item of the list that correspond to a rule \n        as respondentsex,\n        NULL::varchar \n        as choice_hh_training,\n        NULL::varchar \n        as choice_hh_decisions, \n        respondent_ntfp::varchar    -- finds the item of the list that correspond to a rule \n        as respondent_ntfp,\n        NULL::varchar \n        as beneficiary_control, \n        quality_rapport::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport, \n        quality_reliability::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability,\n        NULL::varchar \n        as quality_rapport_resp2,\n        NULL::varchar \n        as quality_reliability_resp2\n-- appropriate from statement\n    from onadata.\"household_income_mtr_bc1\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n463771::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region, \n        province::varchar    -- finds the item of the list that correspond to a rule \n        as province, \n        commune::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        survey_date::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment,\n        NULL::varchar \n        as biological_methods,\n        NULL::varchar \n        as population_needs_met, \n        voice_hh_food::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_food, \n        voice_hh_spending::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_spending, \n        voice_hh_crops::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_crops, \n        voice_hh_confidence::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_confidence, \n        voice_comm_speaking::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_speaking, \n        voice_comm_meetings::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_meetings, \n        voice_comm_activities::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_activities,\n        NULL::varchar \n        as seeing,\n        NULL::varchar \n        as seeing_others,\n        NULL::varchar \n        as hearing,\n        NULL::varchar \n        as hearing_others,\n        NULL::varchar \n        as walking,\n        NULL::varchar \n        as walking_others,\n        NULL::varchar \n        as memory,\n        NULL::varchar \n        as memory_others,\n        NULL::varchar \n        as self_care,\n        NULL::varchar \n        as self_care_others,\n        NULL::varchar \n        as language,\n        NULL::varchar \n        as language_others,\n        NULL::varchar \n        as test,\n        NULL::varchar \n        as access_equality,\n        NULL::varchar \n        as management_member,\n        NULL::varchar \n        as access_permission,\n        NULL::varchar \n        as village_engagement,\n        NULL::varchar \n        as soil_water_cons,\n        NULL::varchar \n        as gully_methods, \n        choice_hh_income_women::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_income_women, \n        control_hh_farm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_farm_land, \n        control_hh_comm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_comm_land, \n        control_hh_assets::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_assets, \n        control_hh_livestock::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_livestock, \n        control_hh_trees::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_trees, \n        control_hh_savings::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_savings, \n        control_comm_resources::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_resources, \n        choice_comm_market::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_market, \n        choice_comm_committee::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_committee, \n        control_comm_leadership::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_leadership, \n        control_comm_by_laws::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_by_laws,\n        NULL::varchar \n        as forest_management_tools_yn,\n        NULL::varchar \n        as protection_actions_yn,\n        NULL::varchar \n        as village_protection, \n        gender::varchar    -- finds the item of the list that correspond to a rule \n        as respondentsex, \n        choice_hh_training::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_training, \n        choice_hh_decisions::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_decisions,\n        NULL::varchar \n        as respondent_ntfp,\n        NULL::varchar \n        as beneficiary_control,\n        NULL::varchar \n        as quality_rapport,\n        NULL::varchar \n        as quality_reliability,\n        NULL::varchar \n        as quality_rapport_resp2,\n        NULL::varchar \n        as quality_reliability_resp2\n-- appropriate from statement\n    from onadata.\"voice_choice_control_mtr_bc1\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n469567::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    \n    _index::int as submission_index,\n    \n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region, \n        sublocation::varchar    -- finds the item of the list that correspond to a rule \n        as province,\n        NULL::varchar \n        as commune, \n        starttime_auto::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods, \n        population_needs_met::varchar    -- finds the item of the list that correspond to a rule \n        as population_needs_met, \n        voice_hh_food::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_food, \n        voice_hh_spending::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_spending, \n        voice_hh_crops::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_crops, \n        voice_hh_confidence::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_confidence, \n        voice_comm_speaking::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_speaking, \n        voice_comm_meetings::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_meetings, \n        voice_comm_activities::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_activities, \n        seeing::varchar    -- finds the item of the list that correspond to a rule \n        as seeing, \n        seeing_others::varchar    -- finds the item of the list that correspond to a rule \n        as seeing_others, \n        hearing::varchar    -- finds the item of the list that correspond to a rule \n        as hearing, \n        hearing_others::varchar    -- finds the item of the list that correspond to a rule \n        as hearing_others, \n        walking::varchar    -- finds the item of the list that correspond to a rule \n        as walking, \n        walking_others::varchar    -- finds the item of the list that correspond to a rule \n        as walking_others, \n        memory::varchar    -- finds the item of the list that correspond to a rule \n        as memory, \n        memory_others::varchar    -- finds the item of the list that correspond to a rule \n        as memory_others, \n        self_care::varchar    -- finds the item of the list that correspond to a rule \n        as self_care, \n        self_care_others::varchar    -- finds the item of the list that correspond to a rule \n        as self_care_others, \n        language::varchar    -- finds the item of the list that correspond to a rule \n        as language, \n        language_others::varchar    -- finds the item of the list that correspond to a rule \n        as language_others,\n        NULL::varchar \n        as test, \n        access_equality::varchar    -- finds the item of the list that correspond to a rule \n        as access_equality, \n        management_member::varchar    -- finds the item of the list that correspond to a rule \n        as management_member, \n        access_permission::varchar    -- finds the item of the list that correspond to a rule \n        as access_permission, \n        village_engagement::varchar    -- finds the item of the list that correspond to a rule \n        as village_engagement, \n        soil_water_cons::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        gully_control::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods, \n        choice_hh_income_women::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_income_women, \n        control_hh_farm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_farm_land, \n        control_hh_comm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_comm_land, \n        control_hh_assets::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_assets, \n        control_hh_livestock::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_livestock, \n        control_hh_trees::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_trees, \n        control_hh_savings::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_savings, \n        control_comm_resources::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_resources, \n        choice_comm_market::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_market, \n        choice_comm_committee::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_committee, \n        control_comm_leadership::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_leadership, \n        control_comm_by_laws::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_by_laws, \n        forest_management_tools_yn::varchar    -- finds the item of the list that correspond to a rule \n        as forest_management_tools_yn, \n        protection_actions_yn::varchar    -- finds the item of the list that correspond to a rule \n        as protection_actions_yn, \n        village_protection::varchar    -- finds the item of the list that correspond to a rule \n        as village_protection, \n        respondentsex::varchar    -- finds the item of the list that correspond to a rule \n        as respondentsex, \n        choice_hh_training::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_training, \n        choice_hh_decisions::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_decisions, \n        respondent_ntfp::varchar    -- finds the item of the list that correspond to a rule \n        as respondent_ntfp, \n        beneficiary_ta::varchar    -- finds the item of the list that correspond to a rule \n        as beneficiary_control, \n        quality_rapport::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport, \n        quality_reliability::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability, \n        quality_rapport_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport_resp2, \n        quality_reliability_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability_resp2\n-- appropriate from statement\n    from onadata.\"tree_aid_rhomis_na6_finale\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n490181::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region, \n        sublocation::varchar    -- finds the item of the list that correspond to a rule \n        as province,\n        NULL::varchar \n        as commune, \n        starttime_auto::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        nrm_practice_grp_biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods, \n        forest_gov_module_population_needs_met::varchar    -- finds the item of the list that correspond to a rule \n        as population_needs_met, \n        vcc_grp_voice_hh_food::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_food, \n        vcc_grp_voice_hh_spending::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_spending, \n        vcc_grp_voice_hh_crops::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_crops, \n        vcc_grp_voice_hh_confidence::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_confidence, \n        vcc_grp_voice_comm_speaking::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_speaking, \n        vcc_grp_voice_comm_meetings::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_meetings, \n        vcc_grp_voice_comm_activities::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_activities, \n        disability_grp_seeing::varchar    -- finds the item of the list that correspond to a rule \n        as seeing, \n        disability_grp_seeing_others::varchar    -- finds the item of the list that correspond to a rule \n        as seeing_others, \n        disability_grp_hearing::varchar    -- finds the item of the list that correspond to a rule \n        as hearing, \n        disability_grp_hearing_others::varchar    -- finds the item of the list that correspond to a rule \n        as hearing_others, \n        disability_grp_walking::varchar    -- finds the item of the list that correspond to a rule \n        as walking, \n        disability_grp_walking_others::varchar    -- finds the item of the list that correspond to a rule \n        as walking_others, \n        disability_grp_memory::varchar    -- finds the item of the list that correspond to a rule \n        as memory, \n        disability_grp_memory_others::varchar    -- finds the item of the list that correspond to a rule \n        as memory_others, \n        \"disability_grp_self-care\"::varchar    -- finds the item of the list that correspond to a rule \n        as self_care, \n        \"disability_grp_self-care_others\"::varchar    -- finds the item of the list that correspond to a rule \n        as self_care_others, \n        disability_grp_language::varchar    -- finds the item of the list that correspond to a rule \n        as language, \n        disability_grp_language_others::varchar    -- finds the item of the list that correspond to a rule \n        as language_others,\n        NULL::varchar \n        as test, \n        forest_gov_module_access_equality::varchar    -- finds the item of the list that correspond to a rule \n        as access_equality, \n        forest_gov_module_management_member::varchar    -- finds the item of the list that correspond to a rule \n        as management_member, \n        forest_gov_module_access_permission::varchar    -- finds the item of the list that correspond to a rule \n        as access_permission, \n        forest_gov_module_village_engagement::varchar    -- finds the item of the list that correspond to a rule \n        as village_engagement, \n        nrm_practice_grp_soil_water_cons::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        nrm_practice_grp_gully_control::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods, \n        vcc_grp_choice_hh_income_women::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_income_women, \n        vcc_grp_control_hh_farm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_farm_land, \n        vcc_grp_control_hh_comm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_comm_land, \n        vcc_grp_control_hh_assets::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_assets, \n        vcc_grp_control_hh_livestock::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_livestock, \n        vcc_grp_control_hh_trees::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_trees, \n        vcc_grp_control_hh_savings::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_savings, \n        vcc_grp_control_comm_resources::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_resources, \n        vcc_grp_choice_comm_market::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_market, \n        vcc_grp_choice_comm_committee::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_committee, \n        vcc_grp_control_comm_leadership::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_leadership, \n        vcc_grp_control_comm_by_laws::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_by_laws, \n        forest_gov_module_forest_management_tools_yn::varchar    -- finds the item of the list that correspond to a rule \n        as forest_management_tools_yn, \n        forest_gov_module_protection_actions_yn::varchar    -- finds the item of the list that correspond to a rule \n        as protection_actions_yn, \n        forest_gov_module_village_protection::varchar    -- finds the item of the list that correspond to a rule \n        as village_protection, \n        section_household_info_respondentsex::varchar    -- finds the item of the list that correspond to a rule \n        as respondentsex, \n        vcc_grp_choice_hh_training::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_training, \n        vcc_grp_choice_hh_decisions::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_decisions, \n        respondent_ntfp::varchar    -- finds the item of the list that correspond to a rule \n        as respondent_ntfp, \n        beneficiary_control::varchar    -- finds the item of the list that correspond to a rule \n        as beneficiary_control, \n        section_quality_rapport::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport, \n        section_quality_reliability::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability, \n        section_quality_rapport_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport_resp2, \n        section_quality_reliability_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability_resp2\n-- appropriate from statement\n    from onadata.\"tree_aid_rho_mis_mb6_2020\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n500674::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    \n    _index::int as submission_index,\n    \n-- loop through all the core fields, select the field with the appropriate name if present\n\n        NULL::varchar \n        as region,\n        NULL::varchar \n        as province, \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        starttime_auto::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods, \n        population_needs_met::varchar    -- finds the item of the list that correspond to a rule \n        as population_needs_met, \n        voice_hh_food::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_food, \n        voice_hh_spending::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_spending, \n        voice_hh_crops::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_crops, \n        voice_hh_confidence::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_confidence, \n        voice_comm_speaking::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_speaking, \n        voice_comm_meetings::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_meetings, \n        voice_comm_activities::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_activities, \n        seeing::varchar    -- finds the item of the list that correspond to a rule \n        as seeing, \n        seeing_others::varchar    -- finds the item of the list that correspond to a rule \n        as seeing_others, \n        hearing::varchar    -- finds the item of the list that correspond to a rule \n        as hearing, \n        hearing_others::varchar    -- finds the item of the list that correspond to a rule \n        as hearing_others, \n        walking::varchar    -- finds the item of the list that correspond to a rule \n        as walking, \n        walking_others::varchar    -- finds the item of the list that correspond to a rule \n        as walking_others, \n        memory::varchar    -- finds the item of the list that correspond to a rule \n        as memory, \n        memory_others::varchar    -- finds the item of the list that correspond to a rule \n        as memory_others, \n        self_care::varchar    -- finds the item of the list that correspond to a rule \n        as self_care, \n        self_care_others::varchar    -- finds the item of the list that correspond to a rule \n        as self_care_others, \n        language::varchar    -- finds the item of the list that correspond to a rule \n        as language, \n        language_others::varchar    -- finds the item of the list that correspond to a rule \n        as language_others,\n        NULL::varchar \n        as test, \n        access_equality::varchar    -- finds the item of the list that correspond to a rule \n        as access_equality, \n        management_member::varchar    -- finds the item of the list that correspond to a rule \n        as management_member, \n        access_permission::varchar    -- finds the item of the list that correspond to a rule \n        as access_permission, \n        village_engagement::varchar    -- finds the item of the list that correspond to a rule \n        as village_engagement, \n        soil_water_cons::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons,\n        NULL::varchar \n        as gully_methods, \n        choice_hh_income_women::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_income_women, \n        control_hh_farm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_farm_land, \n        control_hh_comm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_comm_land, \n        control_hh_assets::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_assets, \n        control_hh_livestock::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_livestock, \n        control_hh_trees::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_trees, \n        control_hh_savings::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_savings, \n        control_comm_resources::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_resources, \n        choice_comm_market::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_market, \n        choice_comm_committee::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_committee, \n        control_comm_leadership::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_leadership, \n        control_comm_by_laws::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_by_laws, \n        forest_management_tools_yn::varchar    -- finds the item of the list that correspond to a rule \n        as forest_management_tools_yn, \n        protection_actions_yn::varchar    -- finds the item of the list that correspond to a rule \n        as protection_actions_yn, \n        village_protection::varchar    -- finds the item of the list that correspond to a rule \n        as village_protection, \n        respondentsex::varchar    -- finds the item of the list that correspond to a rule \n        as respondentsex, \n        choice_hh_training::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_training, \n        choice_hh_decisions::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_decisions, \n        respondent_ntfp::varchar    -- finds the item of the list that correspond to a rule \n        as respondent_ntfp, \n        beneficiary_yn::varchar    -- finds the item of the list that correspond to a rule \n        as beneficiary_control, \n        quality_rapport::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport, \n        quality_reliability::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability, \n        quality_rapport_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport_resp2, \n        quality_reliability_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability_resp2\n-- appropriate from statement\n    from onadata.\"mb2_rhomis_endline_april2020\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n547803::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region, \n        sublocation::varchar    -- finds the item of the list that correspond to a rule \n        as province, \n        sublocation2::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        starttime_auto::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods,\n        NULL::varchar \n        as population_needs_met, \n        voice_hh_food::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_food, \n        voice_hh_spending::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_spending, \n        voice_hh_crops::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_crops, \n        voice_hh_confidence::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_confidence, \n        voice_comm_speaking::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_speaking, \n        voice_comm_meetings::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_meetings, \n        voice_comm_activities::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_activities,\n        NULL::varchar \n        as seeing,\n        NULL::varchar \n        as seeing_others,\n        NULL::varchar \n        as hearing,\n        NULL::varchar \n        as hearing_others,\n        NULL::varchar \n        as walking,\n        NULL::varchar \n        as walking_others,\n        NULL::varchar \n        as memory,\n        NULL::varchar \n        as memory_others,\n        NULL::varchar \n        as self_care,\n        NULL::varchar \n        as self_care_others,\n        NULL::varchar \n        as language,\n        NULL::varchar \n        as language_others,\n        NULL::varchar \n        as test,\n        NULL::varchar \n        as access_equality,\n        NULL::varchar \n        as management_member,\n        NULL::varchar \n        as access_permission,\n        NULL::varchar \n        as village_engagement, \n        soil_water_cons::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        gully_control::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods, \n        choice_hh_income_women::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_income_women, \n        control_hh_farm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_farm_land, \n        control_hh_comm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_comm_land, \n        control_hh_assets::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_assets, \n        control_hh_livestock::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_livestock, \n        control_hh_trees::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_trees, \n        control_hh_savings::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_savings, \n        control_comm_resources::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_resources, \n        choice_comm_market::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_market, \n        choice_comm_committee::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_committee, \n        control_comm_leadership::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_leadership, \n        control_comm_by_laws::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_by_laws,\n        NULL::varchar \n        as forest_management_tools_yn,\n        NULL::varchar \n        as protection_actions_yn,\n        NULL::varchar \n        as village_protection, \n        respondentsex::varchar    -- finds the item of the list that correspond to a rule \n        as respondentsex, \n        choice_hh_training::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_training, \n        choice_hh_decisions::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_decisions, \n        respondent_ntfp::varchar    -- finds the item of the list that correspond to a rule \n        as respondent_ntfp,\n        NULL::varchar \n        as beneficiary_control, \n        quality_rapport::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport, \n        quality_reliability::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability, \n        quality_rapport_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport_resp2, \n        quality_reliability_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability_resp2\n-- appropriate from statement\n    from onadata.\"ta_rho_mis_bc1_endline_oct2020_final\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n551601::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    \n    _index::int as submission_index,\n    \n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region, \n        sublocation::varchar    -- finds the item of the list that correspond to a rule \n        as province,\n        NULL::varchar \n        as commune, \n        starttime_auto::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods, \n        population_needs_met::varchar    -- finds the item of the list that correspond to a rule \n        as population_needs_met, \n        voice_hh_food::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_food, \n        voice_hh_spending::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_spending, \n        voice_hh_crops::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_crops, \n        voice_hh_confidence::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_confidence, \n        voice_comm_speaking::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_speaking, \n        voice_comm_meetings::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_meetings, \n        voice_comm_activities::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_activities, \n        seeing::varchar    -- finds the item of the list that correspond to a rule \n        as seeing, \n        seeing_others::varchar    -- finds the item of the list that correspond to a rule \n        as seeing_others, \n        hearing::varchar    -- finds the item of the list that correspond to a rule \n        as hearing, \n        hearing_others::varchar    -- finds the item of the list that correspond to a rule \n        as hearing_others, \n        walking::varchar    -- finds the item of the list that correspond to a rule \n        as walking, \n        walking_others::varchar    -- finds the item of the list that correspond to a rule \n        as walking_others, \n        memory::varchar    -- finds the item of the list that correspond to a rule \n        as memory, \n        memory_others::varchar    -- finds the item of the list that correspond to a rule \n        as memory_others, \n        self_care::varchar    -- finds the item of the list that correspond to a rule \n        as self_care, \n        self_care_others::varchar    -- finds the item of the list that correspond to a rule \n        as self_care_others, \n        language::varchar    -- finds the item of the list that correspond to a rule \n        as language, \n        language_others::varchar    -- finds the item of the list that correspond to a rule \n        as language_others,\n        NULL::varchar \n        as test, \n        access_equality::varchar    -- finds the item of the list that correspond to a rule \n        as access_equality, \n        management_member::varchar    -- finds the item of the list that correspond to a rule \n        as management_member, \n        access_permission::varchar    -- finds the item of the list that correspond to a rule \n        as access_permission, \n        village_engagement::varchar    -- finds the item of the list that correspond to a rule \n        as village_engagement, \n        soil_water_cons::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        gully_control::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods, \n        choice_hh_income_women::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_income_women, \n        control_hh_farm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_farm_land, \n        control_hh_comm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_comm_land, \n        control_hh_assets::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_assets, \n        control_hh_livestock::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_livestock, \n        control_hh_trees::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_trees, \n        control_hh_savings::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_savings, \n        control_comm_resources::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_resources, \n        choice_comm_market::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_market, \n        choice_comm_committee::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_committee, \n        control_comm_leadership::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_leadership, \n        control_comm_by_laws::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_by_laws, \n        forest_management_tools_yn::varchar    -- finds the item of the list that correspond to a rule \n        as forest_management_tools_yn, \n        protection_actions_yn::varchar    -- finds the item of the list that correspond to a rule \n        as protection_actions_yn, \n        village_protection::varchar    -- finds the item of the list that correspond to a rule \n        as village_protection, \n        respondentsex::varchar    -- finds the item of the list that correspond to a rule \n        as respondentsex, \n        choice_hh_training::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_training, \n        choice_hh_decisions::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_decisions, \n        respondent_ntfp::varchar    -- finds the item of the list that correspond to a rule \n        as respondent_ntfp, \n        beneficiary_yn::varchar    -- finds the item of the list that correspond to a rule \n        as beneficiary_control, \n        quality_rapport::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport, \n        quality_reliability::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability, \n        quality_rapport_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport_resp2, \n        quality_reliability_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability_resp2\n-- appropriate from statement\n    from onadata.\"ta_rhomis_gc3_oct_2020\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n558686::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    \n    _index::int as submission_index,\n    \n-- loop through all the core fields, select the field with the appropriate name if present\n\n        NULL::varchar \n        as region, \n        sublocation::varchar    -- finds the item of the list that correspond to a rule \n        as province, \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        starttime_auto::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods, \n        population_needs_met::varchar    -- finds the item of the list that correspond to a rule \n        as population_needs_met, \n        voice_hh_food::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_food, \n        voice_hh_spending::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_spending, \n        voice_hh_crops::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_crops, \n        voice_hh_confidence::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_confidence, \n        voice_comm_speaking::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_speaking, \n        voice_comm_meetings::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_meetings, \n        voice_comm_activities::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_activities, \n        seeing::varchar    -- finds the item of the list that correspond to a rule \n        as seeing, \n        seeing_others::varchar    -- finds the item of the list that correspond to a rule \n        as seeing_others, \n        hearing::varchar    -- finds the item of the list that correspond to a rule \n        as hearing, \n        hearing_others::varchar    -- finds the item of the list that correspond to a rule \n        as hearing_others, \n        walking::varchar    -- finds the item of the list that correspond to a rule \n        as walking, \n        walking_others::varchar    -- finds the item of the list that correspond to a rule \n        as walking_others, \n        memory::varchar    -- finds the item of the list that correspond to a rule \n        as memory, \n        memory_others::varchar    -- finds the item of the list that correspond to a rule \n        as memory_others, \n        self_care::varchar    -- finds the item of the list that correspond to a rule \n        as self_care, \n        self_care_others::varchar    -- finds the item of the list that correspond to a rule \n        as self_care_others, \n        language::varchar    -- finds the item of the list that correspond to a rule \n        as language, \n        language_others::varchar    -- finds the item of the list that correspond to a rule \n        as language_others,\n        NULL::varchar \n        as test, \n        access_equality::varchar    -- finds the item of the list that correspond to a rule \n        as access_equality, \n        management_member::varchar    -- finds the item of the list that correspond to a rule \n        as management_member, \n        access_permission::varchar    -- finds the item of the list that correspond to a rule \n        as access_permission, \n        village_engagement::varchar    -- finds the item of the list that correspond to a rule \n        as village_engagement, \n        soil_water_cons::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        gully_control::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods, \n        choice_hh_income_women::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_income_women, \n        control_hh_farm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_farm_land, \n        control_hh_comm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_comm_land, \n        control_hh_assets::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_assets, \n        control_hh_livestock::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_livestock, \n        control_hh_trees::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_trees, \n        control_hh_savings::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_savings, \n        control_comm_resources::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_resources, \n        choice_comm_market::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_market, \n        choice_comm_committee::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_committee, \n        control_comm_leadership::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_leadership, \n        control_comm_by_laws::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_by_laws, \n        forest_management_tools_yn::varchar    -- finds the item of the list that correspond to a rule \n        as forest_management_tools_yn, \n        protection_actions_yn::varchar    -- finds the item of the list that correspond to a rule \n        as protection_actions_yn, \n        village_protection::varchar    -- finds the item of the list that correspond to a rule \n        as village_protection, \n        respondentsex::varchar    -- finds the item of the list that correspond to a rule \n        as respondentsex, \n        choice_hh_training::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_training, \n        choice_hh_decisions::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_decisions, \n        respondent_ntfp::varchar    -- finds the item of the list that correspond to a rule \n        as respondent_ntfp, \n        beneficiary_yn::varchar    -- finds the item of the list that correspond to a rule \n        as beneficiary_control, \n        quality_rapport::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport, \n        quality_reliability::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability, \n        quality_rapport_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport_resp2, \n        quality_reliability_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability_resp2\n-- appropriate from statement\n    from onadata.\"ta_rhomis_eb3eb8_2020\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n564603::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    \n    _index::int as submission_index,\n    \n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region,\n        NULL::varchar \n        as province,\n        NULL::varchar \n        as commune, \n        starttime_auto::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods, \n        population_needs_met::varchar    -- finds the item of the list that correspond to a rule \n        as population_needs_met, \n        voice_hh_food::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_food, \n        voice_hh_spending::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_spending, \n        voice_hh_crops::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_crops, \n        voice_hh_confidence::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_confidence, \n        voice_comm_speaking::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_speaking, \n        voice_comm_meetings::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_meetings, \n        voice_comm_activities::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_activities,\n        NULL::varchar \n        as seeing,\n        NULL::varchar \n        as seeing_others,\n        NULL::varchar \n        as hearing,\n        NULL::varchar \n        as hearing_others,\n        NULL::varchar \n        as walking,\n        NULL::varchar \n        as walking_others,\n        NULL::varchar \n        as memory,\n        NULL::varchar \n        as memory_others,\n        NULL::varchar \n        as self_care,\n        NULL::varchar \n        as self_care_others,\n        NULL::varchar \n        as language,\n        NULL::varchar \n        as language_others,\n        NULL::varchar \n        as test, \n        access_equality::varchar    -- finds the item of the list that correspond to a rule \n        as access_equality, \n        management_member::varchar    -- finds the item of the list that correspond to a rule \n        as management_member, \n        access_permission::varchar    -- finds the item of the list that correspond to a rule \n        as access_permission, \n        village_engagement::varchar    -- finds the item of the list that correspond to a rule \n        as village_engagement, \n        soil_water_cons::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        gully_control::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods, \n        choice_hh_income_women::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_income_women, \n        control_hh_farm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_farm_land, \n        control_hh_comm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_comm_land, \n        control_hh_assets::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_assets, \n        control_hh_livestock::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_livestock, \n        control_hh_trees::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_trees, \n        control_hh_savings::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_savings, \n        control_comm_resources::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_resources, \n        choice_comm_market::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_market, \n        choice_comm_committee::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_committee, \n        control_comm_leadership::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_leadership, \n        control_comm_by_laws::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_by_laws, \n        forest_management_tools_yn::varchar    -- finds the item of the list that correspond to a rule \n        as forest_management_tools_yn, \n        protection_actions_yn::varchar    -- finds the item of the list that correspond to a rule \n        as protection_actions_yn, \n        village_protection::varchar    -- finds the item of the list that correspond to a rule \n        as village_protection, \n        respondentsex::varchar    -- finds the item of the list that correspond to a rule \n        as respondentsex, \n        choice_hh_training::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_training, \n        choice_hh_decisions::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_decisions, \n        respondent_ntfp::varchar    -- finds the item of the list that correspond to a rule \n        as respondent_ntfp, \n        beneficiary_yn::varchar    -- finds the item of the list that correspond to a rule \n        as beneficiary_control, \n        quality_rapport::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport, \n        quality_reliability::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability, \n        quality_rapport_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport_resp2, \n        quality_reliability_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability_resp2\n-- appropriate from statement\n    from onadata.\"ta_rhomis_gb1_2021\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n583956::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region,\n        NULL::varchar \n        as province,\n        NULL::varchar \n        as commune, \n        date_interview::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment,\n        NULL::varchar \n        as biological_methods, \n        population_needs_met::varchar    -- finds the item of the list that correspond to a rule \n        as population_needs_met, \n        voice_hh_food_02::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_food, \n        voice_hh_spending_02::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_spending, \n        voice_hh_crops_02::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_crops, \n        voice_hh_confidence_02::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_confidence, \n        voice_comm_speaking_02::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_speaking, \n        voice_comm_meetings_02::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_meetings, \n        voice_comm_activities_02::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_activities,\n        NULL::varchar \n        as seeing,\n        NULL::varchar \n        as seeing_others,\n        NULL::varchar \n        as hearing,\n        NULL::varchar \n        as hearing_others,\n        NULL::varchar \n        as walking,\n        NULL::varchar \n        as walking_others,\n        NULL::varchar \n        as memory,\n        NULL::varchar \n        as memory_others,\n        NULL::varchar \n        as self_care,\n        NULL::varchar \n        as self_care_others,\n        NULL::varchar \n        as language,\n        NULL::varchar \n        as language_others,\n        NULL::varchar \n        as test, \n        access_equality::varchar    -- finds the item of the list that correspond to a rule \n        as access_equality, \n        management_member::varchar    -- finds the item of the list that correspond to a rule \n        as management_member, \n        access_permission::varchar    -- finds the item of the list that correspond to a rule \n        as access_permission, \n        village_engagement::varchar    -- finds the item of the list that correspond to a rule \n        as village_engagement,\n        NULL::varchar \n        as soil_water_cons,\n        NULL::varchar \n        as gully_methods, \n        choice_hh_income_women_02::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_income_women, \n        control_hh_farm_land_02::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_farm_land, \n        control_hh_comm_land_02::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_comm_land, \n        control_hh_assets_02::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_assets, \n        control_hh_livestock_02::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_livestock, \n        control_hh_trees_02::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_trees, \n        control_hh_savings_02::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_savings, \n        control_comm_resources_02::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_resources, \n        choice_comm_market_02::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_market, \n        choice_comm_committee_02::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_committee, \n        control_comm_leadership_02::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_leadership, \n        control_comm_by_laws_02::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_by_laws, \n        forest_management_tools_yn::varchar    -- finds the item of the list that correspond to a rule \n        as forest_management_tools_yn, \n        protection_actions_yn::varchar    -- finds the item of the list that correspond to a rule \n        as protection_actions_yn, \n        village_protection::varchar    -- finds the item of the list that correspond to a rule \n        as village_protection, \n        respondentsex::varchar    -- finds the item of the list that correspond to a rule \n        as respondentsex, \n        choice_hh_training_02::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_training, \n        choice_hh_decisions_02::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_decisions, \n        respondent_ntfp::varchar    -- finds the item of the list that correspond to a rule \n        as respondent_ntfp, \n        beneficiary_yn::varchar    -- finds the item of the list that correspond to a rule \n        as beneficiary_control, \n        quality_rapport::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport, \n        quality_reliability::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability, \n        quality_rapport_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport_resp2, \n        quality_reliability_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability_resp2\n-- appropriate from statement\n    from onadata.\"bb6_gouvernance_foresti\u00e8re_vccx2_fev2021\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n600233::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    \n    _index::int as submission_index,\n    \n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region, \n        sublocation::varchar    -- finds the item of the list that correspond to a rule \n        as province,\n        NULL::varchar \n        as commune, \n        starttime_auto::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods, \n        population_needs_met::varchar    -- finds the item of the list that correspond to a rule \n        as population_needs_met,\n        NULL::varchar \n        as voice_hh_food,\n        NULL::varchar \n        as voice_hh_spending,\n        NULL::varchar \n        as voice_hh_crops,\n        NULL::varchar \n        as voice_hh_confidence,\n        NULL::varchar \n        as voice_comm_speaking,\n        NULL::varchar \n        as voice_comm_meetings,\n        NULL::varchar \n        as voice_comm_activities,\n        NULL::varchar \n        as seeing,\n        NULL::varchar \n        as seeing_others,\n        NULL::varchar \n        as hearing,\n        NULL::varchar \n        as hearing_others,\n        NULL::varchar \n        as walking,\n        NULL::varchar \n        as walking_others,\n        NULL::varchar \n        as memory,\n        NULL::varchar \n        as memory_others,\n        NULL::varchar \n        as self_care,\n        NULL::varchar \n        as self_care_others,\n        NULL::varchar \n        as language,\n        NULL::varchar \n        as language_others,\n        NULL::varchar \n        as test, \n        access_equality::varchar    -- finds the item of the list that correspond to a rule \n        as access_equality, \n        management_member::varchar    -- finds the item of the list that correspond to a rule \n        as management_member, \n        access_permission::varchar    -- finds the item of the list that correspond to a rule \n        as access_permission, \n        village_engagement::varchar    -- finds the item of the list that correspond to a rule \n        as village_engagement, \n        soil_water_cons::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        gully_control::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods,\n        NULL::varchar \n        as choice_hh_income_women,\n        NULL::varchar \n        as control_hh_farm_land,\n        NULL::varchar \n        as control_hh_comm_land,\n        NULL::varchar \n        as control_hh_assets,\n        NULL::varchar \n        as control_hh_livestock,\n        NULL::varchar \n        as control_hh_trees,\n        NULL::varchar \n        as control_hh_savings,\n        NULL::varchar \n        as control_comm_resources,\n        NULL::varchar \n        as choice_comm_market,\n        NULL::varchar \n        as choice_comm_committee,\n        NULL::varchar \n        as control_comm_leadership,\n        NULL::varchar \n        as control_comm_by_laws, \n        forest_management_tools_yn::varchar    -- finds the item of the list that correspond to a rule \n        as forest_management_tools_yn, \n        protection_actions_yn::varchar    -- finds the item of the list that correspond to a rule \n        as protection_actions_yn, \n        village_protection::varchar    -- finds the item of the list that correspond to a rule \n        as village_protection, \n        respondentsex::varchar    -- finds the item of the list that correspond to a rule \n        as respondentsex,\n        NULL::varchar \n        as choice_hh_training,\n        NULL::varchar \n        as choice_hh_decisions,\n        NULL::varchar \n        as respondent_ntfp, \n        beneficiary_ta::varchar    -- finds the item of the list that correspond to a rule \n        as beneficiary_control, \n        quality_rapport::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport, \n        quality_reliability::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability,\n        NULL::varchar \n        as quality_rapport_resp2,\n        NULL::varchar \n        as quality_reliability_resp2\n-- appropriate from statement\n    from onadata.\"rhomis_treeaid_na4_endline_june2021_tele_final\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n620321::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region,\n        NULL::varchar \n        as province, \n        sublocation::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        starttime_auto::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods, \n        population_needs_met::varchar    -- finds the item of the list that correspond to a rule \n        as population_needs_met, \n        voice_hh_food::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_food, \n        voice_hh_spending::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_spending, \n        voice_hh_crops::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_crops, \n        voice_hh_confidence::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_confidence, \n        voice_comm_speaking::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_speaking, \n        voice_comm_meetings::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_meetings, \n        voice_comm_activities::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_activities,\n        NULL::varchar \n        as seeing,\n        NULL::varchar \n        as seeing_others,\n        NULL::varchar \n        as hearing,\n        NULL::varchar \n        as hearing_others,\n        NULL::varchar \n        as walking,\n        NULL::varchar \n        as walking_others,\n        NULL::varchar \n        as memory,\n        NULL::varchar \n        as memory_others,\n        NULL::varchar \n        as self_care,\n        NULL::varchar \n        as self_care_others,\n        NULL::varchar \n        as language,\n        NULL::varchar \n        as language_others,\n        NULL::varchar \n        as test, \n        access_equality::varchar    -- finds the item of the list that correspond to a rule \n        as access_equality, \n        management_member::varchar    -- finds the item of the list that correspond to a rule \n        as management_member, \n        access_permission::varchar    -- finds the item of the list that correspond to a rule \n        as access_permission, \n        village_engagement::varchar    -- finds the item of the list that correspond to a rule \n        as village_engagement, \n        soil_water_cons::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        gully_control::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods, \n        choice_hh_income_women::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_income_women, \n        control_hh_farm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_farm_land, \n        control_hh_comm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_comm_land, \n        control_hh_assets::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_assets, \n        control_hh_livestock::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_livestock, \n        control_hh_trees::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_trees, \n        control_hh_savings::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_savings, \n        control_comm_resources::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_resources, \n        choice_comm_market::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_market, \n        choice_comm_committee::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_committee, \n        control_comm_leadership::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_leadership, \n        control_comm_by_laws::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_by_laws, \n        forest_management_tools_yn::varchar    -- finds the item of the list that correspond to a rule \n        as forest_management_tools_yn, \n        protection_actions_yn::varchar    -- finds the item of the list that correspond to a rule \n        as protection_actions_yn,\n        NULL::varchar \n        as village_protection, \n        respondentsex::varchar    -- finds the item of the list that correspond to a rule \n        as respondentsex, \n        choice_hh_training::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_training, \n        choice_hh_decisions::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_decisions, \n        respondent_ntfp::varchar    -- finds the item of the list that correspond to a rule \n        as respondent_ntfp, \n        beneficiary_TA::varchar    -- finds the item of the list that correspond to a rule \n        as beneficiary_control, \n        quality_rapport::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport, \n        quality_reliability::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability, \n        quality_rapport_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport_resp2, \n        quality_reliability_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability_resp2\n-- appropriate from statement\n    from onadata.\"tree_aid_rhomis_na6_endline\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n625701::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region,\n        NULL::varchar \n        as province, \n        district::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        starttime_auto::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        nrm_practice_grp_biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods, \n        forest_gov_module_population_needs_met::varchar    -- finds the item of the list that correspond to a rule \n        as population_needs_met, \n        vcc_grp_voice_hh_food::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_food, \n        vcc_grp_voice_hh_spending::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_spending, \n        vcc_grp_voice_hh_crops::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_crops, \n        vcc_grp_voice_hh_confidence::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_confidence, \n        vcc_grp_voice_comm_speaking::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_speaking, \n        vcc_grp_voice_comm_meetings::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_meetings, \n        vcc_grp_voice_comm_activities::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_activities, \n        disability_grp_seeing::varchar    -- finds the item of the list that correspond to a rule \n        as seeing, \n        disability_grp_seeing_others::varchar    -- finds the item of the list that correspond to a rule \n        as seeing_others, \n        disability_grp_hearing::varchar    -- finds the item of the list that correspond to a rule \n        as hearing, \n        disability_grp_hearing_others::varchar    -- finds the item of the list that correspond to a rule \n        as hearing_others, \n        disability_grp_walking::varchar    -- finds the item of the list that correspond to a rule \n        as walking, \n        disability_grp_walking_others::varchar    -- finds the item of the list that correspond to a rule \n        as walking_others, \n        disability_grp_memory::varchar    -- finds the item of the list that correspond to a rule \n        as memory, \n        disability_grp_memory_others::varchar    -- finds the item of the list that correspond to a rule \n        as memory_others, \n        \"disability_grp_self-care\"::varchar    -- finds the item of the list that correspond to a rule \n        as self_care, \n        \"disability_grp_self-care_others\"::varchar    -- finds the item of the list that correspond to a rule \n        as self_care_others, \n        disability_grp_language::varchar    -- finds the item of the list that correspond to a rule \n        as language, \n        disability_grp_language_others::varchar    -- finds the item of the list that correspond to a rule \n        as language_others,\n        NULL::varchar \n        as test, \n        forest_gov_module_access_equality::varchar    -- finds the item of the list that correspond to a rule \n        as access_equality, \n        forest_gov_module_management_member::varchar    -- finds the item of the list that correspond to a rule \n        as management_member, \n        forest_gov_module_access_permission::varchar    -- finds the item of the list that correspond to a rule \n        as access_permission, \n        forest_gov_module_village_engagement::varchar    -- finds the item of the list that correspond to a rule \n        as village_engagement, \n        nrm_practice_grp_soil_water_cons::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        nrm_practice_grp_gully_control::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods, \n        vcc_grp_choice_hh_income_women::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_income_women, \n        vcc_grp_choice_comm_committee::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_farm_land, \n        vcc_grp_control_hh_farm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_comm_land, \n        vcc_grp_control_hh_assets::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_assets, \n        vcc_grp_control_hh_livestock::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_livestock, \n        vcc_grp_control_hh_trees::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_trees, \n        vcc_grp_control_hh_savings::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_savings, \n        vcc_grp_control_comm_resources::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_resources, \n        vcc_grp_choice_comm_market::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_market, \n        vcc_grp_choice_comm_committee::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_committee, \n        vcc_grp_control_comm_leadership::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_leadership, \n        vcc_grp_control_comm_by_laws::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_by_laws, \n        forest_gov_module_forest_management_tools_yn::varchar    -- finds the item of the list that correspond to a rule \n        as forest_management_tools_yn, \n        forest_gov_module_protection_actions_yn::varchar    -- finds the item of the list that correspond to a rule \n        as protection_actions_yn, \n        forest_gov_module_village_protection::varchar    -- finds the item of the list that correspond to a rule \n        as village_protection, \n        section_household_info_respondentsex::varchar    -- finds the item of the list that correspond to a rule \n        as respondentsex, \n        vcc_grp_choice_hh_training::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_training, \n        vcc_grp_choice_hh_decisions::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_decisions, \n        respondent_ntfp::varchar    -- finds the item of the list that correspond to a rule \n        as respondent_ntfp, \n        beneficiary_control::varchar    -- finds the item of the list that correspond to a rule \n        as beneficiary_control, \n        section_quality_rapport::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport, \n        section_quality_reliability::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability, \n        section_quality_rapport_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport_resp2, \n        section_quality_reliability_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability_resp2\n-- appropriate from statement\n    from onadata.\"ta_rho_mis_gc6_2021\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n626004::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region, \n        sublocation::varchar    -- finds the item of the list that correspond to a rule \n        as province, \n        sublocation2::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        starttime_auto::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods, \n        population_needs_met::varchar    -- finds the item of the list that correspond to a rule \n        as population_needs_met, \n        voice_hh_food::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_food, \n        voice_hh_spending::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_spending, \n        voice_hh_crops::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_crops, \n        voice_hh_confidence::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_confidence, \n        voice_comm_speaking::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_speaking, \n        voice_comm_meetings::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_meetings, \n        voice_comm_activities::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_activities,\n        NULL::varchar \n        as seeing,\n        NULL::varchar \n        as seeing_others,\n        NULL::varchar \n        as hearing,\n        NULL::varchar \n        as hearing_others,\n        NULL::varchar \n        as walking,\n        NULL::varchar \n        as walking_others,\n        NULL::varchar \n        as memory,\n        NULL::varchar \n        as memory_others,\n        NULL::varchar \n        as self_care,\n        NULL::varchar \n        as self_care_others,\n        NULL::varchar \n        as language,\n        NULL::varchar \n        as language_others, \n        test::varchar    -- finds the item of the list that correspond to a rule \n        as test, \n        access_equality::varchar    -- finds the item of the list that correspond to a rule \n        as access_equality, \n        management_member::varchar    -- finds the item of the list that correspond to a rule \n        as management_member, \n        access_permission::varchar    -- finds the item of the list that correspond to a rule \n        as access_permission, \n        village_engagement::varchar    -- finds the item of the list that correspond to a rule \n        as village_engagement, \n        soil_water_cons::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        gully_control::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods, \n        choice_hh_income_women::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_income_women, \n        control_hh_farm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_farm_land, \n        control_hh_comm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_comm_land, \n        control_hh_assets::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_assets, \n        control_hh_livestock::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_livestock, \n        control_hh_trees::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_trees, \n        control_hh_savings::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_savings, \n        control_comm_resources::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_resources, \n        choice_comm_market::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_market, \n        choice_comm_committee::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_committee, \n        control_comm_leadership::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_leadership, \n        control_comm_by_laws::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_by_laws, \n        forest_management_tools_yn::varchar    -- finds the item of the list that correspond to a rule \n        as forest_management_tools_yn, \n        protection_actions_yn::varchar    -- finds the item of the list that correspond to a rule \n        as protection_actions_yn, \n        village_protection::varchar    -- finds the item of the list that correspond to a rule \n        as village_protection, \n        respondentsex::varchar    -- finds the item of the list that correspond to a rule \n        as respondentsex, \n        choice_hh_training::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_training, \n        choice_hh_decisions::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_decisions, \n        respondent_ntfp::varchar    -- finds the item of the list that correspond to a rule \n        as respondent_ntfp, \n        beneficiary_yn::varchar    -- finds the item of the list that correspond to a rule \n        as beneficiary_control, \n        quality_rapport::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport, \n        quality_reliability::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability, \n        quality_rapport_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport_resp2, \n        quality_reliability_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability_resp2\n-- appropriate from statement\n    from onadata.\"ta_rho_mis_bb6_oct_dec21\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n636755::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region, \n        cercle::varchar    -- finds the item of the list that correspond to a rule \n        as province, \n        commune::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        start_time_user::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods,\n        NULL::varchar \n        as population_needs_met, \n        voice_hh_food::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_food, \n        voice_hh_spending::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_spending, \n        voice_hh_crops::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_crops, \n        voice_hh_confidence::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_confidence, \n        voice_comm_speaking::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_speaking, \n        voice_comm_meetings::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_meetings, \n        voice_comm_activities::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_activities,\n        NULL::varchar \n        as seeing,\n        NULL::varchar \n        as seeing_others,\n        NULL::varchar \n        as hearing,\n        NULL::varchar \n        as hearing_others,\n        NULL::varchar \n        as walking,\n        NULL::varchar \n        as walking_others,\n        NULL::varchar \n        as memory,\n        NULL::varchar \n        as memory_others,\n        NULL::varchar \n        as self_care,\n        NULL::varchar \n        as self_care_others,\n        NULL::varchar \n        as language,\n        NULL::varchar \n        as language_others,\n        NULL::varchar \n        as test,\n        NULL::varchar \n        as access_equality,\n        NULL::varchar \n        as management_member,\n        NULL::varchar \n        as access_permission,\n        NULL::varchar \n        as village_engagement, \n        soil_water_cons::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        gully_control::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods, \n        choice_hh_income_women::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_income_women, \n        control_hh_farm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_farm_land, \n        control_hh_comm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_comm_land, \n        control_hh_assets::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_assets, \n        control_hh_livestock::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_livestock, \n        control_hh_trees::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_trees, \n        control_hh_savings::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_savings, \n        control_comm_resources::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_resources, \n        choice_comm_market::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_market, \n        choice_comm_committee::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_committee, \n        control_comm_leadership::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_leadership, \n        control_comm_by_laws::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_by_laws,\n        NULL::varchar \n        as forest_management_tools_yn,\n        NULL::varchar \n        as protection_actions_yn,\n        NULL::varchar \n        as village_protection, \n        respondentsex::varchar    -- finds the item of the list that correspond to a rule \n        as respondentsex, \n        choice_hh_training::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_training, \n        choice_hh_decisions::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_decisions, \n        respondent_ntfp::varchar    -- finds the item of the list that correspond to a rule \n        as respondent_ntfp,\n        NULL::varchar \n        as beneficiary_control,\n        NULL::varchar \n        as quality_rapport,\n        NULL::varchar \n        as quality_reliability,\n        NULL::varchar \n        as quality_rapport_resp2,\n        NULL::varchar \n        as quality_reliability_resp2\n-- appropriate from statement\n    from onadata.\"mb6_income_agri_nrm_vcc_jan-mar22\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n648707::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    \n    _index::int as submission_index,\n    \n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region, \n        district::varchar    -- finds the item of the list that correspond to a rule \n        as province, \n        kebele::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        starttime_auto::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods, \n        population_needs_met::varchar    -- finds the item of the list that correspond to a rule \n        as population_needs_met, \n        voice_hh_food::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_food, \n        voice_hh_spending::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_spending, \n        voice_hh_crops::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_crops, \n        voice_hh_confidence::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_confidence, \n        voice_comm_speaking::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_speaking, \n        voice_comm_meetings::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_meetings, \n        voice_comm_activities::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_activities, \n        seeing::varchar    -- finds the item of the list that correspond to a rule \n        as seeing, \n        seeing_others::varchar    -- finds the item of the list that correspond to a rule \n        as seeing_others, \n        hearing::varchar    -- finds the item of the list that correspond to a rule \n        as hearing, \n        hearing_others::varchar    -- finds the item of the list that correspond to a rule \n        as hearing_others, \n        walking::varchar    -- finds the item of the list that correspond to a rule \n        as walking, \n        walking_others::varchar    -- finds the item of the list that correspond to a rule \n        as walking_others, \n        memory::varchar    -- finds the item of the list that correspond to a rule \n        as memory, \n        memory_others::varchar    -- finds the item of the list that correspond to a rule \n        as memory_others, \n        self_care::varchar    -- finds the item of the list that correspond to a rule \n        as self_care, \n        self_care_others::varchar    -- finds the item of the list that correspond to a rule \n        as self_care_others, \n        language::varchar    -- finds the item of the list that correspond to a rule \n        as language, \n        language_others::varchar    -- finds the item of the list that correspond to a rule \n        as language_others,\n        NULL::varchar \n        as test, \n        access_equality::varchar    -- finds the item of the list that correspond to a rule \n        as access_equality, \n        management_member::varchar    -- finds the item of the list that correspond to a rule \n        as management_member, \n        access_permission::varchar    -- finds the item of the list that correspond to a rule \n        as access_permission, \n        village_engagement::varchar    -- finds the item of the list that correspond to a rule \n        as village_engagement, \n        soil_water_cons::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        gully_control::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods, \n        choice_hh_income_women::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_income_women, \n        control_hh_farm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_farm_land, \n        control_hh_comm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_comm_land, \n        control_hh_assets::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_assets, \n        control_hh_livestock::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_livestock, \n        control_hh_trees::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_trees, \n        control_hh_savings::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_savings, \n        control_comm_resources::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_resources, \n        choice_comm_market::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_market, \n        choice_comm_committee::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_committee, \n        control_comm_leadership::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_leadership, \n        control_comm_by_laws::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_by_laws, \n        forest_management_tools_yn::varchar    -- finds the item of the list that correspond to a rule \n        as forest_management_tools_yn, \n        protection_actions_yn::varchar    -- finds the item of the list that correspond to a rule \n        as protection_actions_yn, \n        village_protection::varchar    -- finds the item of the list that correspond to a rule \n        as village_protection, \n        respondentsex::varchar    -- finds the item of the list that correspond to a rule \n        as respondentsex, \n        choice_hh_training::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_training, \n        choice_hh_decisions::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_decisions, \n        respondent_ntfp::varchar    -- finds the item of the list that correspond to a rule \n        as respondent_ntfp, \n        beneficiary_yn::varchar    -- finds the item of the list that correspond to a rule \n        as beneficiary_control, \n        quality_rapport::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport, \n        quality_reliability::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability, \n        quality_rapport_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport_resp2, \n        quality_reliability_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability_resp2\n-- appropriate from statement\n    from onadata.\"ta_rhomis_eco_q1_2022\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n666324::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    \n    _index::int as submission_index,\n    \n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region,\n        NULL::varchar \n        as province, \n        sublocation::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        starttime_auto::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods,\n        NULL::varchar \n        as population_needs_met, \n        voice_hh_food::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_food, \n        voice_hh_spending::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_spending, \n        voice_hh_crops::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_crops, \n        voice_hh_confidence::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_confidence, \n        voice_comm_speaking::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_speaking, \n        voice_comm_meetings::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_meetings, \n        voice_comm_activities::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_activities,\n        NULL::varchar \n        as seeing,\n        NULL::varchar \n        as seeing_others,\n        NULL::varchar \n        as hearing,\n        NULL::varchar \n        as hearing_others,\n        NULL::varchar \n        as walking,\n        NULL::varchar \n        as walking_others,\n        NULL::varchar \n        as memory,\n        NULL::varchar \n        as memory_others,\n        NULL::varchar \n        as self_care,\n        NULL::varchar \n        as self_care_others,\n        NULL::varchar \n        as language,\n        NULL::varchar \n        as language_others, \n        test::varchar    -- finds the item of the list that correspond to a rule \n        as test,\n        NULL::varchar \n        as access_equality,\n        NULL::varchar \n        as management_member,\n        NULL::varchar \n        as access_permission,\n        NULL::varchar \n        as village_engagement, \n        soil_water_cons::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        gully_control::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods, \n        choice_hh_income_women::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_income_women, \n        control_hh_farm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_farm_land, \n        control_hh_comm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_comm_land, \n        control_hh_assets::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_assets, \n        control_hh_livestock::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_livestock, \n        control_hh_trees::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_trees, \n        control_hh_savings::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_savings, \n        control_comm_resources::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_resources, \n        choice_comm_market::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_market, \n        choice_comm_committee::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_committee, \n        control_comm_leadership::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_leadership, \n        control_comm_by_laws::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_by_laws,\n        NULL::varchar \n        as forest_management_tools_yn,\n        NULL::varchar \n        as protection_actions_yn,\n        NULL::varchar \n        as village_protection, \n        respondentsex::varchar    -- finds the item of the list that correspond to a rule \n        as respondentsex, \n        choice_hh_training::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_training, \n        choice_hh_decisions::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_decisions, \n        respondent_ntfp::varchar    -- finds the item of the list that correspond to a rule \n        as respondent_ntfp,\n        NULL::varchar \n        as beneficiary_control, \n        quality_rapport::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport, \n        quality_reliability::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability, \n        quality_rapport_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport_resp2, \n        quality_reliability_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability_resp2\n-- appropriate from statement\n    from onadata.\"ta_rhomis_gb8_endline_jan-mar2021_consolidated\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n674658::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    \n    _index::int as submission_index,\n    \n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region, \n        province::varchar    -- finds the item of the list that correspond to a rule \n        as province, \n        district::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        starttime_auto::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods, \n        population_needs_met::varchar    -- finds the item of the list that correspond to a rule \n        as population_needs_met, \n        voice_hh_food::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_food, \n        voice_hh_spending::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_spending, \n        voice_hh_crops::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_crops, \n        voice_hh_confidence::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_confidence, \n        voice_comm_speaking::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_speaking, \n        voice_comm_meetings::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_meetings, \n        voice_comm_activities::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_activities, \n        seeing::varchar    -- finds the item of the list that correspond to a rule \n        as seeing, \n        seeing_others::varchar    -- finds the item of the list that correspond to a rule \n        as seeing_others, \n        hearing::varchar    -- finds the item of the list that correspond to a rule \n        as hearing, \n        hearing_others::varchar    -- finds the item of the list that correspond to a rule \n        as hearing_others, \n        walking::varchar    -- finds the item of the list that correspond to a rule \n        as walking, \n        walking_others::varchar    -- finds the item of the list that correspond to a rule \n        as walking_others, \n        memory::varchar    -- finds the item of the list that correspond to a rule \n        as memory, \n        memory_others::varchar    -- finds the item of the list that correspond to a rule \n        as memory_others, \n        self_care::varchar    -- finds the item of the list that correspond to a rule \n        as self_care, \n        self_care_others::varchar    -- finds the item of the list that correspond to a rule \n        as self_care_others, \n        language::varchar    -- finds the item of the list that correspond to a rule \n        as language, \n        language_others::varchar    -- finds the item of the list that correspond to a rule \n        as language_others,\n        NULL::varchar \n        as test, \n        access_equality::varchar    -- finds the item of the list that correspond to a rule \n        as access_equality, \n        management_member::varchar    -- finds the item of the list that correspond to a rule \n        as management_member, \n        access_permission::varchar    -- finds the item of the list that correspond to a rule \n        as access_permission, \n        village_engagement::varchar    -- finds the item of the list that correspond to a rule \n        as village_engagement, \n        soil_water_cons::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons,\n        NULL::varchar \n        as gully_methods, \n        choice_hh_income_women::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_income_women, \n        control_hh_farm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_farm_land, \n        control_hh_comm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_comm_land, \n        control_hh_assets::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_assets, \n        control_hh_livestock::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_livestock, \n        control_hh_trees::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_trees, \n        control_hh_savings::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_savings, \n        control_comm_resources::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_resources, \n        choice_comm_market::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_market, \n        choice_comm_committee::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_committee, \n        control_comm_leadership::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_leadership, \n        control_comm_by_laws::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_by_laws, \n        forest_management_tools_yn::varchar    -- finds the item of the list that correspond to a rule \n        as forest_management_tools_yn, \n        protection_actions_yn::varchar    -- finds the item of the list that correspond to a rule \n        as protection_actions_yn, \n        village_protection::varchar    -- finds the item of the list that correspond to a rule \n        as village_protection, \n        respondentsex::varchar    -- finds the item of the list that correspond to a rule \n        as respondentsex, \n        choice_hh_training::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_training, \n        choice_hh_decisions::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_decisions, \n        respondent_ntfp::varchar    -- finds the item of the list that correspond to a rule \n        as respondent_ntfp,\n        NULL::varchar \n        as beneficiary_control, \n        quality_rapport::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport, \n        quality_reliability::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability, \n        quality_rapport_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport_resp2, \n        quality_reliability_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability_resp2\n-- appropriate from statement\n    from onadata.\"tree_aid_rhomis_bc4_apr-jun22_final\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n697818::varchar as form_id, \n     \n    _id::bigint as submission_id,\n    \n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        \"SECTION_META/Location/region\"::varchar    -- finds the item of the list that correspond to a rule \n        as region, \n        \"SECTION_META/Location/province\"::varchar    -- finds the item of the list that correspond to a rule \n        as province, \n        \"SECTION_META/Location/district\"::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        \"SECTION_META/metadata/starttime_auto\"::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        \"survey_grp/nrm_pract__rp/biological_methods\"::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods, \n        \"survey_grp/forest_go__/population_needs_met\"::varchar    -- finds the item of the list that correspond to a rule \n        as population_needs_met, \n        \"survey_grp/vcc_grp/v__e_group/voice_hh_food\"::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_food, \n        \"survey_grp/vcc_grp/v__oup/voice_hh_spending\"::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_spending, \n        \"survey_grp/vcc_grp/v___group/voice_hh_crops\"::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_crops, \n        \"survey_grp/vcc_grp/v__p/voice_hh_confidence\"::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_confidence, \n        \"survey_grp/vcc_grp/v__p/voice_comm_speaking\"::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_speaking, \n        \"survey_grp/vcc_grp/v__p/voice_comm_meetings\"::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_meetings, \n        \"survey_grp/vcc_grp/v__voice_comm_activities\"::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_activities, \n        \"survey_grp/disability_grp/dis_grp1/seeing\"::varchar    -- finds the item of the list that correspond to a rule \n        as seeing, \n        \"survey_grp/disabilit__is_grp1/seeing_others\"::varchar    -- finds the item of the list that correspond to a rule \n        as seeing_others, \n        \"survey_grp/disability_grp/dis_grp2/hearing\"::varchar    -- finds the item of the list that correspond to a rule \n        as hearing, \n        \"survey_grp/disabilit__s_grp2/hearing_others\"::varchar    -- finds the item of the list that correspond to a rule \n        as hearing_others, \n        \"survey_grp/disability_grp/dis_grp3/walking\"::varchar    -- finds the item of the list that correspond to a rule \n        as walking, \n        \"survey_grp/disabilit__s_grp3/walking_others\"::varchar    -- finds the item of the list that correspond to a rule \n        as walking_others, \n        \"survey_grp/disability_grp/dis_grp4/memory\"::varchar    -- finds the item of the list that correspond to a rule \n        as memory, \n        \"survey_grp/disabilit__is_grp4/memory_others\"::varchar    -- finds the item of the list that correspond to a rule \n        as memory_others, \n        \"survey_grp/disabilit__rp/dis_grp5/self_care\"::varchar    -- finds the item of the list that correspond to a rule \n        as self_care, \n        \"survey_grp/disabilit__grp5/self_care_others\"::varchar    -- finds the item of the list that correspond to a rule \n        as self_care_others, \n        \"survey_grp/disability_grp/dis_grp6/language\"::varchar    -- finds the item of the list that correspond to a rule \n        as language, \n        \"survey_grp/disabilit___grp6/language_others\"::varchar    -- finds the item of the list that correspond to a rule \n        as language_others,\n        NULL::varchar \n        as test, \n        \"survey_grp/forest_go__v_grp/access_equality\"::varchar    -- finds the item of the list that correspond to a rule \n        as access_equality, \n        \"survey_grp/forest_go__ols/management_member\"::varchar    -- finds the item of the list that correspond to a rule \n        as management_member, \n        \"survey_grp/forest_go__ion/access_permission\"::varchar    -- finds the item of the list that correspond to a rule \n        as access_permission, \n        \"survey_grp/forest_go__rp/village_engagement\"::varchar    -- finds the item of the list that correspond to a rule \n        as village_engagement, \n        \"survey_grp/nrm_practice_grp/soil_water_cons\"::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        \"survey_grp/nrm_practice_grp/gully_control\"::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods, \n        \"survey_grp/vcc_grp/c__hoice_hh_income_women\"::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_income_women, \n        \"survey_grp/vcc_grp/c__/control_hh_farm_land\"::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_farm_land, \n        \"survey_grp/vcc_grp/c__/control_hh_comm_land\"::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_comm_land, \n        \"survey_grp/vcc_grp/c__oup/control_hh_assets\"::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_assets, \n        \"survey_grp/vcc_grp/c__/control_hh_livestock\"::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_livestock, \n        \"survey_grp/vcc_grp/c__roup/control_hh_trees\"::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_trees, \n        \"survey_grp/vcc_grp/c__up/control_hh_savings\"::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_savings, \n        \"survey_grp/vcc_grp/c__ontrol_comm_resources\"::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_resources, \n        \"survey_grp/vcc_grp/c__up/choice_comm_market\"::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_market, \n        \"survey_grp/vcc_grp/c__choice_comm_committee\"::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_committee, \n        \"survey_grp/vcc_grp/c__ntrol_comm_leadership\"::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_leadership, \n        \"survey_grp/vcc_grp/c__/control_comm_by_laws\"::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_by_laws, \n        \"survey_grp/forest_go__t_management_tools_yn\"::varchar    -- finds the item of the list that correspond to a rule \n        as forest_management_tools_yn, \n        \"survey_grp/forest_go__protection_actions_yn\"::varchar    -- finds the item of the list that correspond to a rule \n        as protection_actions_yn, \n        \"survey_grp/forest_go__ction_actions_village\"::varchar    -- finds the item of the list that correspond to a rule \n        as village_protection, \n        \"survey_grp/SECTION_H__Details/respondentsex\"::varchar    -- finds the item of the list that correspond to a rule \n        as respondentsex, \n        \"survey_grp/vcc_grp/c__up/choice_hh_training\"::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_training, \n        \"survey_grp/vcc_grp/c__p/choice_hh_decisions\"::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_decisions, \n        \"survey_grp/respondent_ntfp\"::varchar    -- finds the item of the list that correspond to a rule \n        as respondent_ntfp, \n        \"survey_grp/SECTION_H__ry_grp/beneficiary_yn\"::varchar    -- finds the item of the list that correspond to a rule \n        as beneficiary_control, \n        \"survey_grp/SECTION/e__dback/quality_rapport\"::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport, \n        \"survey_grp/SECTION/e__k/quality_reliability\"::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability, \n        \"survey_grp/SECTION/e__quality_rapport_resp2\"::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport_resp2, \n        \"survey_grp/SECTION/e__ity_reliability_resp2\"::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability_resp2\n-- appropriate from statement\n    from airbyte.\"sbm_mc2_r_ho_mis__jul__sep22_final\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n704081::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region, \n        province::varchar    -- finds the item of the list that correspond to a rule \n        as province, \n        district::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        starttime_auto::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        nrm_practice_grp_biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods, \n        forest_gov_module_population_needs_met::varchar    -- finds the item of the list that correspond to a rule \n        as population_needs_met, \n        vcc_grp_voice_hh_food::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_food, \n        vcc_grp_voice_hh_spending::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_spending, \n        vcc_grp_voice_hh_crops::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_crops, \n        vcc_grp_voice_hh_confidence::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_confidence, \n        vcc_grp_voice_comm_speaking::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_speaking, \n        vcc_grp_voice_comm_meetings::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_meetings, \n        vcc_grp_voice_comm_activities::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_activities, \n        disability_grp_seeing::varchar    -- finds the item of the list that correspond to a rule \n        as seeing, \n        disability_grp_seeing_others::varchar    -- finds the item of the list that correspond to a rule \n        as seeing_others, \n        disability_grp_hearing::varchar    -- finds the item of the list that correspond to a rule \n        as hearing, \n        disability_grp_hearing_others::varchar    -- finds the item of the list that correspond to a rule \n        as hearing_others, \n        disability_grp_walking::varchar    -- finds the item of the list that correspond to a rule \n        as walking, \n        disability_grp_walking_others::varchar    -- finds the item of the list that correspond to a rule \n        as walking_others, \n        disability_grp_memory::varchar    -- finds the item of the list that correspond to a rule \n        as memory, \n        disability_grp_memory_others::varchar    -- finds the item of the list that correspond to a rule \n        as memory_others,\n        NULL::varchar \n        as self_care,\n        NULL::varchar \n        as self_care_others, \n        disability_grp_language::varchar    -- finds the item of the list that correspond to a rule \n        as language, \n        disability_grp_language_others::varchar    -- finds the item of the list that correspond to a rule \n        as language_others,\n        NULL::varchar \n        as test, \n        forest_gov_module_access_equality::varchar    -- finds the item of the list that correspond to a rule \n        as access_equality, \n        forest_gov_module_management_member::varchar    -- finds the item of the list that correspond to a rule \n        as management_member, \n        forest_gov_module_access_permission::varchar    -- finds the item of the list that correspond to a rule \n        as access_permission, \n        forest_gov_module_village_engagement::varchar    -- finds the item of the list that correspond to a rule \n        as village_engagement, \n        nrm_practice_grp_soil_water_cons::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        nrm_practice_grp_gully_control::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods, \n        vcc_grp_choice_hh_income_women::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_income_women, \n        vcc_grp_control_hh_farm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_farm_land, \n        vcc_grp_control_hh_comm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_comm_land, \n        vcc_grp_control_hh_assets::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_assets, \n        vcc_grp_control_hh_livestock::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_livestock, \n        vcc_grp_control_hh_trees::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_trees, \n        vcc_grp_control_hh_savings::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_savings, \n        vcc_grp_control_comm_resources::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_resources, \n        vcc_grp_choice_comm_market::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_market, \n        vcc_grp_choice_comm_committee::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_committee, \n        vcc_grp_control_comm_leadership::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_leadership, \n        vcc_grp_control_comm_by_laws::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_by_laws, \n        forest_gov_module_forest_management_tools_yn::varchar    -- finds the item of the list that correspond to a rule \n        as forest_management_tools_yn, \n        forest_gov_module_protection_actions_yn::varchar    -- finds the item of the list that correspond to a rule \n        as protection_actions_yn, \n        forest_gov_module_village_protection::varchar    -- finds the item of the list that correspond to a rule \n        as village_protection, \n        section_household_info_respondentsex::varchar    -- finds the item of the list that correspond to a rule \n        as respondentsex, \n        vcc_grp_choice_hh_training::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_training, \n        vcc_grp_choice_hh_decisions::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_decisions, \n        respondent_ntfp::varchar    -- finds the item of the list that correspond to a rule \n        as respondent_ntfp, \n        beneficiary_control::varchar    -- finds the item of the list that correspond to a rule \n        as beneficiary_control, \n        section_quality_rapport::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport, \n        section_quality_reliability::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability, \n        section_quality_rapport_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport_resp2, \n        section_quality_reliability_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability_resp2\n-- appropriate from statement\n    from onadata.\"mc3_rho_mis_oct-dec22_final\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n713115::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region, \n        province::varchar    -- finds the item of the list that correspond to a rule \n        as province, \n        district::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        starttime_auto::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        nrm_practice_grp_biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods, \n        forest_gov_module_population_needs_met::varchar    -- finds the item of the list that correspond to a rule \n        as population_needs_met, \n        vcc_grp_voice_hh_food::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_food, \n        vcc_grp_voice_hh_spending::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_spending, \n        vcc_grp_voice_hh_crops::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_crops, \n        vcc_grp_voice_hh_confidence::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_confidence, \n        vcc_grp_voice_comm_speaking::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_speaking, \n        vcc_grp_voice_comm_meetings::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_meetings, \n        vcc_grp_voice_comm_activities::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_activities,\n        NULL::varchar \n        as seeing,\n        NULL::varchar \n        as seeing_others,\n        NULL::varchar \n        as hearing,\n        NULL::varchar \n        as hearing_others,\n        NULL::varchar \n        as walking,\n        NULL::varchar \n        as walking_others,\n        NULL::varchar \n        as memory,\n        NULL::varchar \n        as memory_others,\n        NULL::varchar \n        as self_care,\n        NULL::varchar \n        as self_care_others,\n        NULL::varchar \n        as language,\n        NULL::varchar \n        as language_others,\n        NULL::varchar \n        as test, \n        forest_gov_module_access_equality::varchar    -- finds the item of the list that correspond to a rule \n        as access_equality, \n        forest_gov_module_management_member::varchar    -- finds the item of the list that correspond to a rule \n        as management_member, \n        forest_gov_module_access_permission::varchar    -- finds the item of the list that correspond to a rule \n        as access_permission, \n        forest_gov_module_village_engagement::varchar    -- finds the item of the list that correspond to a rule \n        as village_engagement, \n        nrm_practice_grp_soil_water_cons::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        nrm_practice_grp_gully_control::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods, \n        vcc_grp_choice_hh_income_women::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_income_women, \n        vcc_grp_control_hh_farm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_farm_land, \n        vcc_grp_control_hh_comm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_comm_land, \n        vcc_grp_control_hh_assets::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_assets, \n        vcc_grp_control_hh_livestock::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_livestock, \n        vcc_grp_control_hh_trees::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_trees, \n        vcc_grp_control_hh_savings::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_savings, \n        vcc_grp_control_comm_resources::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_resources, \n        vcc_grp_choice_comm_market::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_market, \n        vcc_grp_choice_comm_committee::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_committee, \n        vcc_grp_control_comm_leadership::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_leadership, \n        vcc_grp_control_comm_by_laws::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_by_laws, \n        forest_gov_module_forest_management_tools_yn::varchar    -- finds the item of the list that correspond to a rule \n        as forest_management_tools_yn, \n        forest_gov_module_protection_actions_yn::varchar    -- finds the item of the list that correspond to a rule \n        as protection_actions_yn, \n        forest_gov_module_village_protection::varchar    -- finds the item of the list that correspond to a rule \n        as village_protection, \n        section_household_info_respondentsex::varchar    -- finds the item of the list that correspond to a rule \n        as respondentsex, \n        vcc_grp_choice_hh_training::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_training, \n        vcc_grp_choice_hh_decisions::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_decisions, \n        respondent_ntfp::varchar    -- finds the item of the list that correspond to a rule \n        as respondent_ntfp, \n        beneficiary_control::varchar    -- finds the item of the list that correspond to a rule \n        as beneficiary_control, \n        section_quality_rapport::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport, \n        section_quality_reliability::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability, \n        section_quality_rapport_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport_resp2, \n        section_quality_reliability_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability_resp2\n-- appropriate from statement\n    from onadata.\"tree_aid_rho_mis_bc3_oct-dec2022_final\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n732621::varchar as form_id, \n    id::bigint as submission_id,\n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        region::varchar    -- finds the item of the list that correspond to a rule \n        as region, \n        province::varchar    -- finds the item of the list that correspond to a rule \n        as province, \n        district::varchar    -- finds the item of the list that correspond to a rule \n        as commune,\n        NULL::varchar \n        as date_assessment, \n        nrm_practice_grp_biological_methods::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods, \n        forest_gov_module_population_needs_met::varchar    -- finds the item of the list that correspond to a rule \n        as population_needs_met, \n        section_food_security_voice_hh_food::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_food, \n        section_food_security_voice_hh_spending::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_spending, \n        section_food_security_voice_hh_crops::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_crops, \n        section_food_security_voice_hh_confidence::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_confidence, \n        section_food_security_voice_comm_speaking::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_speaking, \n        section_food_security_voice_comm_meetings::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_meetings, \n        section_food_security_voice_comm_activities::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_activities,\n        NULL::varchar \n        as seeing,\n        NULL::varchar \n        as seeing_others,\n        NULL::varchar \n        as hearing,\n        NULL::varchar \n        as hearing_others,\n        NULL::varchar \n        as walking,\n        NULL::varchar \n        as walking_others,\n        NULL::varchar \n        as memory,\n        NULL::varchar \n        as memory_others,\n        NULL::varchar \n        as self_care,\n        NULL::varchar \n        as self_care_others,\n        NULL::varchar \n        as language,\n        NULL::varchar \n        as language_others,\n        NULL::varchar \n        as test, \n        forest_gov_module_access_equality::varchar    -- finds the item of the list that correspond to a rule \n        as access_equality, \n        forest_gov_module_management_member::varchar    -- finds the item of the list that correspond to a rule \n        as management_member, \n        forest_gov_module_access_permission::varchar    -- finds the item of the list that correspond to a rule \n        as access_permission, \n        forest_gov_module_village_engagement::varchar    -- finds the item of the list that correspond to a rule \n        as village_engagement, \n        nrm_practice_grp_soil_water_cons::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        nrm_practice_grp_gully_control::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods, \n        section_food_security_choice_hh_income_women::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_income_women, \n        section_food_security_control_hh_farm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_farm_land, \n        section_food_security_control_hh_comm_land::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_comm_land, \n        section_food_security_control_hh_assets::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_assets, \n        section_food_security_control_hh_livestock::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_livestock, \n        section_food_security_control_hh_trees::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_trees, \n        section_food_security_control_hh_savings::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_savings, \n        section_food_security_control_comm_resources::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_resources, \n        section_food_security_choice_comm_market::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_market, \n        section_food_security_choice_comm_committee::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_committee, \n        section_food_security_control_comm_leadership::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_leadership, \n        section_food_security_control_comm_by_laws::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_by_laws, \n        forest_gov_module_forest_management_tools_yn::varchar    -- finds the item of the list that correspond to a rule \n        as forest_management_tools_yn, \n        forest_gov_module_protection_actions_yn::varchar    -- finds the item of the list that correspond to a rule \n        as protection_actions_yn, \n        forest_gov_module_village_protection::varchar    -- finds the item of the list that correspond to a rule \n        as village_protection, \n        section_household_info_respondentsex::varchar    -- finds the item of the list that correspond to a rule \n        as respondentsex, \n        section_food_security_choice_hh_training::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_training, \n        section_food_security_choice_hh_decisions::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_decisions, \n        respondent_ntfp::varchar    -- finds the item of the list that correspond to a rule \n        as respondent_ntfp, \n        beneficiary_control::varchar    -- finds the item of the list that correspond to a rule \n        as beneficiary_control, \n        section_food_security_quality_rapport::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport, \n        section_food_security_quality_reliability::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability, \n        section_food_security_quality_rapport_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_rapport_resp2, \n        section_food_security_quality_reliability_resp2::varchar    -- finds the item of the list that correspond to a rule \n        as quality_reliability_resp2\n-- appropriate from statement\n    from onadata.\"ec0_mini_rho_mis_jan-mar2023_final\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n733793::varchar as form_id, \n     \n    _id::bigint as submission_id,\n    \n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        \"SECTION_META/Location/region\"::varchar    -- finds the item of the list that correspond to a rule \n        as region, \n        \"SECTION_META/Location/province\"::varchar    -- finds the item of the list that correspond to a rule \n        as province, \n        \"SECTION_META/Location/district\"::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        \"SECTION_META/metadata/starttime_auto\"::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        \"survey_grp/nrm_pract__rp/biological_methods\"::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods, \n        \"survey_grp/forest_go__/population_needs_met\"::varchar    -- finds the item of the list that correspond to a rule \n        as population_needs_met, \n        \"survey_grp/vcc_grp/v__e_group/voice_hh_food\"::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_food, \n        \"survey_grp/vcc_grp/v__oup/voice_hh_spending\"::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_spending, \n        \"survey_grp/vcc_grp/v___group/voice_hh_crops\"::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_crops, \n        \"survey_grp/vcc_grp/v__p/voice_hh_confidence\"::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_confidence, \n        \"survey_grp/vcc_grp/v__p/voice_comm_speaking\"::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_speaking, \n        \"survey_grp/vcc_grp/v__p/voice_comm_meetings\"::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_meetings, \n        \"survey_grp/vcc_grp/v__voice_comm_activities\"::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_activities,\n        NULL::varchar \n        as seeing,\n        NULL::varchar \n        as seeing_others,\n        NULL::varchar \n        as hearing,\n        NULL::varchar \n        as hearing_others,\n        NULL::varchar \n        as walking,\n        NULL::varchar \n        as walking_others,\n        NULL::varchar \n        as memory,\n        NULL::varchar \n        as memory_others,\n        NULL::varchar \n        as self_care,\n        NULL::varchar \n        as self_care_others,\n        NULL::varchar \n        as language,\n        NULL::varchar \n        as language_others,\n        NULL::varchar \n        as test, \n        \"survey_grp/forest_go__v_grp/access_equality\"::varchar    -- finds the item of the list that correspond to a rule \n        as access_equality, \n        \"survey_grp/forest_go__ols/management_member\"::varchar    -- finds the item of the list that correspond to a rule \n        as management_member, \n        \"survey_grp/forest_go__ion/access_permission\"::varchar    -- finds the item of the list that correspond to a rule \n        as access_permission,\n        NULL::varchar \n        as village_engagement, \n        \"survey_grp/nrm_practice_grp/soil_water_cons\"::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        \"survey_grp/nrm_practice_grp/gully_control\"::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods, \n        \"survey_grp/vcc_grp/c__hoice_hh_income_women\"::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_income_women, \n        \"survey_grp/vcc_grp/c__/control_hh_farm_land\"::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_farm_land, \n        \"survey_grp/vcc_grp/c__/control_hh_comm_land\"::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_comm_land, \n        \"survey_grp/vcc_grp/c__oup/control_hh_assets\"::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_assets, \n        \"survey_grp/vcc_grp/c__/control_hh_livestock\"::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_livestock, \n        \"survey_grp/vcc_grp/c__roup/control_hh_trees\"::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_trees, \n        \"survey_grp/vcc_grp/c__up/control_hh_savings\"::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_savings, \n        \"survey_grp/vcc_grp/c__ontrol_comm_resources\"::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_resources, \n        \"survey_grp/vcc_grp/c__up/choice_comm_market\"::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_market, \n        \"survey_grp/vcc_grp/c__choice_comm_committee\"::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_committee, \n        \"survey_grp/vcc_grp/c__ntrol_comm_leadership\"::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_leadership, \n        \"survey_grp/vcc_grp/c__/control_comm_by_laws\"::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_by_laws, \n        \"survey_grp/forest_go__t_management_tools_yn\"::varchar    -- finds the item of the list that correspond to a rule \n        as forest_management_tools_yn, \n        \"survey_grp/forest_go__protection_actions_yn\"::varchar    -- finds the item of the list that correspond to a rule \n        as protection_actions_yn, \n        \"survey_grp/forest_go__rp/village_protection\"::varchar    -- finds the item of the list that correspond to a rule \n        as village_protection, \n        \"survey_grp/SECTION_H__Details/respondentsex\"::varchar    -- finds the item of the list that correspond to a rule \n        as respondentsex, \n        \"survey_grp/vcc_grp/c__up/choice_hh_training\"::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_training, \n        \"survey_grp/vcc_grp/c__p/choice_hh_decisions\"::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_decisions, \n        \"survey_grp/respondent_ntfp\"::varchar    -- finds the item of the list that correspond to a rule \n        as respondent_ntfp, \n        \"SECTION_META/Location2/beneficiary_control\"::varchar    -- finds the item of the list that correspond to a rule \n        as beneficiary_control,\n        NULL::varchar \n        as quality_rapport,\n        NULL::varchar \n        as quality_reliability,\n        NULL::varchar \n        as quality_rapport_resp2,\n        NULL::varchar \n        as quality_reliability_resp2\n-- appropriate from statement\n    from airbyte.\"sbm_mb6_r_ho_mis_endline__apr__jun2023\"\n\n    union all\n\n\n--find all the fields for the table associated with the form--find the core fields and how they are referenced in the specific form--- final query \nselect \n733793::varchar as form_id, \n     \n    _id::bigint as submission_id,\n    \n    -- if _index in the actual table, add index if not add null\n    NULL::int as submission_index,\n-- loop through all the core fields, select the field with the appropriate name if present\n \n        \"SECTION_META/Location/region\"::varchar    -- finds the item of the list that correspond to a rule \n        as region, \n        \"SECTION_META/Location/province\"::varchar    -- finds the item of the list that correspond to a rule \n        as province, \n        \"SECTION_META/Location/district\"::varchar    -- finds the item of the list that correspond to a rule \n        as commune, \n        \"SECTION_META/metadata/starttime_auto\"::varchar    -- finds the item of the list that correspond to a rule \n        as date_assessment, \n        \"survey_grp/nrm_pract__rp/biological_methods\"::varchar    -- finds the item of the list that correspond to a rule \n        as biological_methods, \n        \"survey_grp/forest_go__/population_needs_met\"::varchar    -- finds the item of the list that correspond to a rule \n        as population_needs_met, \n        \"survey_grp/vcc_grp/v__e_group/voice_hh_food\"::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_food, \n        \"survey_grp/vcc_grp/v__oup/voice_hh_spending\"::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_spending, \n        \"survey_grp/vcc_grp/v___group/voice_hh_crops\"::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_crops, \n        \"survey_grp/vcc_grp/v__p/voice_hh_confidence\"::varchar    -- finds the item of the list that correspond to a rule \n        as voice_hh_confidence, \n        \"survey_grp/vcc_grp/v__p/voice_comm_speaking\"::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_speaking, \n        \"survey_grp/vcc_grp/v__p/voice_comm_meetings\"::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_meetings, \n        \"survey_grp/vcc_grp/v__voice_comm_activities\"::varchar    -- finds the item of the list that correspond to a rule \n        as voice_comm_activities,\n        NULL::varchar \n        as seeing,\n        NULL::varchar \n        as seeing_others,\n        NULL::varchar \n        as hearing,\n        NULL::varchar \n        as hearing_others,\n        NULL::varchar \n        as walking,\n        NULL::varchar \n        as walking_others,\n        NULL::varchar \n        as memory,\n        NULL::varchar \n        as memory_others,\n        NULL::varchar \n        as self_care,\n        NULL::varchar \n        as self_care_others,\n        NULL::varchar \n        as language,\n        NULL::varchar \n        as language_others,\n        NULL::varchar \n        as test, \n        \"survey_grp/forest_go__v_grp/access_equality\"::varchar    -- finds the item of the list that correspond to a rule \n        as access_equality, \n        \"survey_grp/forest_go__ols/management_member\"::varchar    -- finds the item of the list that correspond to a rule \n        as management_member, \n        \"survey_grp/forest_go__ion/access_permission\"::varchar    -- finds the item of the list that correspond to a rule \n        as access_permission,\n        NULL::varchar \n        as village_engagement, \n        \"survey_grp/nrm_practice_grp/soil_water_cons\"::varchar    -- finds the item of the list that correspond to a rule \n        as soil_water_cons, \n        \"survey_grp/nrm_practice_grp/gully_control\"::varchar    -- finds the item of the list that correspond to a rule \n        as gully_methods, \n        \"survey_grp/vcc_grp/c__hoice_hh_income_women\"::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_income_women, \n        \"survey_grp/vcc_grp/c__/control_hh_farm_land\"::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_farm_land, \n        \"survey_grp/vcc_grp/c__/control_hh_comm_land\"::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_comm_land, \n        \"survey_grp/vcc_grp/c__oup/control_hh_assets\"::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_assets, \n        \"survey_grp/vcc_grp/c__/control_hh_livestock\"::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_livestock, \n        \"survey_grp/vcc_grp/c__roup/control_hh_trees\"::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_trees, \n        \"survey_grp/vcc_grp/c__up/control_hh_savings\"::varchar    -- finds the item of the list that correspond to a rule \n        as control_hh_savings, \n        \"survey_grp/vcc_grp/c__ontrol_comm_resources\"::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_resources, \n        \"survey_grp/vcc_grp/c__up/choice_comm_market\"::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_market, \n        \"survey_grp/vcc_grp/c__choice_comm_committee\"::varchar    -- finds the item of the list that correspond to a rule \n        as choice_comm_committee, \n        \"survey_grp/vcc_grp/c__ntrol_comm_leadership\"::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_leadership, \n        \"survey_grp/vcc_grp/c__/control_comm_by_laws\"::varchar    -- finds the item of the list that correspond to a rule \n        as control_comm_by_laws, \n        \"survey_grp/forest_go__t_management_tools_yn\"::varchar    -- finds the item of the list that correspond to a rule \n        as forest_management_tools_yn, \n        \"survey_grp/forest_go__protection_actions_yn\"::varchar    -- finds the item of the list that correspond to a rule \n        as protection_actions_yn, \n        \"survey_grp/forest_go__rp/village_protection\"::varchar    -- finds the item of the list that correspond to a rule \n        as village_protection, \n        \"survey_grp/SECTION_H__Details/respondentsex\"::varchar    -- finds the item of the list that correspond to a rule \n        as respondentsex, \n        \"survey_grp/vcc_grp/c__up/choice_hh_training\"::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_training, \n        \"survey_grp/vcc_grp/c__p/choice_hh_decisions\"::varchar    -- finds the item of the list that correspond to a rule \n        as choice_hh_decisions, \n        \"survey_grp/respondent_ntfp\"::varchar    -- finds the item of the list that correspond to a rule \n        as respondent_ntfp, \n        \"SECTION_META/Location2/beneficiary_control\"::varchar    -- finds the item of the list that correspond to a rule \n        as beneficiary_control,\n        NULL::varchar \n        as quality_rapport,\n        NULL::varchar \n        as quality_reliability,\n        NULL::varchar \n        as quality_rapport_resp2,\n        NULL::varchar \n        as quality_reliability_resp2\n-- appropriate from statement\n    from onadata.\"sbm_mb6_r_ho_mis_endline__apr__jun2023\"\n\n\n\n\n)\nselect \ns.form_name,\ns.type,\ns.timing,\ns.country,\ns.project_code,\ns.type_2,\ncq.*\nfrom \"tree_aid\".\"dbt_bokidi\".\"stg_survey_master\" s \nleft join core_questions cq on s.form_id::int = cq.form_id::int   \nwhere s.type = 'Rhomis'\n\n \n)\nselect \nrow_number() over (partition by form_name order by submission_id) as row_id, \ndate_trunc('quarter',date_assessment::date) as assessment_quarter_date,\n* \nfrom rhomis_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.tree_aid.stg_core_questions_union": {"database": "tree_aid", "schema": "dbt_bokidi", "name": "stg_core_questions_union", "resource_type": "model", "package_name": "tree_aid", "path": "staging/stg_core_questions_union.sql", "original_file_path": "models/staging/stg_core_questions_union.sql", "unique_id": "model.tree_aid.stg_core_questions_union", "fqn": ["tree_aid", "staging", "stg_core_questions_union"], "alias": "stg_core_questions_union", "checksum": {"name": "sha256", "checksum": "23b7fa20c9119f919d14a593a62916600242b78f41c329563bb3062be8525313"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "intermediate": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/tree_aid/models/staging/stg_core_questions_union.sql", "deferred": false, "unrendered_config": {"intermediate": null, "materialized": "view"}, "created_at": 1698074991.3393178, "relation_name": "\"tree_aid\".\"dbt_bokidi\".\"stg_core_questions_union\"", "raw_code": "-- Creates a view of all the core questions for all surveys that have data in the database. \r\n-- Computes first the calculations for the non-repeat-group core questions, then for the repeat group ones. \r\n\r\nselect \r\n    s.form_id::int,\r\n    pt.schemaname, \r\n    pt.tablename,\r\n    sd.question_name, \r\n    cq.name as core_question_name,\r\n    cq.repeat_group_name,\r\n    s.form_id_string,\r\n    s.type,\r\n    s.timing,\r\n    s.type_2\r\nfrom {{ref('stg_survey_master')}} s \r\ninner join pg_catalog.pg_tables pt on trim(replace(lower(s.form_id_string), '-', '_')) = trim(replace(lower(pt.tablename), '-', '_'))  \r\n    and pt.schemaname in ('onadata','airbyte') and pt.tableowner = 'tree_aid'\r\nleft join {{ref('stg_survey_definitions_master')}} sd  on s.form_id::int = sd.form_id::int and sd.core_question_id is not null\r\ninner join {{ref('stg_core_questions_master')}} cq on sd.core_question_id = cq.id and cq.repeat_group_name is null \r\n\r\nunion \r\n\r\nselect \r\n    s.form_id::int,\r\n    pt.schemaname, \r\n    pt.tablename,\r\n    sd.question_name, \r\n    cq.name as core_question_name,\r\n    cq.repeat_group_name,\r\n    s.form_id_string,\r\n    s.type,\r\n    s.timing,\r\n    s.type_2\r\nfrom {{ref('stg_survey_master')}} s \r\nleft join {{ref('stg_survey_definitions_master')}} sd  on s.form_id::int = sd.form_id::int and sd.core_question_id is not null\r\ninner join {{ref('stg_core_questions_master')}} cq on sd.core_question_id = cq.id and repeat_group_name is not null \r\ninner join pg_catalog.pg_tables pt on \r\n    position( replace(lower(s.form_id_string), '-', '_') in replace(lower(pt.tablename), '-', '_') ) >0  --messy matching. Checking if the tablename contains the 'form_id_string' but also the 'repeat_group_name'\r\n    and pt.schemaname in ('onadata','airbyte') and pt.tableowner = 'tree_aid'\r\n    and right(tablename, length(tablename) - position ('_repeat' in tablename) - 7 ) = cq.repeat_group_name", "language": "sql", "refs": [{"name": "stg_survey_master", "package": null, "version": null}, {"name": "stg_survey_definitions_master", "package": null, "version": null}, {"name": "stg_core_questions_master", "package": null, "version": null}, {"name": "stg_survey_master", "package": null, "version": null}, {"name": "stg_survey_definitions_master", "package": null, "version": null}, {"name": "stg_core_questions_master", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.tree_aid.stg_survey_master", "model.tree_aid.stg_survey_definitions_master", "model.tree_aid.stg_core_questions_master", "model.tree_aid.stg_survey_master", "model.tree_aid.stg_survey_definitions_master", "model.tree_aid.stg_core_questions_master"]}, "compiled_path": "target/compiled/tree_aid/models/staging/stg_core_questions_union.sql", "compiled": true, "compiled_code": "-- Creates a view of all the core questions for all surveys that have data in the database. \n-- Computes first the calculations for the non-repeat-group core questions, then for the repeat group ones. \n\nselect \n    s.form_id::int,\n    pt.schemaname, \n    pt.tablename,\n    sd.question_name, \n    cq.name as core_question_name,\n    cq.repeat_group_name,\n    s.form_id_string,\n    s.type,\n    s.timing,\n    s.type_2\nfrom \"tree_aid\".\"dbt_bokidi\".\"stg_survey_master\" s \ninner join pg_catalog.pg_tables pt on trim(replace(lower(s.form_id_string), '-', '_')) = trim(replace(lower(pt.tablename), '-', '_'))  \n    and pt.schemaname in ('onadata','airbyte') and pt.tableowner = 'tree_aid'\nleft join \"tree_aid\".\"dbt_bokidi\".\"stg_survey_definitions_master\" sd  on s.form_id::int = sd.form_id::int and sd.core_question_id is not null\ninner join \"tree_aid\".\"dbt_bokidi\".\"stg_core_questions_master\" cq on sd.core_question_id = cq.id and cq.repeat_group_name is null \n\nunion \n\nselect \n    s.form_id::int,\n    pt.schemaname, \n    pt.tablename,\n    sd.question_name, \n    cq.name as core_question_name,\n    cq.repeat_group_name,\n    s.form_id_string,\n    s.type,\n    s.timing,\n    s.type_2\nfrom \"tree_aid\".\"dbt_bokidi\".\"stg_survey_master\" s \nleft join \"tree_aid\".\"dbt_bokidi\".\"stg_survey_definitions_master\" sd  on s.form_id::int = sd.form_id::int and sd.core_question_id is not null\ninner join \"tree_aid\".\"dbt_bokidi\".\"stg_core_questions_master\" cq on sd.core_question_id = cq.id and repeat_group_name is not null \ninner join pg_catalog.pg_tables pt on \n    position( replace(lower(s.form_id_string), '-', '_') in replace(lower(pt.tablename), '-', '_') ) >0  --messy matching. Checking if the tablename contains the 'form_id_string' but also the 'repeat_group_name'\n    and pt.schemaname in ('onadata','airbyte') and pt.tableowner = 'tree_aid'\n    and right(tablename, length(tablename) - position ('_repeat' in tablename) - 7 ) = cq.repeat_group_name", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.tree_aid.stg_survey_master": {"database": "tree_aid", "schema": "dbt_bokidi", "name": "stg_survey_master", "resource_type": "model", "package_name": "tree_aid", "path": "staging/stg_survey_master.sql", "original_file_path": "models/staging/stg_survey_master.sql", "unique_id": "model.tree_aid.stg_survey_master", "fqn": ["tree_aid", "staging", "stg_survey_master"], "alias": "stg_survey_master", "checksum": {"name": "sha256", "checksum": "0196ca3209283febba8abac455635a3d5cb8785530421b8b8288dce24792ecdd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "intermediate": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/tree_aid/models/staging/stg_survey_master.sql", "deferred": false, "unrendered_config": {"intermediate": null, "materialized": "view"}, "created_at": 1698074991.3462756, "relation_name": "\"tree_aid\".\"dbt_bokidi\".\"stg_survey_master\"", "raw_code": "select\r\n    form_id::int , \r\n    form_id_string,\r\n    form_name, \r\n    type,\r\n    timing,\r\n    country, \r\n    project_code,\r\n    is_in_scope::bool, \r\n    case when is_with_with_data = 'No data' then false else is_with_with_data::bool end as is_with_data,\r\n    onadata_project_name,\r\n    type_2 \r\nfrom {{source('airbyte','surveys')}}\r\nwhere is_in_scope::bool is true", "language": "sql", "refs": [], "sources": [["airbyte", "surveys"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.tree_aid.airbyte.surveys"]}, "compiled_path": "target/compiled/tree_aid/models/staging/stg_survey_master.sql", "compiled": true, "compiled_code": "select\n    form_id::int , \n    form_id_string,\n    form_name, \n    type,\n    timing,\n    country, \n    project_code,\n    is_in_scope::bool, \n    case when is_with_with_data = 'No data' then false else is_with_with_data::bool end as is_with_data,\n    onadata_project_name,\n    type_2 \nfrom \"tree_aid\".\"airbyte\".\"surveys\"\nwhere is_in_scope::bool is true", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.tree_aid.stg_survey_definitions_master": {"database": "tree_aid", "schema": "dbt_bokidi", "name": "stg_survey_definitions_master", "resource_type": "model", "package_name": "tree_aid", "path": "staging/stg_survey_definitions_master.sql", "original_file_path": "models/staging/stg_survey_definitions_master.sql", "unique_id": "model.tree_aid.stg_survey_definitions_master", "fqn": ["tree_aid", "staging", "stg_survey_definitions_master"], "alias": "stg_survey_definitions_master", "checksum": {"name": "sha256", "checksum": "5f980cd177f34503706044154b5c479f8f7923fe612e08b5bde226e8910f0074"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "intermediate": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/tree_aid/models/staging/stg_survey_definitions_master.sql", "deferred": false, "unrendered_config": {"intermediate": null, "materialized": "view"}, "created_at": 1698074991.352115, "relation_name": "\"tree_aid\".\"dbt_bokidi\".\"stg_survey_definitions_master\"", "raw_code": "select \r\n    id, \r\n    form_id::int, \r\n    question_name,\r\n    question_type,\r\n    question_label,\r\n    NULLIF(regexp_replace(core_question_id, '\\D','','g'), '')::numeric as core_question_id\r\n--    REGEXP_REPLACE(core_question_id,'[[:alpha:]]','','g')::int as core_question_id\r\n--    (regexp_replace(core_question_id, '[0-9]+\\.?[0-9]*'))::int as core_question_id\r\nfrom \r\n{{source('airbyte', 'survey_definitions')}}", "language": "sql", "refs": [], "sources": [["airbyte", "survey_definitions"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.tree_aid.airbyte.survey_definitions"]}, "compiled_path": "target/compiled/tree_aid/models/staging/stg_survey_definitions_master.sql", "compiled": true, "compiled_code": "select \n    id, \n    form_id::int, \n    question_name,\n    question_type,\n    question_label,\n    NULLIF(regexp_replace(core_question_id, '\\D','','g'), '')::numeric as core_question_id\n--    REGEXP_REPLACE(core_question_id,'[[:alpha:]]','','g')::int as core_question_id\n--    (regexp_replace(core_question_id, '[0-9]+\\.?[0-9]*'))::int as core_question_id\nfrom \n\"tree_aid\".\"airbyte\".\"survey_definitions\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.tree_aid.stg_core_questions_master": {"database": "tree_aid", "schema": "dbt_bokidi", "name": "stg_core_questions_master", "resource_type": "model", "package_name": "tree_aid", "path": "staging/stg_core_questions_master.sql", "original_file_path": "models/staging/stg_core_questions_master.sql", "unique_id": "model.tree_aid.stg_core_questions_master", "fqn": ["tree_aid", "staging", "stg_core_questions_master"], "alias": "stg_core_questions_master", "checksum": {"name": "sha256", "checksum": "9e25736cdeca5ba69aa51de900b0d903207a33a59d1865fbf878fb803167ff3c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "intermediate": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/tree_aid/models/staging/stg_core_questions_master.sql", "deferred": false, "unrendered_config": {"intermediate": null, "materialized": "view"}, "created_at": 1698074991.3577085, "relation_name": "\"tree_aid\".\"dbt_bokidi\".\"stg_core_questions_master\"", "raw_code": "select \r\n    id::int,\r\n    name, \r\n    description, \r\n    is_rhomis::bool,\r\n    is_land_survey::bool,\r\n    is_enterprise_survey::bool,\r\n    is_beneficiary_list::bool,\r\n    case when repeat_group_name = '' then NULL::varchar else repeat_group_name end as repeat_group_name \r\nfrom {{source('airbyte', 'core_questions')}}", "language": "sql", "refs": [], "sources": [["airbyte", "core_questions"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.tree_aid.airbyte.core_questions"]}, "compiled_path": "target/compiled/tree_aid/models/staging/stg_core_questions_master.sql", "compiled": true, "compiled_code": "select \n    id::int,\n    name, \n    description, \n    is_rhomis::bool,\n    is_land_survey::bool,\n    is_enterprise_survey::bool,\n    is_beneficiary_list::bool,\n    case when repeat_group_name = '' then NULL::varchar else repeat_group_name end as repeat_group_name \nfrom \"tree_aid\".\"airbyte\".\"core_questions\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.tree_aid.beneficiaries": {"database": "tree_aid", "schema": "dbt_bokidi", "name": "beneficiaries", "resource_type": "model", "package_name": "tree_aid", "path": "marts/beneficiaries.sql", "original_file_path": "models/marts/beneficiaries.sql", "unique_id": "model.tree_aid.beneficiaries", "fqn": ["tree_aid", "marts", "beneficiaries"], "alias": "beneficiaries", "checksum": {"name": "sha256", "checksum": "9dcaea4d7f41b9c24ea803643976d5e026ea7fe37d103e0723abdd4ea599d5f1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "intermediate": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/tree_aid/models/marts/beneficiaries.sql", "deferred": false, "unrendered_config": {"intermediate": null, "materialized": "table"}, "created_at": 1698074991.3633823, "relation_name": "\"tree_aid\".\"dbt_bokidi\".\"beneficiaries\"", "raw_code": "select  \n   sb.*,\n   case \n      when sb.year= 'n/a' then null else sb.year::DOUBLE PRECISION \n   end as assessment_year, \n   case \n      when sb.year is null then null \n      when sb.year ='n/a' then null else concat(year,'-','01','-01')::date \n   end as assessment_year_date,\n   'Yes' as beneficiary_control \nfrom {{ ref('stg_beneficiaries') }} sb", "language": "sql", "refs": [{"name": "stg_beneficiaries", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.tree_aid.stg_beneficiaries"]}, "compiled_path": "target/compiled/tree_aid/models/marts/beneficiaries.sql", "compiled": true, "compiled_code": "select  \n   sb.*,\n   case \n      when sb.year= 'n/a' then null else sb.year::DOUBLE PRECISION \n   end as assessment_year, \n   case \n      when sb.year is null then null \n      when sb.year ='n/a' then null else concat(year,'-','01','-01')::date \n   end as assessment_year_date,\n   'Yes' as beneficiary_control \nfrom \"tree_aid\".\"dbt_bokidi\".\"stg_beneficiaries\" sb", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.tree_aid.stg_beneficiaries": {"database": "tree_aid", "schema": "dbt_bokidi", "name": "stg_beneficiaries", "resource_type": "model", "package_name": "tree_aid", "path": "staging/stg_beneficiaries.sql", "original_file_path": "models/staging/stg_beneficiaries.sql", "unique_id": "model.tree_aid.stg_beneficiaries", "fqn": ["tree_aid", "staging", "stg_beneficiaries"], "alias": "stg_beneficiaries", "checksum": {"name": "sha256", "checksum": "658326725f68e21dfb294401f908da91a68a20683d32555f20696b70702d3e7b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "intermediate": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/tree_aid/models/staging/stg_beneficiaries.sql", "deferred": false, "unrendered_config": {"intermediate": null, "materialized": "view"}, "created_at": 1698074991.37003, "relation_name": "\"tree_aid\".\"dbt_bokidi\".\"stg_beneficiaries\"", "raw_code": "----A union of the googlesheets and form data\n----googlesheets_data \n(\nselect \n    case \n       when project like 'B%' then 'Burkina Faso' else country \n    end as country,\n    region,\n    province,\n    district,\n    village,\n    partner,\n   quarter_period,\n   year,\nproject,\nproject_id,\nbeneficiary_name,\nbeneficiary_last_name,\nbeneficiary_first_name,\nhhh_name,\nhhh_last_name,\nhhh_first_name,\nbeneficiary_gender,\nbeneficiary_yob,\nbeneficiary_age,\nunique_id\nfrom {{source('airbyte', 'beneficiaries_list')}}\n)\nunion all\n----Form data \n(\nselect \n    country,\n    region,\n    province,\n    district,\n    village,\n    partner,\n    quarter_period,\n    year,\n    project,\n    project_id,\n    beneficiary_name,\n    beneficiary_last_name,\n    beneficiary_first_name,\n    hhh_name,\n    hhh_last_name,\n    hhh_first_name,\n    beneficiary_gender,\n    beneficiary_yob::text,\n    beneficiary_age::text,\n    unique_id\nfrom {{ ref('stg_beneficiaries_form_data') }}\n)", "language": "sql", "refs": [{"name": "stg_beneficiaries_form_data", "package": null, "version": null}], "sources": [["airbyte", "beneficiaries_list"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.tree_aid.airbyte.beneficiaries_list", "model.tree_aid.stg_beneficiaries_form_data"]}, "compiled_path": "target/compiled/tree_aid/models/staging/stg_beneficiaries.sql", "compiled": true, "compiled_code": "----A union of the googlesheets and form data\n----googlesheets_data \n(\nselect \n    case \n       when project like 'B%' then 'Burkina Faso' else country \n    end as country,\n    region,\n    province,\n    district,\n    village,\n    partner,\n   quarter_period,\n   year,\nproject,\nproject_id,\nbeneficiary_name,\nbeneficiary_last_name,\nbeneficiary_first_name,\nhhh_name,\nhhh_last_name,\nhhh_first_name,\nbeneficiary_gender,\nbeneficiary_yob,\nbeneficiary_age,\nunique_id\nfrom \"tree_aid\".\"airbyte\".\"beneficiaries_list\"\n)\nunion all\n----Form data \n(\nselect \n    country,\n    region,\n    province,\n    district,\n    village,\n    partner,\n    quarter_period,\n    year,\n    project,\n    project_id,\n    beneficiary_name,\n    beneficiary_last_name,\n    beneficiary_first_name,\n    hhh_name,\n    hhh_last_name,\n    hhh_first_name,\n    beneficiary_gender,\n    beneficiary_yob::text,\n    beneficiary_age::text,\n    unique_id\nfrom \"tree_aid\".\"dbt_bokidi\".\"stg_beneficiaries_form_data\"\n)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.tree_aid.stg_beneficiaries_form_data": {"database": "tree_aid", "schema": "dbt_bokidi", "name": "stg_beneficiaries_form_data", "resource_type": "model", "package_name": "tree_aid", "path": "staging/stg_beneficiaries_form_data.sql", "original_file_path": "models/staging/stg_beneficiaries_form_data.sql", "unique_id": "model.tree_aid.stg_beneficiaries_form_data", "fqn": ["tree_aid", "staging", "stg_beneficiaries_form_data"], "alias": "stg_beneficiaries_form_data", "checksum": {"name": "sha256", "checksum": "93a89401677c1cf33cafbedff647591ba4ce9759b7f26964c719152872e5f01c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "intermediate": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/tree_aid/models/staging/stg_beneficiaries_form_data.sql", "deferred": false, "unrendered_config": {"intermediate": null, "materialized": "view"}, "created_at": 1698074991.3759599, "relation_name": "\"tree_aid\".\"dbt_bokidi\".\"stg_beneficiaries_form_data\"", "raw_code": "select \n{{ dbt_utils.star(from=source('airbyte', 'sbm_beneficiary_list_1'), \n    except=[  \"_airbyte_ab_id\",  \"_airbyte_emitted_at\",  \"_airbyte_normalized_at\",  \"_airbyte_beneficiary_list_hashid\"]) }}\nfrom {{source('airbyte', 'sbm_beneficiary_list_1')}}", "language": "sql", "refs": [], "sources": [["airbyte", "sbm_beneficiary_list_1"], ["airbyte", "sbm_beneficiary_list_1"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["source.tree_aid.airbyte.sbm_beneficiary_list_1", "source.tree_aid.airbyte.sbm_beneficiary_list_1"]}, "compiled_path": "target/compiled/tree_aid/models/staging/stg_beneficiaries_form_data.sql", "compiled": true, "compiled_code": "select \n\n\n    \"country\",\n  \"_xform_id_string\",\n  \"year\",\n  \"_review_comment\",\n  \"_tags\",\n  \"project\",\n  \"_review_status\",\n  \"beneficiary_first_name\",\n  \"_xform_id\",\n  \"_total_media\",\n  \"_attachments\",\n  \"beneficiary_name\",\n  \"province\",\n  \"project_id\",\n  \"_submission_time\",\n  \"_duration\",\n  \"_notes\",\n  \"village\",\n  \"_version\",\n  \"formhub/uuid\",\n  \"_date_modified\",\n  \"_geolocation\",\n  \"beneficiary_last_name\",\n  \"unique_id\",\n  \"meta/instanceID\",\n  \"_media_count\",\n  \"beneficiary_age\",\n  \"hhh_name\",\n  \"_uuid\",\n  \"_submitted_by\",\n  \"_status\",\n  \"_media_all_received\",\n  \"hhh_last_name\",\n  \"beneficiary_gender\",\n  \"_bamboo_dataset_id\",\n  \"_edited\",\n  \"partner\",\n  \"hhh_first_name\",\n  \"district\",\n  \"_id\",\n  \"quarter_period\",\n  \"region\",\n  \"beneficiary_yob\",\n  \"_airbyte_sbm_beneficiary_list_1_hashid\"\nfrom \"tree_aid\".\"airbyte\".\"sbm_beneficiary_list_1\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "test.tree_aid.empty_tables": {"database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "empty_tables", "resource_type": "test", "package_name": "tree_aid", "path": "empty_tables.sql", "original_file_path": "tests/empty_tables.sql", "unique_id": "test.tree_aid.empty_tables", "fqn": ["tree_aid", "empty_tables"], "alias": "empty_tables", "checksum": {"name": "sha256", "checksum": "7971316de6265e129f7b0f89dd0e3588b172574272c269b46dd6650bead56287"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1698074991.409685, "relation_name": null, "raw_code": "----Checks whether all the models have data\r\nwith data as \r\n(\r\n---Rhomis surveys   \r\nselect \r\nsubmission_id,\r\nform_name\r\nfrom {{ ref('rhomis_surveys') }}\r\nunion all \r\n----Enterprise surveys\r\nselect \r\nsubmission_id,\r\nform_name\r\nfrom {{ ref('enterprise_surveys') }}\r\nunion all\r\n---Land surveys\r\nselect \r\nsubmission_id,\r\nform_name\r\nfrom {{ ref('land_surveys') }}\r\n)\r\nselect * from data\r\ngroup by 1,2 \r\nhaving not count(submission_id)>0", "language": "sql", "refs": [{"name": "rhomis_surveys", "package": null, "version": null}, {"name": "enterprise_surveys", "package": null, "version": null}, {"name": "land_surveys", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.tree_aid.rhomis_surveys", "model.tree_aid.enterprise_surveys", "model.tree_aid.land_surveys"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}}, "test.tree_aid.source_unique_airbyte_surveys_form_id.16310e6b4f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "form_id", "model": "{{ get_where_subquery(source('airbyte', 'surveys')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_airbyte_surveys_form_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_airbyte_surveys_form_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_airbyte_surveys_form_id.16310e6b4f", "fqn": ["tree_aid", "staging", "source_unique_airbyte_surveys_form_id"], "alias": "source_unique_airbyte_surveys_form_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1698074991.4518235, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["airbyte", "surveys"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.airbyte.surveys"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "form_id", "file_key_name": "sources.airbyte", "attached_node": null}, "test.tree_aid.source_not_null_airbyte_surveys_form_id.67862aa9d2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "form_id", "model": "{{ get_where_subquery(source('airbyte', 'surveys')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_airbyte_surveys_form_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_airbyte_surveys_form_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_airbyte_surveys_form_id.67862aa9d2", "fqn": ["tree_aid", "staging", "source_not_null_airbyte_surveys_form_id"], "alias": "source_not_null_airbyte_surveys_form_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1698074991.4538598, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["airbyte", "surveys"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.airbyte.surveys"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "form_id", "file_key_name": "sources.airbyte", "attached_node": null}, "test.tree_aid.source_unique_airbyte_core_questions_id.53ef7260a7": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('airbyte', 'core_questions')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_airbyte_core_questions_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_airbyte_core_questions_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_airbyte_core_questions_id.53ef7260a7", "fqn": ["tree_aid", "staging", "source_unique_airbyte_core_questions_id"], "alias": "source_unique_airbyte_core_questions_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1698074991.4569197, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["airbyte", "core_questions"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.airbyte.core_questions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.airbyte", "attached_node": null}, "test.tree_aid.source_not_null_airbyte_core_questions_id.d86f814b39": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(source('airbyte', 'core_questions')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_airbyte_core_questions_id", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_airbyte_core_questions_id.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_airbyte_core_questions_id.d86f814b39", "fqn": ["tree_aid", "staging", "source_not_null_airbyte_core_questions_id"], "alias": "source_not_null_airbyte_core_questions_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1698074991.4587815, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["airbyte", "core_questions"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.airbyte.core_questions"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id", "file_key_name": "sources.airbyte", "attached_node": null}, "test.tree_aid.source_unique_airbyte_rhomis_indicators_id_hh.70d520ef17": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id_hh", "model": "{{ get_where_subquery(source('airbyte', 'rhomis_indicators')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_unique_airbyte_rhomis_indicators_id_hh", "resource_type": "test", "package_name": "tree_aid", "path": "source_unique_airbyte_rhomis_indicators_id_hh.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_unique_airbyte_rhomis_indicators_id_hh.70d520ef17", "fqn": ["tree_aid", "staging", "source_unique_airbyte_rhomis_indicators_id_hh"], "alias": "source_unique_airbyte_rhomis_indicators_id_hh", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1698074991.4609613, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["airbyte", "rhomis_indicators"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.tree_aid.airbyte.rhomis_indicators"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id_hh", "file_key_name": "sources.airbyte", "attached_node": null}, "test.tree_aid.source_not_null_airbyte_rhomis_indicators_id_hh.e86e5fe090": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id_hh", "model": "{{ get_where_subquery(source('airbyte', 'rhomis_indicators')) }}"}, "namespace": null}, "database": "tree_aid", "schema": "dbt_bokidi_dbt_test__audit", "name": "source_not_null_airbyte_rhomis_indicators_id_hh", "resource_type": "test", "package_name": "tree_aid", "path": "source_not_null_airbyte_rhomis_indicators_id_hh.sql", "original_file_path": "models/staging/a_sources.yml", "unique_id": "test.tree_aid.source_not_null_airbyte_rhomis_indicators_id_hh.e86e5fe090", "fqn": ["tree_aid", "staging", "source_not_null_airbyte_rhomis_indicators_id_hh"], "alias": "source_not_null_airbyte_rhomis_indicators_id_hh", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1698074991.4631238, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["airbyte", "rhomis_indicators"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.tree_aid.airbyte.rhomis_indicators"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id_hh", "file_key_name": "sources.airbyte", "attached_node": null}, "model.tree_aid.stg_rhomis_indicators": {"database": "tree_aid", "schema": "dbt_bokidi", "name": "stg_rhomis_indicators", "resource_type": "model", "package_name": "tree_aid", "path": "staging/stg_rhomis_indicators.sql", "original_file_path": "models/staging/stg_rhomis_indicators.sql", "unique_id": "model.tree_aid.stg_rhomis_indicators", "fqn": ["tree_aid", "staging", "stg_rhomis_indicators"], "alias": "stg_rhomis_indicators", "checksum": {"name": "sha256", "checksum": "6ef208452fed646f3642b85fe0d68dd297317a4775cd79fc30420fc8a2cdaecf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "intermediate": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/tree_aid/models/staging/stg_rhomis_indicators.sql", "deferred": false, "unrendered_config": {"intermediate": null, "materialized": "table"}, "created_at": 1698135838.3314648, "relation_name": "\"tree_aid\".\"dbt_bokidi\".\"stg_rhomis_indicators\"", "raw_code": "{{config(materialized='table')}}\r\n\r\n-- select * from {{source('csv', 'rhomis_indicators')}}\r\n-- updated to Tree Aid Master Data source\r\nselect \r\nid_unique,\t\r\nid_hh,\t\r\nid_rhomis_dataset,\r\nid_form,\r\nid_proj,\t\r\niso_country_code,\r\nyear::int,\r\ncurrency_conversion_lcu_to_ppp::float,\r\ncurrency_conversion_factor_year,\t\r\nsurvey_length_minutes,\t\r\nlivestock_tlu::float,\r\nhh_size_members::float,\r\nhh_size_mae::float,\r\nhousehold_type,\r\nhead_education_level,\r\nland_cultivated_ha::float,\r\nland_owned_ha::float,\r\nworst_food_security_month,\r\nbest_food_security_month,\r\nhfias_status,\r\nfies_score::float,\r\nhdds_good_season::float,\r\nhdds_good_season_bought::float,\r\nhdds_good_season_farm::float,\r\nhdds_bad_season::float,\r\nhdds_bad_season_bought::float,\r\nhdds_bad_season_farm::float,\r\nhdds_last_month::float,\r\nhdds_last_month_bought::float,\r\nhdds_last_month_farm::float,\r\ncrop_income_lcu_per_year::float,\r\nlivestock_income_lcu_per_year::float,\r\ntotal_income_lcu_per_year::float,\r\noff_farm_income_lcu_per_year::float,\r\nvalue_crop_consumed_lcu_per_hh_per_year::float,\t\r\nvalue_livestock_prod__d_lcu_per_hh_per_year::float as value_livestock_products_consumed_lcu_per_hh_per_year,\t\r\nvalue_farm_products___d_lcu_per_hh_per_year::float as value_farm_products_consumed_lcu_per_hh_per_year,\r\ncrop_consumed_calories_kcal_per_hh_per_year::float,\r\nfarm_products_consum___kcal_per_hh_per_year::float as farm_products_consumed_calories_kcal_per_hh_per_year,\r\nstaple_crop,\r\nstaple_crop_kcal_per_lcu::float,\r\nfoodavailability::float,\r\nproportion_of_value_controlled_female_youth::float,\r\nproportion_of_value_controlled_female_adult::float,\r\nproportion_of_value_controlled_male_youth::float,\r\nproportion_of_value_controlled_male_adult::float,\r\nid,\r\nntfp_income::float,\r\nvalue_ntfp_consumed::float,\r\nntfp_consumed_calories_kcal_per_hh_per_year::float,\r\nfirewood_consumed_kgs_per_hh_per_day::float,\r\nnr_months_food_shortage::float,\r\nbeneficiary_gender\r\nfrom {{source('airbyte', 'rhomis_indicators')}}", "language": "sql", "refs": [], "sources": [["csv", "rhomis_indicators"], ["airbyte", "rhomis_indicators"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.tree_aid.csv.rhomis_indicators", "source.tree_aid.airbyte.rhomis_indicators"]}, "compiled_path": "target/compiled/tree_aid/models/staging/stg_rhomis_indicators.sql", "compiled": true, "compiled_code": "\n\n-- select * from \"tree_aid\".\"csv\".\"rhomis_indicators\"\n-- updated to Tree Aid Master Data source\nselect \nid_unique,\t\nid_hh,\t\nid_rhomis_dataset,\nid_form,\nid_proj,\t\niso_country_code,\nyear::int,\ncurrency_conversion_lcu_to_ppp::float,\ncurrency_conversion_factor_year,\t\nsurvey_length_minutes,\t\nlivestock_tlu::float,\nhh_size_members::float,\nhh_size_mae::float,\nhousehold_type,\nhead_education_level,\nland_cultivated_ha::float,\nland_owned_ha::float,\nworst_food_security_month,\nbest_food_security_month,\nhfias_status,\nfies_score::float,\nhdds_good_season::float,\nhdds_good_season_bought::float,\nhdds_good_season_farm::float,\nhdds_bad_season::float,\nhdds_bad_season_bought::float,\nhdds_bad_season_farm::float,\nhdds_last_month::float,\nhdds_last_month_bought::float,\nhdds_last_month_farm::float,\ncrop_income_lcu_per_year::float,\nlivestock_income_lcu_per_year::float,\ntotal_income_lcu_per_year::float,\noff_farm_income_lcu_per_year::float,\nvalue_crop_consumed_lcu_per_hh_per_year::float,\t\nvalue_livestock_prod__d_lcu_per_hh_per_year::float as value_livestock_products_consumed_lcu_per_hh_per_year,\t\nvalue_farm_products___d_lcu_per_hh_per_year::float as value_farm_products_consumed_lcu_per_hh_per_year,\ncrop_consumed_calories_kcal_per_hh_per_year::float,\nfarm_products_consum___kcal_per_hh_per_year::float as farm_products_consumed_calories_kcal_per_hh_per_year,\nstaple_crop,\nstaple_crop_kcal_per_lcu::float,\nfoodavailability::float,\nproportion_of_value_controlled_female_youth::float,\nproportion_of_value_controlled_female_adult::float,\nproportion_of_value_controlled_male_youth::float,\nproportion_of_value_controlled_male_adult::float,\nid,\nntfp_income::float,\nvalue_ntfp_consumed::float,\nntfp_consumed_calories_kcal_per_hh_per_year::float,\nfirewood_consumed_kgs_per_hh_per_day::float,\nnr_months_food_shortage::float,\nbeneficiary_gender\nfrom \"tree_aid\".\"airbyte\".\"rhomis_indicators\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.tree_aid.rhomis_surveys": {"database": "tree_aid", "schema": "dbt_bokidi", "name": "rhomis_surveys", "resource_type": "model", "package_name": "tree_aid", "path": "marts/rhomis_surveys.sql", "original_file_path": "models/marts/rhomis_surveys.sql", "unique_id": "model.tree_aid.rhomis_surveys", "fqn": ["tree_aid", "marts", "rhomis_surveys"], "alias": "rhomis_surveys", "checksum": {"name": "sha256", "checksum": "0107623a422d69b3228ddaf299854a8af435def54f25b3cf8db75bf2fe82625e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "intermediate": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/tree_aid/models/marts/rhomis_surveys.sql", "deferred": false, "unrendered_config": {"intermediate": null, "materialized": "table"}, "created_at": 1698135987.3493118, "relation_name": "\"tree_aid\".\"dbt_bokidi\".\"rhomis_surveys\"", "raw_code": "{%- set forest_governance_fields= ['access_permission','access_equality' ,'village_engagement' ,'forest_management_tools_yn' ,'population_needs_met' ,\r\n  'protection_actions_yn' ,'village_protection'] -%}\r\n\r\n{%- set vcc_fields= ['voice_hh_food','voice_hh_spending','voice_hh_crops','voice_hh_confidence','voice_comm_speaking','voice_comm_meetings','voice_comm_activities','choice_hh_training',\r\n'choice_hh_decisions','choice_hh_income_women','choice_comm_market','choice_comm_committee','control_hh_farm_land','control_hh_comm_land','control_hh_assets','control_hh_livestock',\r\n'control_hh_trees','control_hh_savings','control_comm_resources','control_comm_leadership','control_comm_by_laws'] -%}\r\n\r\n{%- set disability_fields= ['seeing','hearing','walking','memory','self_care','language'] -%}\r\n\r\n{%- set income_fields = ['total_income_per_year', 'total_income_with_ntfp_per_year', 'ntfp_income_per_year', 'crop_income_per_year',\r\n'livestock_income_per_year','off_farm_income_per_year' ]-%}\r\n\r\n--  Joining rhomis data with already calculated rhomis indicators\r\nwith rhomis_data as \r\n(select \r\n*\r\nfrom {{ref('stg_rhomis_data')}} rd \r\nleft join {{ref('stg_rhomis_indicators')}} ri on rd.form_id::int = ri.id_rhomis_dataset::int and rd.row_id::int = ri.id_hh::int\r\n) ,\r\n\r\n----Calculating the fields relevant for indicator building\r\ncalculated_fields as \r\n(\r\nselect\r\n*,\r\ncount(rd.assessment_quarter_date::date) OVER (PARTITION BY rd.assessment_quarter_date::date,rd.form_id) as quarter_count,\r\n   (rd.total_income_lcu_per_year/rd.currency_conversion_lcu_to_ppp) as total_income_per_year,\r\n  ((rd.total_income_lcu_per_year/rd.currency_conversion_lcu_to_ppp) + (rd.ntfp_income/rd.currency_conversion_lcu_to_ppp)) as total_income_with_ntfp_per_year,\r\n  (rd.ntfp_income/rd.currency_conversion_lcu_to_ppp) as ntfp_income_per_year,\r\n  (rd.crop_income_lcu_per_year/rd.currency_conversion_lcu_to_ppp) as crop_income_per_year,\r\n  (rd.livestock_income_lcu_per_year/rd.currency_conversion_lcu_to_ppp) as livestock_income_per_year,\r\n  (rd.off_farm_income_lcu_per_year/rd.currency_conversion_lcu_to_ppp) as off_farm_income_per_year,\r\n  case when (rd.total_income_lcu_per_year/rd.currency_conversion_lcu_to_ppp) + (rd.ntfp_income/rd.currency_conversion_lcu_to_ppp) / nullif((rd.hh_size_mae * 365),0) <= 1.90 then true else false end as extreme_poverty,\r\n  case when (rd.total_income_lcu_per_year/rd.currency_conversion_lcu_to_ppp) + (rd.ntfp_income/rd.currency_conversion_lcu_to_ppp) + (rd.value_crop_consumed_lcu_per_hh_per_year/rd.currency_conversion_lcu_to_ppp) + (rd.value_livestock_products_consumed_lcu_per_hh_per_year/rd.currency_conversion_lcu_to_ppp) + (rd.value_ntfp_consumed/rd.currency_conversion_lcu_to_ppp) / nullif((rd.hh_size_mae * 365),0) <= 1.90 then true else false end as extreme_poverty_TVA_incl, \r\n  case when (rd.crop_consumed_calories_kcal_per_hh_per_year is null and rd.farm_products_consumed_calories_kcal_per_hh_per_year is null and \r\n  (rd.foodavailability + rd.ntfp_consumed_calories_kcal_per_hh_per_year) / (rd.hh_size_mae * 365) < 2500)\r\n  or ((rd.crop_consumed_calories_kcal_per_hh_per_year + rd.farm_products_consumed_calories_kcal_per_hh_per_year + rd.ntfp_consumed_calories_kcal_per_hh_per_year) / (rd.hh_size_mae * 365) < 2500) then true else false end as below_calline,\r\n  case when (rd.crop_consumed_calories_kcal_per_hh_per_year is null and \r\n  (rd.foodavailability + rd.ntfp_consumed_calories_kcal_per_hh_per_year + rd.off_farm_income_lcu_per_year*(3650/121.58) + rd.livestock_income_lcu_per_year*(3650/121.58) +\r\n   rd.crop_income_lcu_per_year*(3650/121.58) + rd.ntfp_income*(3650/121.58)) / (rd.hh_size_mae * 365) < 2500)\r\n  or ((rd.crop_consumed_calories_kcal_per_hh_per_year + rd.farm_products_consumed_calories_kcal_per_hh_per_year + rd.ntfp_consumed_calories_kcal_per_hh_per_year + rd.off_farm_income_lcu_per_year*(3650/121.58) + rd.livestock_income_lcu_per_year*(3650/121.58) +\r\n   rd.crop_income_lcu_per_year*(3650/121.58) + rd.ntfp_income*(3650/121.58)) / (rd.hh_size_mae * 365) < 2500) then true else false end as below_calline_potential,\r\n  case when rd.crop_consumed_calories_kcal_per_hh_per_year is null\r\n  then rd.ntfp_consumed_calories_kcal_per_hh_per_year / nullif(coalesce(rd.foodavailability::float,0),0)\r\n  else rd.ntfp_consumed_calories_kcal_per_hh_per_year / \r\n    nullif(coalesce(rd.crop_consumed_calories_kcal_per_hh_per_year::float,0) + coalesce(rd.farm_products_consumed_calories_kcal_per_hh_per_year::float,0) + coalesce(rd.ntfp_consumed_calories_kcal_per_hh_per_year::float,0),0) end\r\n    as proportion_ntfp_in_diet,\r\n  case when rd.crop_consumed_calories_kcal_per_hh_per_year is null \r\n  then (rd.ntfp_consumed_calories_kcal_per_hh_per_year + rd.ntfp_income*(3650/121.58)) / nullif(coalesce(rd.foodavailability::float,0) + coalesce(rd.ntfp_income*(3650/121.58)::float,0)\r\n    + rd.off_farm_income_lcu_per_year*(3650/121.58) + rd.livestock_income_lcu_per_year*(3650/121.58) + rd.crop_income_lcu_per_year*(3650/121.58),0)\r\n  else (rd.ntfp_consumed_calories_kcal_per_hh_per_year + rd.ntfp_income*(3650/121.58)) / \r\n    nullif(coalesce(rd.crop_consumed_calories_kcal_per_hh_per_year::float,0) + coalesce(rd.farm_products_consumed_calories_kcal_per_hh_per_year::float,0) + coalesce(rd.ntfp_consumed_calories_kcal_per_hh_per_year::float,0) + coalesce(rd.ntfp_income*(3650/121.58)::float,0)\r\n    + rd.off_farm_income_lcu_per_year*(3650/121.58) + rd.livestock_income_lcu_per_year*(3650/121.58) + rd.crop_income_lcu_per_year*(3650/121.58),0) end\r\n    as proportion_ntfp_in_diet_potential,\r\n  coalesce ((case when rd.hfias_status='' then null else rd.hfias_status end), \r\n  (case when rd.fies_score::float >= 0 and rd.fies_score::float <=1 then 'Food Secure'\r\n    when rd.fies_score::float > 1 and rd.fies_score::float <=3 then 'Mildly Food Insecure'\r\n    when rd.fies_score::float >3 and rd.fies_score::float <=5 then 'Moderately Food Insecure'\r\n    when rd.fies_score::float >5 and rd.fies_score::float <=8 then 'Severely Food Insecure'\r\n    else null end)) as food_insecurity_status,\r\n--    case when \r\n--      length(rd.biological_methods) + length(rd.gully_methods) + length(rd.soil_water_cons) >0 then true else false end\r\n--      as uses_nrm_techniques,\r\n    case when (case when biological_methods is null or biological_methods in ('None') or biological_methods  = '[\"None\"]' then 0 else length(biological_methods) end) + (case when gully_methods is null or gully_methods in ('None') or gully_methods  = '[\"None\"]' then 0 else length(gully_methods) end) + (case when soil_water_cons is null or soil_water_cons in ('None') or soil_water_cons  = '[\"None\"]' then 0 else length(soil_water_cons) end) >0 then true else false end\r\n      as uses_nrm_techniques,\r\n    case when (case when biological_methods is null or biological_methods in ('None') or biological_methods  = '[\"None\"]' then 0 else length(biological_methods) end) >0 then true else false end\r\n      as uses_bio_techniques,\r\n    case when (case when soil_water_cons is null or soil_water_cons in ('None') or soil_water_cons  = '[\"None\"]' then 0 else length(soil_water_cons) end) >0 then true else false end\r\n      as uses_swc_techniques,\r\n    case when (case when gully_methods is null or gully_methods in ('None') or gully_methods  = '[\"None\"]' then 0 else length(gully_methods) end) >0 then true else false end\r\n      as uses_gully_techniques,\r\n (     \r\n{% for field in forest_governance_fields %}\r\n  coalesce(\r\n  case \r\n  when {{field}} in ('Y', 'equal_access', 'very_well', 'yes','completely') then 3\r\n  when {{field}} in ('little_access', 'moderate', 'lot' ) then 2\r\n  when {{field}} in ('little', 'N','no', 'no_access', 'do_not_know', 'not') then 1  {# assumes not know = 1 #}\r\n  else null end,0)   {# assumes no fields are missing. if any field in the set is missing, skips the entire household #}\r\n  {% if not loop.last -%}\r\n    +\r\n  {%- endif -%}\r\n{% endfor %}\r\n )/ 21.0 as governance_score,\r\n ( \r\n{% for field in vcc_fields %}\r\n  coalesce(\r\n  case\r\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and {{field}} = 'none' then 1\r\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and {{field}} = 'little' then 2\r\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and {{field}} = 'moderate' then 2 \r\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and {{field}} = 'equal' then 3 \r\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and {{field}} = 'more_than' then 4 \r\n  else null end,0)   {# assumes no fields are missing. if any field in the set is missing, skips the entire household #}\r\n  {% if not loop.last -%}\r\n    +\r\n  {%- endif -%}\r\n{% endfor %}\r\n  ) / 21.0 as vcc_score,\r\n ( \r\n{% for field in vcc_fields %}\r\n  coalesce(\r\n  case\r\n    when {{field}} = 'none' then 1\r\n    when {{field}} = 'little' then 2\r\n    when {{field}} = 'moderate' then 2 \r\n    when {{field}} = 'equal' then 3 \r\n    when {{field}} = 'more_than' then 4 \r\n else null end,0)   {# assumes no fields are missing. if any field in the set is missing, skips the entire household #}\r\n  {% if not loop.last -%}\r\n    +\r\n  {%- endif -%}\r\n{% endfor %}\r\n  ) / 21.0 as vcc_score_all,\r\n\r\n{% for field in disability_fields %}  \r\ncoalesce(\r\ncase \r\n  when {{field}} in ('some_difficulty', 'lot_difficulty', 'impossible') then 1\r\n  else null end,0)\r\n{% if not loop.last -%}\r\n    +\r\n  {%- endif -%}\r\n{% endfor %}  as disability_score,\r\n\r\n{% for field in disability_fields %}  \r\ncoalesce(\r\ncase \r\n  when {{field}} in ('lot_difficulty', 'impossible') then 1\r\n  else null end,0)\r\n{% if not loop.last -%}\r\n    +\r\n  {%- endif -%}\r\n{% endfor %}  as severely_disabled, \r\ncase when biological_methods is null or biological_methods in ('None') or biological_methods  = '[\"None\"]' then 0 else array_length(regexp_split_to_array(replace(replace(replace(replace(rd.biological_methods,'[',''),']',''),'\"',''),',',''),' '),1) end as biological_methods_count,\r\ncase when gully_methods is null or gully_methods in ('None') or gully_methods  = '[\"None\"]' then 0 else array_length(regexp_split_to_array(replace(replace(replace(replace(rd.gully_methods,'[',''),']',''),'\"',''),',',''),' '),1) end as gully_methods_count,\r\ncase when rd.soil_water_cons is null or rd.soil_water_cons in ('None') or rd.soil_water_cons  = '[\"None\"]' then 0 else array_length(regexp_split_to_array(replace(replace(replace(replace(rd.soil_water_cons,'[',''),']',''),'\"',''),',',''),' '),1) end as soil_water_cons_count,\r\nCASE \r\n    when rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female') then 'Female'\r\n    when rd.respondentsex in ('M','male','m','Male') or rd.beneficiary_gender in ('M','male','m','Male') then 'Male'\r\n    else 'Unknown' \r\nend as gender, --BAO gender to limit measures in Akuko\r\ncase \r\nwhen rd.respondentsex in ('F','female','f','Female') and rd.respondent_ntfp in ('same_person') then 'Female'\r\nwhen rd.respondent_ntfp in ('senior_woman','young_woman') then 'Female'\r\nelse 'Male'\r\nend as vcc_gender\r\nfrom rhomis_data rd\r\n ),\r\nquarter_aggregate as(\r\n    select distinct\r\n    cf.form_id,\r\ncase \r\n    when quarter_count>=max(quarter_count) OVER (PARTITION BY cf.form_id) then cf.assessment_quarter_date\r\nelse null\r\nend as max_quarter_date\r\nfrom calculated_fields cf\r\n)\r\n---Selecting the relevant fields\r\nselect \r\ncf.row_id,\t\r\ncf.form_name,\r\ncf.timing,\r\ncf.year,\r\ncf.country,\r\ncf.iso_country_code,\r\ncf.project_code,\r\ncf.form_id,\r\ncf.submission_id,\r\ninitcap(replace(cf.region,'_',' ')) as region,\r\ninitcap(replace(cf.province,'_',' ')) as province,\r\ninitcap(replace(cf.commune,'_',' ')) as commune,\r\ncf.date_assessment,\r\ncf.biological_methods,\r\ncf.biological_methods_count,\r\ncf.gully_methods,\r\ncf.gully_methods_count,\r\ncf.soil_water_cons,\r\ncf.soil_water_cons_count,\r\ncf.gender,\r\ncf.vcc_gender,\r\n--cf.respondentsex, BAO replace this with gender to limit measures in Akuko\r\ncf.respondent_ntfp,\r\ncase \r\n  when beneficiary_control in ('Y','yes','y','Yes') then 'Yes'\r\n  when beneficiary_control in ('N','no','n','No') then 'No'\r\nelse 'Yes' end as beneficiary_control,\r\ncf.hdds_good_season,\r\n--cf.hdds_bad_season,\r\n-- cf.total_income_per_year,\r\n-- cf.total_income_with_ntfp_per_year,\r\n-- cf.ntfp_income_per_year,\r\n-- cf.crop_income_per_year,\r\n-- cf.livestock_income_per_year,\r\n-- cf.off_farm_income_per_year,\r\n{% for field in income_fields %}  \r\n    case when cf.total_income_with_ntfp_per_year > 50000 then null else cf.{{field}} end as {{field}},\r\n{% if not loop.last -%}\r\n    +\r\n  {%- endif -%}\r\n{% endfor %}\r\n-- BAO Request from TreeAid to maintain records with an income > 50000 but nullify these income fields so they don't skew income analysis\r\ncf.value_crop_consumed_lcu_per_hh_per_year,\r\ncf.value_livestock_products_consumed_lcu_per_hh_per_year,\r\ncf.value_farm_products_consumed_lcu_per_hh_per_year,\r\ncf.crop_consumed_calories_kcal_per_hh_per_year,\r\ncf.farm_products_consumed_calories_kcal_per_hh_per_year,\r\ncf.value_ntfp_consumed,\r\ncf.ntfp_consumed_calories_kcal_per_hh_per_year,\r\ncf.firewood_consumed_kgs_per_hh_per_day,\r\ncf.nr_months_food_shortage,\r\ncf.extreme_poverty,\r\ncf.extreme_poverty_TVA_incl, -- GN added\t\r\ncf.below_calline,\r\ncf.below_calline_potential,\r\ncf.proportion_ntfp_in_diet,\r\ncf.proportion_ntfp_in_diet_potential,\r\ncf.food_insecurity_status,\r\ncf.uses_nrm_techniques,\r\ncf.uses_bio_techniques, -- GN added\r\ncf.uses_swc_techniques, -- GN added \r\ncf.uses_gully_techniques, -- GN added\r\ncf.governance_score,\r\ncf.vcc_score,\r\ncf.vcc_score_all,\r\ncf.disability_score,\r\ncf.severely_disabled,\r\ncf.seeing,\r\ncf.hearing,\r\ncf.walking,\r\ncf.memory,\r\ncf.self_care,\r\ncf.language as language_disability,\r\ncf.survey_length_minutes,\r\nextract('Year' from cf.date_assessment::date) as assessment_year,\r\ndate_trunc('year',cf.date_assessment::date) as assessment_year_date,\r\nassessment_quarter_date,\r\nqa.max_quarter_date,\r\n Case\r\n         when extract(month from max_quarter_date) in (1,2,3) then Concat('Jan - Mar ',extract('Year' from max_quarter_date))\r\n         when extract(month from max_quarter_date) in (4,5,6) then Concat('Apr - Jun ',extract('Year' from max_quarter_date))\r\n         when extract(month from max_quarter_date) in (7,8,9) then Concat('Jul - Sep ',extract('Year' from max_quarter_date))\r\n         when extract(month from max_quarter_date) in (10,11,12) then Concat('Oct - Dec ',extract('Year' from max_quarter_date))\r\nend as max_quarter_name,\r\ncf.hdds_bad_season,\r\ncf.quality_rapport,\r\ncf.quality_reliability,\r\ncf.quality_rapport_resp2,\r\ncf.quality_reliability_resp2,\r\ncase -- add a test field to get test indicators BAO\r\n    when ((cf.test is null ) or (cf.test not in ('y', 'Y','yes','Yes')) ) then false\r\n    else true\r\nend as test_check\r\nfrom calculated_fields cf\r\nleft join quarter_aggregate qa on qa.form_id=cf.form_id and qa.max_quarter_date is not null\r\nwhere cf.form_id is not null -- filters forms that don't have survey definitions yet\r\n--and ((cf.test is null ) or (cf.test not in ('y', 'Y','yes','Yes')) ) -- BAO add a test field to get test indicators\r\nand (cf.nr_months_food_shortage <='12' or cf.nr_months_food_shortage is null) -- and (cf.total_income_with_ntfp_per_year <='50000' or cf.total_income_with_ntfp_per_year is null)\r\n-- TBD - BAO removing filter to keep records with these data points and instead null the income fields above\r\nand (cf.hdds_good_season <='12' or cf.hdds_good_season is null) -- and cf.form_id='697818' --for quarter date QA\r\n---and firewood_consumed_kgs_per_hh_per_day <='25'\r\nand cf.form_id <> '636755' -- BAO removing MB6 midline", "language": "sql", "refs": [{"name": "stg_rhomis_data", "package": null, "version": null}, {"name": "stg_rhomis_indicators", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.tree_aid.stg_rhomis_data", "model.tree_aid.stg_rhomis_indicators"]}, "compiled_path": "target/compiled/tree_aid/models/marts/rhomis_surveys.sql", "compiled": true, "compiled_code": "--  Joining rhomis data with already calculated rhomis indicators\nwith rhomis_data as \n(select \n*\nfrom \"tree_aid\".\"dbt_bokidi\".\"stg_rhomis_data\" rd \nleft join \"tree_aid\".\"dbt_bokidi\".\"stg_rhomis_indicators\" ri on rd.form_id::int = ri.id_rhomis_dataset::int and rd.row_id::int = ri.id_hh::int\n) ,\n\n----Calculating the fields relevant for indicator building\ncalculated_fields as \n(\nselect\n*,\ncount(rd.assessment_quarter_date::date) OVER (PARTITION BY rd.assessment_quarter_date::date,rd.form_id) as quarter_count,\n   (rd.total_income_lcu_per_year/rd.currency_conversion_lcu_to_ppp) as total_income_per_year,\n  ((rd.total_income_lcu_per_year/rd.currency_conversion_lcu_to_ppp) + (rd.ntfp_income/rd.currency_conversion_lcu_to_ppp)) as total_income_with_ntfp_per_year,\n  (rd.ntfp_income/rd.currency_conversion_lcu_to_ppp) as ntfp_income_per_year,\n  (rd.crop_income_lcu_per_year/rd.currency_conversion_lcu_to_ppp) as crop_income_per_year,\n  (rd.livestock_income_lcu_per_year/rd.currency_conversion_lcu_to_ppp) as livestock_income_per_year,\n  (rd.off_farm_income_lcu_per_year/rd.currency_conversion_lcu_to_ppp) as off_farm_income_per_year,\n  case when (rd.total_income_lcu_per_year/rd.currency_conversion_lcu_to_ppp) + (rd.ntfp_income/rd.currency_conversion_lcu_to_ppp) / nullif((rd.hh_size_mae * 365),0) <= 1.90 then true else false end as extreme_poverty,\n  case when (rd.total_income_lcu_per_year/rd.currency_conversion_lcu_to_ppp) + (rd.ntfp_income/rd.currency_conversion_lcu_to_ppp) + (rd.value_crop_consumed_lcu_per_hh_per_year/rd.currency_conversion_lcu_to_ppp) + (rd.value_livestock_products_consumed_lcu_per_hh_per_year/rd.currency_conversion_lcu_to_ppp) + (rd.value_ntfp_consumed/rd.currency_conversion_lcu_to_ppp) / nullif((rd.hh_size_mae * 365),0) <= 1.90 then true else false end as extreme_poverty_TVA_incl, \n  case when (rd.crop_consumed_calories_kcal_per_hh_per_year is null and rd.farm_products_consumed_calories_kcal_per_hh_per_year is null and \n  (rd.foodavailability + rd.ntfp_consumed_calories_kcal_per_hh_per_year) / (rd.hh_size_mae * 365) < 2500)\n  or ((rd.crop_consumed_calories_kcal_per_hh_per_year + rd.farm_products_consumed_calories_kcal_per_hh_per_year + rd.ntfp_consumed_calories_kcal_per_hh_per_year) / (rd.hh_size_mae * 365) < 2500) then true else false end as below_calline,\n  case when (rd.crop_consumed_calories_kcal_per_hh_per_year is null and \n  (rd.foodavailability + rd.ntfp_consumed_calories_kcal_per_hh_per_year + rd.off_farm_income_lcu_per_year*(3650/121.58) + rd.livestock_income_lcu_per_year*(3650/121.58) +\n   rd.crop_income_lcu_per_year*(3650/121.58) + rd.ntfp_income*(3650/121.58)) / (rd.hh_size_mae * 365) < 2500)\n  or ((rd.crop_consumed_calories_kcal_per_hh_per_year + rd.farm_products_consumed_calories_kcal_per_hh_per_year + rd.ntfp_consumed_calories_kcal_per_hh_per_year + rd.off_farm_income_lcu_per_year*(3650/121.58) + rd.livestock_income_lcu_per_year*(3650/121.58) +\n   rd.crop_income_lcu_per_year*(3650/121.58) + rd.ntfp_income*(3650/121.58)) / (rd.hh_size_mae * 365) < 2500) then true else false end as below_calline_potential,\n  case when rd.crop_consumed_calories_kcal_per_hh_per_year is null\n  then rd.ntfp_consumed_calories_kcal_per_hh_per_year / nullif(coalesce(rd.foodavailability::float,0),0)\n  else rd.ntfp_consumed_calories_kcal_per_hh_per_year / \n    nullif(coalesce(rd.crop_consumed_calories_kcal_per_hh_per_year::float,0) + coalesce(rd.farm_products_consumed_calories_kcal_per_hh_per_year::float,0) + coalesce(rd.ntfp_consumed_calories_kcal_per_hh_per_year::float,0),0) end\n    as proportion_ntfp_in_diet,\n  case when rd.crop_consumed_calories_kcal_per_hh_per_year is null \n  then (rd.ntfp_consumed_calories_kcal_per_hh_per_year + rd.ntfp_income*(3650/121.58)) / nullif(coalesce(rd.foodavailability::float,0) + coalesce(rd.ntfp_income*(3650/121.58)::float,0)\n    + rd.off_farm_income_lcu_per_year*(3650/121.58) + rd.livestock_income_lcu_per_year*(3650/121.58) + rd.crop_income_lcu_per_year*(3650/121.58),0)\n  else (rd.ntfp_consumed_calories_kcal_per_hh_per_year + rd.ntfp_income*(3650/121.58)) / \n    nullif(coalesce(rd.crop_consumed_calories_kcal_per_hh_per_year::float,0) + coalesce(rd.farm_products_consumed_calories_kcal_per_hh_per_year::float,0) + coalesce(rd.ntfp_consumed_calories_kcal_per_hh_per_year::float,0) + coalesce(rd.ntfp_income*(3650/121.58)::float,0)\n    + rd.off_farm_income_lcu_per_year*(3650/121.58) + rd.livestock_income_lcu_per_year*(3650/121.58) + rd.crop_income_lcu_per_year*(3650/121.58),0) end\n    as proportion_ntfp_in_diet_potential,\n  coalesce ((case when rd.hfias_status='' then null else rd.hfias_status end), \n  (case when rd.fies_score::float >= 0 and rd.fies_score::float <=1 then 'Food Secure'\n    when rd.fies_score::float > 1 and rd.fies_score::float <=3 then 'Mildly Food Insecure'\n    when rd.fies_score::float >3 and rd.fies_score::float <=5 then 'Moderately Food Insecure'\n    when rd.fies_score::float >5 and rd.fies_score::float <=8 then 'Severely Food Insecure'\n    else null end)) as food_insecurity_status,\n--    case when \n--      length(rd.biological_methods) + length(rd.gully_methods) + length(rd.soil_water_cons) >0 then true else false end\n--      as uses_nrm_techniques,\n    case when (case when biological_methods is null or biological_methods in ('None') or biological_methods  = '[\"None\"]' then 0 else length(biological_methods) end) + (case when gully_methods is null or gully_methods in ('None') or gully_methods  = '[\"None\"]' then 0 else length(gully_methods) end) + (case when soil_water_cons is null or soil_water_cons in ('None') or soil_water_cons  = '[\"None\"]' then 0 else length(soil_water_cons) end) >0 then true else false end\n      as uses_nrm_techniques,\n    case when (case when biological_methods is null or biological_methods in ('None') or biological_methods  = '[\"None\"]' then 0 else length(biological_methods) end) >0 then true else false end\n      as uses_bio_techniques,\n    case when (case when soil_water_cons is null or soil_water_cons in ('None') or soil_water_cons  = '[\"None\"]' then 0 else length(soil_water_cons) end) >0 then true else false end\n      as uses_swc_techniques,\n    case when (case when gully_methods is null or gully_methods in ('None') or gully_methods  = '[\"None\"]' then 0 else length(gully_methods) end) >0 then true else false end\n      as uses_gully_techniques,\n (     \n\n  coalesce(\n  case \n  when access_permission in ('Y', 'equal_access', 'very_well', 'yes','completely') then 3\n  when access_permission in ('little_access', 'moderate', 'lot' ) then 2\n  when access_permission in ('little', 'N','no', 'no_access', 'do_not_know', 'not') then 1  \n  else null end,0)   \n  +\n  coalesce(\n  case \n  when access_equality in ('Y', 'equal_access', 'very_well', 'yes','completely') then 3\n  when access_equality in ('little_access', 'moderate', 'lot' ) then 2\n  when access_equality in ('little', 'N','no', 'no_access', 'do_not_know', 'not') then 1  \n  else null end,0)   \n  +\n  coalesce(\n  case \n  when village_engagement in ('Y', 'equal_access', 'very_well', 'yes','completely') then 3\n  when village_engagement in ('little_access', 'moderate', 'lot' ) then 2\n  when village_engagement in ('little', 'N','no', 'no_access', 'do_not_know', 'not') then 1  \n  else null end,0)   \n  +\n  coalesce(\n  case \n  when forest_management_tools_yn in ('Y', 'equal_access', 'very_well', 'yes','completely') then 3\n  when forest_management_tools_yn in ('little_access', 'moderate', 'lot' ) then 2\n  when forest_management_tools_yn in ('little', 'N','no', 'no_access', 'do_not_know', 'not') then 1  \n  else null end,0)   \n  +\n  coalesce(\n  case \n  when population_needs_met in ('Y', 'equal_access', 'very_well', 'yes','completely') then 3\n  when population_needs_met in ('little_access', 'moderate', 'lot' ) then 2\n  when population_needs_met in ('little', 'N','no', 'no_access', 'do_not_know', 'not') then 1  \n  else null end,0)   \n  +\n  coalesce(\n  case \n  when protection_actions_yn in ('Y', 'equal_access', 'very_well', 'yes','completely') then 3\n  when protection_actions_yn in ('little_access', 'moderate', 'lot' ) then 2\n  when protection_actions_yn in ('little', 'N','no', 'no_access', 'do_not_know', 'not') then 1  \n  else null end,0)   \n  +\n  coalesce(\n  case \n  when village_protection in ('Y', 'equal_access', 'very_well', 'yes','completely') then 3\n  when village_protection in ('little_access', 'moderate', 'lot' ) then 2\n  when village_protection in ('little', 'N','no', 'no_access', 'do_not_know', 'not') then 1  \n  else null end,0)   \n  \n )/ 21.0 as governance_score,\n ( \n\n  coalesce(\n  case\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and voice_hh_food = 'none' then 1\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and voice_hh_food = 'little' then 2\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and voice_hh_food = 'moderate' then 2 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and voice_hh_food = 'equal' then 3 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and voice_hh_food = 'more_than' then 4 \n  else null end,0)   \n  +\n  coalesce(\n  case\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and voice_hh_spending = 'none' then 1\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and voice_hh_spending = 'little' then 2\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and voice_hh_spending = 'moderate' then 2 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and voice_hh_spending = 'equal' then 3 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and voice_hh_spending = 'more_than' then 4 \n  else null end,0)   \n  +\n  coalesce(\n  case\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and voice_hh_crops = 'none' then 1\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and voice_hh_crops = 'little' then 2\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and voice_hh_crops = 'moderate' then 2 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and voice_hh_crops = 'equal' then 3 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and voice_hh_crops = 'more_than' then 4 \n  else null end,0)   \n  +\n  coalesce(\n  case\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and voice_hh_confidence = 'none' then 1\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and voice_hh_confidence = 'little' then 2\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and voice_hh_confidence = 'moderate' then 2 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and voice_hh_confidence = 'equal' then 3 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and voice_hh_confidence = 'more_than' then 4 \n  else null end,0)   \n  +\n  coalesce(\n  case\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and voice_comm_speaking = 'none' then 1\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and voice_comm_speaking = 'little' then 2\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and voice_comm_speaking = 'moderate' then 2 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and voice_comm_speaking = 'equal' then 3 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and voice_comm_speaking = 'more_than' then 4 \n  else null end,0)   \n  +\n  coalesce(\n  case\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and voice_comm_meetings = 'none' then 1\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and voice_comm_meetings = 'little' then 2\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and voice_comm_meetings = 'moderate' then 2 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and voice_comm_meetings = 'equal' then 3 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and voice_comm_meetings = 'more_than' then 4 \n  else null end,0)   \n  +\n  coalesce(\n  case\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and voice_comm_activities = 'none' then 1\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and voice_comm_activities = 'little' then 2\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and voice_comm_activities = 'moderate' then 2 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and voice_comm_activities = 'equal' then 3 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and voice_comm_activities = 'more_than' then 4 \n  else null end,0)   \n  +\n  coalesce(\n  case\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and choice_hh_training = 'none' then 1\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and choice_hh_training = 'little' then 2\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and choice_hh_training = 'moderate' then 2 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and choice_hh_training = 'equal' then 3 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and choice_hh_training = 'more_than' then 4 \n  else null end,0)   \n  +\n  coalesce(\n  case\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and choice_hh_decisions = 'none' then 1\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and choice_hh_decisions = 'little' then 2\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and choice_hh_decisions = 'moderate' then 2 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and choice_hh_decisions = 'equal' then 3 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and choice_hh_decisions = 'more_than' then 4 \n  else null end,0)   \n  +\n  coalesce(\n  case\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and choice_hh_income_women = 'none' then 1\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and choice_hh_income_women = 'little' then 2\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and choice_hh_income_women = 'moderate' then 2 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and choice_hh_income_women = 'equal' then 3 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and choice_hh_income_women = 'more_than' then 4 \n  else null end,0)   \n  +\n  coalesce(\n  case\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and choice_comm_market = 'none' then 1\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and choice_comm_market = 'little' then 2\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and choice_comm_market = 'moderate' then 2 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and choice_comm_market = 'equal' then 3 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and choice_comm_market = 'more_than' then 4 \n  else null end,0)   \n  +\n  coalesce(\n  case\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and choice_comm_committee = 'none' then 1\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and choice_comm_committee = 'little' then 2\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and choice_comm_committee = 'moderate' then 2 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and choice_comm_committee = 'equal' then 3 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and choice_comm_committee = 'more_than' then 4 \n  else null end,0)   \n  +\n  coalesce(\n  case\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_hh_farm_land = 'none' then 1\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_hh_farm_land = 'little' then 2\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_hh_farm_land = 'moderate' then 2 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_hh_farm_land = 'equal' then 3 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_hh_farm_land = 'more_than' then 4 \n  else null end,0)   \n  +\n  coalesce(\n  case\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_hh_comm_land = 'none' then 1\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_hh_comm_land = 'little' then 2\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_hh_comm_land = 'moderate' then 2 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_hh_comm_land = 'equal' then 3 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_hh_comm_land = 'more_than' then 4 \n  else null end,0)   \n  +\n  coalesce(\n  case\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_hh_assets = 'none' then 1\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_hh_assets = 'little' then 2\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_hh_assets = 'moderate' then 2 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_hh_assets = 'equal' then 3 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_hh_assets = 'more_than' then 4 \n  else null end,0)   \n  +\n  coalesce(\n  case\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_hh_livestock = 'none' then 1\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_hh_livestock = 'little' then 2\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_hh_livestock = 'moderate' then 2 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_hh_livestock = 'equal' then 3 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_hh_livestock = 'more_than' then 4 \n  else null end,0)   \n  +\n  coalesce(\n  case\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_hh_trees = 'none' then 1\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_hh_trees = 'little' then 2\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_hh_trees = 'moderate' then 2 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_hh_trees = 'equal' then 3 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_hh_trees = 'more_than' then 4 \n  else null end,0)   \n  +\n  coalesce(\n  case\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_hh_savings = 'none' then 1\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_hh_savings = 'little' then 2\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_hh_savings = 'moderate' then 2 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_hh_savings = 'equal' then 3 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_hh_savings = 'more_than' then 4 \n  else null end,0)   \n  +\n  coalesce(\n  case\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_comm_resources = 'none' then 1\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_comm_resources = 'little' then 2\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_comm_resources = 'moderate' then 2 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_comm_resources = 'equal' then 3 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_comm_resources = 'more_than' then 4 \n  else null end,0)   \n  +\n  coalesce(\n  case\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_comm_leadership = 'none' then 1\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_comm_leadership = 'little' then 2\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_comm_leadership = 'moderate' then 2 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_comm_leadership = 'equal' then 3 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_comm_leadership = 'more_than' then 4 \n  else null end,0)   \n  +\n  coalesce(\n  case\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_comm_by_laws = 'none' then 1\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_comm_by_laws = 'little' then 2\n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_comm_by_laws = 'moderate' then 2 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_comm_by_laws = 'equal' then 3 \n    when (rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female')) and rd.respondent_ntfp in ('same_person') or rd.respondent_ntfp in ('senior_woman','young_woman') and control_comm_by_laws = 'more_than' then 4 \n  else null end,0)   \n  \n  ) / 21.0 as vcc_score,\n ( \n\n  coalesce(\n  case\n    when voice_hh_food = 'none' then 1\n    when voice_hh_food = 'little' then 2\n    when voice_hh_food = 'moderate' then 2 \n    when voice_hh_food = 'equal' then 3 \n    when voice_hh_food = 'more_than' then 4 \n else null end,0)   \n  +\n  coalesce(\n  case\n    when voice_hh_spending = 'none' then 1\n    when voice_hh_spending = 'little' then 2\n    when voice_hh_spending = 'moderate' then 2 \n    when voice_hh_spending = 'equal' then 3 \n    when voice_hh_spending = 'more_than' then 4 \n else null end,0)   \n  +\n  coalesce(\n  case\n    when voice_hh_crops = 'none' then 1\n    when voice_hh_crops = 'little' then 2\n    when voice_hh_crops = 'moderate' then 2 \n    when voice_hh_crops = 'equal' then 3 \n    when voice_hh_crops = 'more_than' then 4 \n else null end,0)   \n  +\n  coalesce(\n  case\n    when voice_hh_confidence = 'none' then 1\n    when voice_hh_confidence = 'little' then 2\n    when voice_hh_confidence = 'moderate' then 2 \n    when voice_hh_confidence = 'equal' then 3 \n    when voice_hh_confidence = 'more_than' then 4 \n else null end,0)   \n  +\n  coalesce(\n  case\n    when voice_comm_speaking = 'none' then 1\n    when voice_comm_speaking = 'little' then 2\n    when voice_comm_speaking = 'moderate' then 2 \n    when voice_comm_speaking = 'equal' then 3 \n    when voice_comm_speaking = 'more_than' then 4 \n else null end,0)   \n  +\n  coalesce(\n  case\n    when voice_comm_meetings = 'none' then 1\n    when voice_comm_meetings = 'little' then 2\n    when voice_comm_meetings = 'moderate' then 2 \n    when voice_comm_meetings = 'equal' then 3 \n    when voice_comm_meetings = 'more_than' then 4 \n else null end,0)   \n  +\n  coalesce(\n  case\n    when voice_comm_activities = 'none' then 1\n    when voice_comm_activities = 'little' then 2\n    when voice_comm_activities = 'moderate' then 2 \n    when voice_comm_activities = 'equal' then 3 \n    when voice_comm_activities = 'more_than' then 4 \n else null end,0)   \n  +\n  coalesce(\n  case\n    when choice_hh_training = 'none' then 1\n    when choice_hh_training = 'little' then 2\n    when choice_hh_training = 'moderate' then 2 \n    when choice_hh_training = 'equal' then 3 \n    when choice_hh_training = 'more_than' then 4 \n else null end,0)   \n  +\n  coalesce(\n  case\n    when choice_hh_decisions = 'none' then 1\n    when choice_hh_decisions = 'little' then 2\n    when choice_hh_decisions = 'moderate' then 2 \n    when choice_hh_decisions = 'equal' then 3 \n    when choice_hh_decisions = 'more_than' then 4 \n else null end,0)   \n  +\n  coalesce(\n  case\n    when choice_hh_income_women = 'none' then 1\n    when choice_hh_income_women = 'little' then 2\n    when choice_hh_income_women = 'moderate' then 2 \n    when choice_hh_income_women = 'equal' then 3 \n    when choice_hh_income_women = 'more_than' then 4 \n else null end,0)   \n  +\n  coalesce(\n  case\n    when choice_comm_market = 'none' then 1\n    when choice_comm_market = 'little' then 2\n    when choice_comm_market = 'moderate' then 2 \n    when choice_comm_market = 'equal' then 3 \n    when choice_comm_market = 'more_than' then 4 \n else null end,0)   \n  +\n  coalesce(\n  case\n    when choice_comm_committee = 'none' then 1\n    when choice_comm_committee = 'little' then 2\n    when choice_comm_committee = 'moderate' then 2 \n    when choice_comm_committee = 'equal' then 3 \n    when choice_comm_committee = 'more_than' then 4 \n else null end,0)   \n  +\n  coalesce(\n  case\n    when control_hh_farm_land = 'none' then 1\n    when control_hh_farm_land = 'little' then 2\n    when control_hh_farm_land = 'moderate' then 2 \n    when control_hh_farm_land = 'equal' then 3 \n    when control_hh_farm_land = 'more_than' then 4 \n else null end,0)   \n  +\n  coalesce(\n  case\n    when control_hh_comm_land = 'none' then 1\n    when control_hh_comm_land = 'little' then 2\n    when control_hh_comm_land = 'moderate' then 2 \n    when control_hh_comm_land = 'equal' then 3 \n    when control_hh_comm_land = 'more_than' then 4 \n else null end,0)   \n  +\n  coalesce(\n  case\n    when control_hh_assets = 'none' then 1\n    when control_hh_assets = 'little' then 2\n    when control_hh_assets = 'moderate' then 2 \n    when control_hh_assets = 'equal' then 3 \n    when control_hh_assets = 'more_than' then 4 \n else null end,0)   \n  +\n  coalesce(\n  case\n    when control_hh_livestock = 'none' then 1\n    when control_hh_livestock = 'little' then 2\n    when control_hh_livestock = 'moderate' then 2 \n    when control_hh_livestock = 'equal' then 3 \n    when control_hh_livestock = 'more_than' then 4 \n else null end,0)   \n  +\n  coalesce(\n  case\n    when control_hh_trees = 'none' then 1\n    when control_hh_trees = 'little' then 2\n    when control_hh_trees = 'moderate' then 2 \n    when control_hh_trees = 'equal' then 3 \n    when control_hh_trees = 'more_than' then 4 \n else null end,0)   \n  +\n  coalesce(\n  case\n    when control_hh_savings = 'none' then 1\n    when control_hh_savings = 'little' then 2\n    when control_hh_savings = 'moderate' then 2 \n    when control_hh_savings = 'equal' then 3 \n    when control_hh_savings = 'more_than' then 4 \n else null end,0)   \n  +\n  coalesce(\n  case\n    when control_comm_resources = 'none' then 1\n    when control_comm_resources = 'little' then 2\n    when control_comm_resources = 'moderate' then 2 \n    when control_comm_resources = 'equal' then 3 \n    when control_comm_resources = 'more_than' then 4 \n else null end,0)   \n  +\n  coalesce(\n  case\n    when control_comm_leadership = 'none' then 1\n    when control_comm_leadership = 'little' then 2\n    when control_comm_leadership = 'moderate' then 2 \n    when control_comm_leadership = 'equal' then 3 \n    when control_comm_leadership = 'more_than' then 4 \n else null end,0)   \n  +\n  coalesce(\n  case\n    when control_comm_by_laws = 'none' then 1\n    when control_comm_by_laws = 'little' then 2\n    when control_comm_by_laws = 'moderate' then 2 \n    when control_comm_by_laws = 'equal' then 3 \n    when control_comm_by_laws = 'more_than' then 4 \n else null end,0)   \n  \n  ) / 21.0 as vcc_score_all,\n\n  \ncoalesce(\ncase \n  when seeing in ('some_difficulty', 'lot_difficulty', 'impossible') then 1\n  else null end,0)\n+  \ncoalesce(\ncase \n  when hearing in ('some_difficulty', 'lot_difficulty', 'impossible') then 1\n  else null end,0)\n+  \ncoalesce(\ncase \n  when walking in ('some_difficulty', 'lot_difficulty', 'impossible') then 1\n  else null end,0)\n+  \ncoalesce(\ncase \n  when memory in ('some_difficulty', 'lot_difficulty', 'impossible') then 1\n  else null end,0)\n+  \ncoalesce(\ncase \n  when self_care in ('some_difficulty', 'lot_difficulty', 'impossible') then 1\n  else null end,0)\n+  \ncoalesce(\ncase \n  when language in ('some_difficulty', 'lot_difficulty', 'impossible') then 1\n  else null end,0)\n  as disability_score,\n\n  \ncoalesce(\ncase \n  when seeing in ('lot_difficulty', 'impossible') then 1\n  else null end,0)\n+  \ncoalesce(\ncase \n  when hearing in ('lot_difficulty', 'impossible') then 1\n  else null end,0)\n+  \ncoalesce(\ncase \n  when walking in ('lot_difficulty', 'impossible') then 1\n  else null end,0)\n+  \ncoalesce(\ncase \n  when memory in ('lot_difficulty', 'impossible') then 1\n  else null end,0)\n+  \ncoalesce(\ncase \n  when self_care in ('lot_difficulty', 'impossible') then 1\n  else null end,0)\n+  \ncoalesce(\ncase \n  when language in ('lot_difficulty', 'impossible') then 1\n  else null end,0)\n  as severely_disabled, \ncase when biological_methods is null or biological_methods in ('None') or biological_methods  = '[\"None\"]' then 0 else array_length(regexp_split_to_array(replace(replace(replace(replace(rd.biological_methods,'[',''),']',''),'\"',''),',',''),' '),1) end as biological_methods_count,\ncase when gully_methods is null or gully_methods in ('None') or gully_methods  = '[\"None\"]' then 0 else array_length(regexp_split_to_array(replace(replace(replace(replace(rd.gully_methods,'[',''),']',''),'\"',''),',',''),' '),1) end as gully_methods_count,\ncase when rd.soil_water_cons is null or rd.soil_water_cons in ('None') or rd.soil_water_cons  = '[\"None\"]' then 0 else array_length(regexp_split_to_array(replace(replace(replace(replace(rd.soil_water_cons,'[',''),']',''),'\"',''),',',''),' '),1) end as soil_water_cons_count,\nCASE \n    when rd.respondentsex in ('F','female','f','Female') or rd.beneficiary_gender in ('F','female','f','Female') then 'Female'\n    when rd.respondentsex in ('M','male','m','Male') or rd.beneficiary_gender in ('M','male','m','Male') then 'Male'\n    else 'Unknown' \nend as gender, --BAO gender to limit measures in Akuko\ncase \nwhen rd.respondentsex in ('F','female','f','Female') and rd.respondent_ntfp in ('same_person') then 'Female'\nwhen rd.respondent_ntfp in ('senior_woman','young_woman') then 'Female'\nelse 'Male'\nend as vcc_gender\nfrom rhomis_data rd\n ),\nquarter_aggregate as(\n    select distinct\n    cf.form_id,\ncase \n    when quarter_count>=max(quarter_count) OVER (PARTITION BY cf.form_id) then cf.assessment_quarter_date\nelse null\nend as max_quarter_date\nfrom calculated_fields cf\n)\n---Selecting the relevant fields\nselect \ncf.row_id,\t\ncf.form_name,\ncf.timing,\ncf.year,\ncf.country,\ncf.iso_country_code,\ncf.project_code,\ncf.form_id,\ncf.submission_id,\ninitcap(replace(cf.region,'_',' ')) as region,\ninitcap(replace(cf.province,'_',' ')) as province,\ninitcap(replace(cf.commune,'_',' ')) as commune,\ncf.date_assessment,\ncf.biological_methods,\ncf.biological_methods_count,\ncf.gully_methods,\ncf.gully_methods_count,\ncf.soil_water_cons,\ncf.soil_water_cons_count,\ncf.gender,\ncf.vcc_gender,\n--cf.respondentsex, BAO replace this with gender to limit measures in Akuko\ncf.respondent_ntfp,\ncase \n  when beneficiary_control in ('Y','yes','y','Yes') then 'Yes'\n  when beneficiary_control in ('N','no','n','No') then 'No'\nelse 'Yes' end as beneficiary_control,\ncf.hdds_good_season,\n--cf.hdds_bad_season,\n-- cf.total_income_per_year,\n-- cf.total_income_with_ntfp_per_year,\n-- cf.ntfp_income_per_year,\n-- cf.crop_income_per_year,\n-- cf.livestock_income_per_year,\n-- cf.off_farm_income_per_year,\n  \n    case when cf.total_income_with_ntfp_per_year > 50000 then null else cf.total_income_per_year end as total_income_per_year,\n+  \n    case when cf.total_income_with_ntfp_per_year > 50000 then null else cf.total_income_with_ntfp_per_year end as total_income_with_ntfp_per_year,\n+  \n    case when cf.total_income_with_ntfp_per_year > 50000 then null else cf.ntfp_income_per_year end as ntfp_income_per_year,\n+  \n    case when cf.total_income_with_ntfp_per_year > 50000 then null else cf.crop_income_per_year end as crop_income_per_year,\n+  \n    case when cf.total_income_with_ntfp_per_year > 50000 then null else cf.livestock_income_per_year end as livestock_income_per_year,\n+  \n    case when cf.total_income_with_ntfp_per_year > 50000 then null else cf.off_farm_income_per_year end as off_farm_income_per_year,\n\n-- BAO Request from TreeAid to maintain records with an income > 50000 but nullify these income fields so they don't skew income analysis\ncf.value_crop_consumed_lcu_per_hh_per_year,\ncf.value_livestock_products_consumed_lcu_per_hh_per_year,\ncf.value_farm_products_consumed_lcu_per_hh_per_year,\ncf.crop_consumed_calories_kcal_per_hh_per_year,\ncf.farm_products_consumed_calories_kcal_per_hh_per_year,\ncf.value_ntfp_consumed,\ncf.ntfp_consumed_calories_kcal_per_hh_per_year,\ncf.firewood_consumed_kgs_per_hh_per_day,\ncf.nr_months_food_shortage,\ncf.extreme_poverty,\ncf.extreme_poverty_TVA_incl, -- GN added\t\ncf.below_calline,\ncf.below_calline_potential,\ncf.proportion_ntfp_in_diet,\ncf.proportion_ntfp_in_diet_potential,\ncf.food_insecurity_status,\ncf.uses_nrm_techniques,\ncf.uses_bio_techniques, -- GN added\ncf.uses_swc_techniques, -- GN added \ncf.uses_gully_techniques, -- GN added\ncf.governance_score,\ncf.vcc_score,\ncf.vcc_score_all,\ncf.disability_score,\ncf.severely_disabled,\ncf.seeing,\ncf.hearing,\ncf.walking,\ncf.memory,\ncf.self_care,\ncf.language as language_disability,\ncf.survey_length_minutes,\nextract('Year' from cf.date_assessment::date) as assessment_year,\ndate_trunc('year',cf.date_assessment::date) as assessment_year_date,\nassessment_quarter_date,\nqa.max_quarter_date,\n Case\n         when extract(month from max_quarter_date) in (1,2,3) then Concat('Jan - Mar ',extract('Year' from max_quarter_date))\n         when extract(month from max_quarter_date) in (4,5,6) then Concat('Apr - Jun ',extract('Year' from max_quarter_date))\n         when extract(month from max_quarter_date) in (7,8,9) then Concat('Jul - Sep ',extract('Year' from max_quarter_date))\n         when extract(month from max_quarter_date) in (10,11,12) then Concat('Oct - Dec ',extract('Year' from max_quarter_date))\nend as max_quarter_name,\ncf.hdds_bad_season,\ncf.quality_rapport,\ncf.quality_reliability,\ncf.quality_rapport_resp2,\ncf.quality_reliability_resp2,\ncase -- add a test field to get test indicators BAO\n    when ((cf.test is null ) or (cf.test not in ('y', 'Y','yes','Yes')) ) then false\n    else true\nend as test_check\nfrom calculated_fields cf\nleft join quarter_aggregate qa on qa.form_id=cf.form_id and qa.max_quarter_date is not null\nwhere cf.form_id is not null -- filters forms that don't have survey definitions yet\n--and ((cf.test is null ) or (cf.test not in ('y', 'Y','yes','Yes')) ) -- BAO add a test field to get test indicators\nand (cf.nr_months_food_shortage <='12' or cf.nr_months_food_shortage is null) -- and (cf.total_income_with_ntfp_per_year <='50000' or cf.total_income_with_ntfp_per_year is null)\n-- TBD - BAO removing filter to keep records with these data points and instead null the income fields above\nand (cf.hdds_good_season <='12' or cf.hdds_good_season is null) -- and cf.form_id='697818' --for quarter date QA\n---and firewood_consumed_kgs_per_hh_per_day <='25'\nand cf.form_id <> '636755' -- BAO removing MB6 midline", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}}, "sources": {"source.tree_aid.onadata.registry": {"database": "tree_aid", "schema": "onadata", "name": "registry", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.registry", "fqn": ["tree_aid", "staging", "onadata", "registry"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "registry", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "List of choice labels in Json format", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"registry\"", "created_at": 1697110854.128258}, "source.tree_aid.onadata.gb8_vte_edp_survey_apr-jun2022": {"database": "tree_aid", "schema": "onadata", "name": "gb8_vte_edp_survey_apr-jun2022", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.gb8_vte_edp_survey_apr-jun2022", "fqn": ["tree_aid", "staging", "onadata", "gb8_vte_edp_survey_apr-jun2022"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "gb8_vte_edp_survey_apr-jun2022", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"gb8_vte_edp_survey_apr-jun2022\"", "created_at": 1697110854.1346319}, "source.tree_aid.onadata.mb6_vte_edp_survey_apr-jun2022": {"database": "tree_aid", "schema": "onadata", "name": "mb6_vte_edp_survey_apr-jun2022", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.mb6_vte_edp_survey_apr-jun2022", "fqn": ["tree_aid", "staging", "onadata", "mb6_vte_edp_survey_apr-jun2022"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "mb6_vte_edp_survey_apr-jun2022", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"mb6_vte_edp_survey_apr-jun2022\"", "created_at": 1697110854.14068}, "source.tree_aid.onadata.a_village_tree_enterprise_co-op_mb2_mali": {"database": "tree_aid", "schema": "onadata", "name": "a_village_tree_enterprise_co-op_mb2_mali", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.a_village_tree_enterprise_co-op_mb2_mali", "fqn": ["tree_aid", "staging", "onadata", "a_village_tree_enterprise_co-op_mb2_mali"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "a_village_tree_enterprise_co-op_mb2_mali", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"a_village_tree_enterprise_co-op_mb2_mali\"", "created_at": 1697110854.1471174}, "source.tree_aid.onadata.a_vte_coop_assessment_gb1": {"database": "tree_aid", "schema": "onadata", "name": "a_vte_coop_assessment_gb1", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.a_vte_coop_assessment_gb1", "fqn": ["tree_aid", "staging", "onadata", "a_vte_coop_assessment_gb1"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "a_vte_coop_assessment_gb1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"a_vte_coop_assessment_gb1\"", "created_at": 1697110854.153027}, "source.tree_aid.onadata.tree_aid_rhomis_bc4_apr-jun22_final": {"database": "tree_aid", "schema": "onadata", "name": "tree_aid_rhomis_bc4_apr-jun22_final", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.tree_aid_rhomis_bc4_apr-jun22_final", "fqn": ["tree_aid", "staging", "onadata", "tree_aid_rhomis_bc4_apr-jun22_final"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "tree_aid_rhomis_bc4_apr-jun22_final", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"tree_aid_rhomis_bc4_apr-jun22_final\"", "created_at": 1697110854.1592944}, "source.tree_aid.onadata.burkina_ta_bb1_v1_3_1_tablet": {"database": "tree_aid", "schema": "onadata", "name": "burkina_ta_bb1_v1_3_1_tablet", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.burkina_ta_bb1_v1_3_1_tablet", "fqn": ["tree_aid", "staging", "onadata", "burkina_ta_bb1_v1_3_1_tablet"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "burkina_ta_bb1_v1_3_1_tablet", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"burkina_ta_bb1_v1_3_1_tablet\"", "created_at": 1697110854.16392}, "source.tree_aid.onadata.burkina_ta_baseline_v1_3_webform": {"database": "tree_aid", "schema": "onadata", "name": "burkina_ta_baseline_v1_3_webform", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.burkina_ta_baseline_v1_3_webform", "fqn": ["tree_aid", "staging", "onadata", "burkina_ta_baseline_v1_3_webform"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "burkina_ta_baseline_v1_3_webform", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"burkina_ta_baseline_v1_3_webform\"", "created_at": 1697110854.1688929}, "source.tree_aid.onadata.ta_rho_mis_bb6_oct_dec21": {"database": "tree_aid", "schema": "onadata", "name": "ta_rho_mis_bb6_oct_dec21", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.ta_rho_mis_bb6_oct_dec21", "fqn": ["tree_aid", "staging", "onadata", "ta_rho_mis_bb6_oct_dec21"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "ta_rho_mis_bb6_oct_dec21", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"ta_rho_mis_bb6_oct_dec21\"", "created_at": 1697110854.172913}, "source.tree_aid.onadata.ta_rho_mis_bc1_endline_oct2020_final": {"database": "tree_aid", "schema": "onadata", "name": "ta_rho_mis_bc1_endline_oct2020_final", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.ta_rho_mis_bc1_endline_oct2020_final", "fqn": ["tree_aid", "staging", "onadata", "ta_rho_mis_bc1_endline_oct2020_final"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "ta_rho_mis_bc1_endline_oct2020_final", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"ta_rho_mis_bc1_endline_oct2020_final\"", "created_at": 1697110854.177191}, "source.tree_aid.onadata.household_income_mtr_bc1": {"database": "tree_aid", "schema": "onadata", "name": "household_income_mtr_bc1", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.household_income_mtr_bc1", "fqn": ["tree_aid", "staging", "onadata", "household_income_mtr_bc1"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "household_income_mtr_bc1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"household_income_mtr_bc1\"", "created_at": 1697110854.1811829}, "source.tree_aid.onadata.voice_choice_control_mtr_bc1": {"database": "tree_aid", "schema": "onadata", "name": "voice_choice_control_mtr_bc1", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.voice_choice_control_mtr_bc1", "fqn": ["tree_aid", "staging", "onadata", "voice_choice_control_mtr_bc1"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "voice_choice_control_mtr_bc1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"voice_choice_control_mtr_bc1\"", "created_at": 1697110854.1854677}, "source.tree_aid.onadata.ta_rhomis_eco_q1_2022": {"database": "tree_aid", "schema": "onadata", "name": "ta_rhomis_eco_q1_2022", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.ta_rhomis_eco_q1_2022", "fqn": ["tree_aid", "staging", "onadata", "ta_rhomis_eco_q1_2022"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "ta_rhomis_eco_q1_2022", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"ta_rhomis_eco_q1_2022\"", "created_at": 1697110854.1894677}, "source.tree_aid.onadata.ethiopia_ea3_eb5_1_3_4": {"database": "tree_aid", "schema": "onadata", "name": "ethiopia_ea3_eb5_1_3_4", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.ethiopia_ea3_eb5_1_3_4", "fqn": ["tree_aid", "staging", "onadata", "ethiopia_ea3_eb5_1_3_4"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "ethiopia_ea3_eb5_1_3_4", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"ethiopia_ea3_eb5_1_3_4\"", "created_at": 1697110854.1937053}, "source.tree_aid.onadata.ethiopia_meki_2_extra": {"database": "tree_aid", "schema": "onadata", "name": "ethiopia_meki_2_extra", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.ethiopia_meki_2_extra", "fqn": ["tree_aid", "staging", "onadata", "ethiopia_meki_2_extra"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "ethiopia_meki_2_extra", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"ethiopia_meki_2_extra\"", "created_at": 1697110854.1979291}, "source.tree_aid.onadata.ethiopia_meki_2": {"database": "tree_aid", "schema": "onadata", "name": "ethiopia_meki_2", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.ethiopia_meki_2", "fqn": ["tree_aid", "staging", "onadata", "ethiopia_meki_2"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "ethiopia_meki_2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"ethiopia_meki_2\"", "created_at": 1697110854.2018502}, "source.tree_aid.onadata.eb8_2019": {"database": "tree_aid", "schema": "onadata", "name": "eb8_2019", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.eb8_2019", "fqn": ["tree_aid", "staging", "onadata", "eb8_2019"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "eb8_2019", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"eb8_2019\"", "created_at": 1697110854.206053}, "source.tree_aid.onadata.ta_rhomis_eb3eb8_2020": {"database": "tree_aid", "schema": "onadata", "name": "ta_rhomis_eb3eb8_2020", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.ta_rhomis_eb3eb8_2020", "fqn": ["tree_aid", "staging", "onadata", "ta_rhomis_eb3eb8_2020"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "ta_rhomis_eb3eb8_2020", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"ta_rhomis_eb3eb8_2020\"", "created_at": 1697110854.2100117}, "source.tree_aid.onadata.ta_rhomis_gb8_endline_jan-mar2021_consolidated": {"database": "tree_aid", "schema": "onadata", "name": "ta_rhomis_gb8_endline_jan-mar2021_consolidated", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.ta_rhomis_gb8_endline_jan-mar2021_consolidated", "fqn": ["tree_aid", "staging", "onadata", "ta_rhomis_gb8_endline_jan-mar2021_consolidated"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "ta_rhomis_gb8_endline_jan-mar2021_consolidated", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"ta_rhomis_gb8_endline_jan-mar2021_consolidated\"", "created_at": 1697110854.2142951}, "source.tree_aid.onadata.gb1_ta_baseline_v1_3_3": {"database": "tree_aid", "schema": "onadata", "name": "gb1_ta_baseline_v1_3_3", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.gb1_ta_baseline_v1_3_3", "fqn": ["tree_aid", "staging", "onadata", "gb1_ta_baseline_v1_3_3"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "gb1_ta_baseline_v1_3_3", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"gb1_ta_baseline_v1_3_3\"", "created_at": 1697110854.2183006}, "source.tree_aid.onadata.tree_aid_rhomis_gb8_final": {"database": "tree_aid", "schema": "onadata", "name": "tree_aid_rhomis_gb8_final", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.tree_aid_rhomis_gb8_final", "fqn": ["tree_aid", "staging", "onadata", "tree_aid_rhomis_gb8_final"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "tree_aid_rhomis_gb8_final", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"tree_aid_rhomis_gb8_final\"", "created_at": 1697110854.2225976}, "source.tree_aid.onadata.ta_rhomis_gb1_2021": {"database": "tree_aid", "schema": "onadata", "name": "ta_rhomis_gb1_2021", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.ta_rhomis_gb1_2021", "fqn": ["tree_aid", "staging", "onadata", "ta_rhomis_gb1_2021"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "ta_rhomis_gb1_2021", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"ta_rhomis_gb1_2021\"", "created_at": 1697110854.226569}, "source.tree_aid.onadata.ta_rho_mis_gc6_2021": {"database": "tree_aid", "schema": "onadata", "name": "ta_rho_mis_gc6_2021", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.ta_rho_mis_gc6_2021", "fqn": ["tree_aid", "staging", "onadata", "ta_rho_mis_gc6_2021"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "ta_rho_mis_gc6_2021", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"ta_rho_mis_gc6_2021\"", "created_at": 1697110854.2307992}, "source.tree_aid.onadata.ta_rhomis_gc3_oct_2020": {"database": "tree_aid", "schema": "onadata", "name": "ta_rhomis_gc3_oct_2020", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.ta_rhomis_gc3_oct_2020", "fqn": ["tree_aid", "staging", "onadata", "ta_rhomis_gc3_oct_2020"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "ta_rhomis_gc3_oct_2020", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"ta_rhomis_gc3_oct_2020\"", "created_at": 1697110854.2347999}, "source.tree_aid.onadata.mb2_baseline": {"database": "tree_aid", "schema": "onadata", "name": "mb2_baseline", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.mb2_baseline", "fqn": ["tree_aid", "staging", "onadata", "mb2_baseline"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "mb2_baseline", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"mb2_baseline\"", "created_at": 1697110854.2390244}, "source.tree_aid.onadata.mb2_rhomis_endline_april2020": {"database": "tree_aid", "schema": "onadata", "name": "mb2_rhomis_endline_april2020", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.mb2_rhomis_endline_april2020", "fqn": ["tree_aid", "staging", "onadata", "mb2_rhomis_endline_april2020"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "mb2_rhomis_endline_april2020", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"mb2_rhomis_endline_april2020\"", "created_at": 1697110854.242986}, "source.tree_aid.onadata.tree_aid_rho_mis_mb6_2020": {"database": "tree_aid", "schema": "onadata", "name": "tree_aid_rho_mis_mb6_2020", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.tree_aid_rho_mis_mb6_2020", "fqn": ["tree_aid", "staging", "onadata", "tree_aid_rho_mis_mb6_2020"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "tree_aid_rho_mis_mb6_2020", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"tree_aid_rho_mis_mb6_2020\"", "created_at": 1697110854.2471924}, "source.tree_aid.onadata.mb6_income_agri_nrm_vcc_jan-mar22": {"database": "tree_aid", "schema": "onadata", "name": "mb6_income_agri_nrm_vcc_jan-mar22", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.mb6_income_agri_nrm_vcc_jan-mar22", "fqn": ["tree_aid", "staging", "onadata", "mb6_income_agri_nrm_vcc_jan-mar22"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "mb6_income_agri_nrm_vcc_jan-mar22", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"mb6_income_agri_nrm_vcc_jan-mar22\"", "created_at": 1697110854.2511585}, "source.tree_aid.onadata.tree_aid_rhomis_na6_endline": {"database": "tree_aid", "schema": "onadata", "name": "tree_aid_rhomis_na6_endline", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.tree_aid_rhomis_na6_endline", "fqn": ["tree_aid", "staging", "onadata", "tree_aid_rhomis_na6_endline"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "tree_aid_rhomis_na6_endline", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"tree_aid_rhomis_na6_endline\"", "created_at": 1697110854.255366}, "source.tree_aid.onadata.tree_aid_rhomis_2_0_niger_na4": {"database": "tree_aid", "schema": "onadata", "name": "tree_aid_rhomis_2_0_niger_na4", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.tree_aid_rhomis_2_0_niger_na4", "fqn": ["tree_aid", "staging", "onadata", "tree_aid_rhomis_2_0_niger_na4"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "tree_aid_rhomis_2_0_niger_na4", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"tree_aid_rhomis_2_0_niger_na4\"", "created_at": 1697110854.2598028}, "source.tree_aid.onadata.tree_aid_rhomis_na6_finale": {"database": "tree_aid", "schema": "onadata", "name": "tree_aid_rhomis_na6_finale", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.tree_aid_rhomis_na6_finale", "fqn": ["tree_aid", "staging", "onadata", "tree_aid_rhomis_na6_finale"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "tree_aid_rhomis_na6_finale", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"tree_aid_rhomis_na6_finale\"", "created_at": 1697110854.2638304}, "source.tree_aid.onadata.rhomis_treeaid_na4_endline_june2021_tele_final": {"database": "tree_aid", "schema": "onadata", "name": "rhomis_treeaid_na4_endline_june2021_tele_final", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.rhomis_treeaid_na4_endline_june2021_tele_final", "fqn": ["tree_aid", "staging", "onadata", "rhomis_treeaid_na4_endline_june2021_tele_final"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "rhomis_treeaid_na4_endline_june2021_tele_final", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"rhomis_treeaid_na4_endline_june2021_tele_final\"", "created_at": 1697110854.2680671}, "source.tree_aid.onadata.mc2_rho_mis_jul-sep22_final": {"database": "tree_aid", "schema": "onadata", "name": "mc2_rho_mis_jul-sep22_final", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.mc2_rho_mis_jul-sep22_final", "fqn": ["tree_aid", "staging", "onadata", "mc2_rho_mis_jul-sep22_final"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "mc2_rho_mis_jul-sep22_final", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"mc2_rho_mis_jul-sep22_final\"", "created_at": 1697110854.272023}, "source.tree_aid.onadata.tree_aid_rho_mis_bc3_oct-dec2022_final": {"database": "tree_aid", "schema": "onadata", "name": "tree_aid_rho_mis_bc3_oct-dec2022_final", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.tree_aid_rho_mis_bc3_oct-dec2022_final", "fqn": ["tree_aid", "staging", "onadata", "tree_aid_rho_mis_bc3_oct-dec2022_final"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "tree_aid_rho_mis_bc3_oct-dec2022_final", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"tree_aid_rho_mis_bc3_oct-dec2022_final\"", "created_at": 1697110854.2763817}, "source.tree_aid.onadata.mc3_rho_mis_oct-dec22_final": {"database": "tree_aid", "schema": "onadata", "name": "mc3_rho_mis_oct-dec22_final", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.mc3_rho_mis_oct-dec22_final", "fqn": ["tree_aid", "staging", "onadata", "mc3_rho_mis_oct-dec22_final"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "mc3_rho_mis_oct-dec22_final", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"mc3_rho_mis_oct-dec22_final\"", "created_at": 1697110854.2803016}, "source.tree_aid.onadata.ec0_mini_rho_mis_jan-mar2023_final": {"database": "tree_aid", "schema": "onadata", "name": "ec0_mini_rho_mis_jan-mar2023_final", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.ec0_mini_rho_mis_jan-mar2023_final", "fqn": ["tree_aid", "staging", "onadata", "ec0_mini_rho_mis_jan-mar2023_final"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "ec0_mini_rho_mis_jan-mar2023_final", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"ec0_mini_rho_mis_jan-mar2023_final\"", "created_at": 1697110854.284517}, "source.tree_aid.onadata.gc6_perimeter_village_may2021_survey_final": {"database": "tree_aid", "schema": "onadata", "name": "gc6_perimeter_village_may2021_survey_final", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.onadata.gc6_perimeter_village_may2021_survey_final", "fqn": ["tree_aid", "staging", "onadata", "gc6_perimeter_village_may2021_survey_final"], "source_name": "onadata", "source_description": "", "loader": "", "identifier": "gc6_perimeter_village_may2021_survey_final", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"onadata\".\"gc6_perimeter_village_may2021_survey_final\"", "created_at": 1697110854.2890162}, "source.tree_aid.csv.rhomis_indicators": {"database": "tree_aid", "schema": "csv", "name": "rhomis_indicators", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.csv.rhomis_indicators", "fqn": ["tree_aid", "staging", "csv", "rhomis_indicators"], "source_name": "csv", "source_description": "", "loader": "", "identifier": "rhomis_indicators", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Indicators worksheet for old Rhomis projects dataset", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"csv\".\"rhomis_indicators\"", "created_at": 1697110854.2892563}, "source.tree_aid.airbyte.surveys": {"database": "tree_aid", "schema": "airbyte", "name": "surveys", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.airbyte.surveys", "fqn": ["tree_aid", "staging", "airbyte", "surveys"], "source_name": "airbyte", "source_description": "", "loader": "", "identifier": "surveys", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "List of all Tree Aid forms and projects", "columns": {"form_id": {"name": "form_id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"airbyte\".\"surveys\"", "created_at": 1698074991.4556155}, "source.tree_aid.airbyte.survey_definitions": {"database": "tree_aid", "schema": "airbyte", "name": "survey_definitions", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.airbyte.survey_definitions", "fqn": ["tree_aid", "staging", "airbyte", "survey_definitions"], "source_name": "airbyte", "source_description": "", "loader": "", "identifier": "survey_definitions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "List of questions for the different survey types", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"airbyte\".\"survey_definitions\"", "created_at": 1698074991.4558976}, "source.tree_aid.airbyte.core_questions": {"database": "tree_aid", "schema": "airbyte", "name": "core_questions", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.airbyte.core_questions", "fqn": ["tree_aid", "staging", "airbyte", "core_questions"], "source_name": "airbyte", "source_description": "", "loader": "", "identifier": "core_questions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "List of relevant questions for indicator mapping", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"airbyte\".\"core_questions\"", "created_at": 1698074991.4599185}, "source.tree_aid.airbyte.rhomis_indicators": {"database": "tree_aid", "schema": "airbyte", "name": "rhomis_indicators", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.airbyte.rhomis_indicators", "fqn": ["tree_aid", "staging", "airbyte", "rhomis_indicators"], "source_name": "airbyte", "source_description": "", "loader": "", "identifier": "rhomis_indicators", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "List of all rhomis indicators and responses", "columns": {"id_hh": {"name": "id_hh", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"airbyte\".\"rhomis_indicators\"", "created_at": 1698074991.4642115}, "source.tree_aid.airbyte.projects": {"database": "tree_aid", "schema": "airbyte", "name": "projects", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.airbyte.projects", "fqn": ["tree_aid", "staging", "airbyte", "projects"], "source_name": "airbyte", "source_description": "", "loader": "", "identifier": "projects", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"airbyte\".\"projects\"", "created_at": 1698074991.4644582}, "source.tree_aid.airbyte.trees_planted_legacy": {"database": "tree_aid", "schema": "airbyte", "name": "trees_planted_legacy", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.airbyte.trees_planted_legacy", "fqn": ["tree_aid", "staging", "airbyte", "trees_planted_legacy"], "source_name": "airbyte", "source_description": "", "loader": "", "identifier": "trees_planted_legacy", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"airbyte\".\"trees_planted_legacy\"", "created_at": 1698074991.464693}, "source.tree_aid.airbyte.country_hh_size": {"database": "tree_aid", "schema": "airbyte", "name": "country_hh_size", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.airbyte.country_hh_size", "fqn": ["tree_aid", "staging", "airbyte", "country_hh_size"], "source_name": "airbyte", "source_description": "", "loader": "", "identifier": "country_hh_size", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"airbyte\".\"country_hh_size\"", "created_at": 1698074991.464908}, "source.tree_aid.airbyte.vte_groups_legacy": {"database": "tree_aid", "schema": "airbyte", "name": "vte_groups_legacy", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.airbyte.vte_groups_legacy", "fqn": ["tree_aid", "staging", "airbyte", "vte_groups_legacy"], "source_name": "airbyte", "source_description": "", "loader": "", "identifier": "vte_groups_legacy", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"airbyte\".\"vte_groups_legacy\"", "created_at": 1698074991.4651217}, "source.tree_aid.airbyte.land_area_legacy": {"database": "tree_aid", "schema": "airbyte", "name": "land_area_legacy", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.airbyte.land_area_legacy", "fqn": ["tree_aid", "staging", "airbyte", "land_area_legacy"], "source_name": "airbyte", "source_description": "", "loader": "", "identifier": "land_area_legacy", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"airbyte\".\"land_area_legacy\"", "created_at": 1698074991.4653327}, "source.tree_aid.airbyte.beneficiaries_list": {"database": "tree_aid", "schema": "airbyte", "name": "beneficiaries_list", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.airbyte.beneficiaries_list", "fqn": ["tree_aid", "staging", "airbyte", "beneficiaries_list"], "source_name": "airbyte", "source_description": "", "loader": "", "identifier": "beneficiaries_list", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"airbyte\".\"beneficiaries_list\"", "created_at": 1698074991.4655423}, "source.tree_aid.airbyte.sbm_beneficiary_list_1": {"database": "tree_aid", "schema": "airbyte", "name": "sbm_beneficiary_list_1", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.airbyte.sbm_beneficiary_list_1", "fqn": ["tree_aid", "staging", "airbyte", "sbm_beneficiary_list_1"], "source_name": "airbyte", "source_description": "", "loader": "", "identifier": "sbm_beneficiary_list_1", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"airbyte\".\"sbm_beneficiary_list_1\"", "created_at": 1698074991.4657528}, "source.tree_aid.airbyte.sbm_mb6_r_ho_mis_endline__apr__jun2023": {"database": "tree_aid", "schema": "airbyte", "name": "sbm_mb6_r_ho_mis_endline__apr__jun2023", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.airbyte.sbm_mb6_r_ho_mis_endline__apr__jun2023", "fqn": ["tree_aid", "staging", "airbyte", "sbm_mb6_r_ho_mis_endline__apr__jun2023"], "source_name": "airbyte", "source_description": "", "loader": "", "identifier": "sbm_mb6_r_ho_mis_endline__apr__jun2023", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"airbyte\".\"sbm_mb6_r_ho_mis_endline__apr__jun2023\"", "created_at": 1698074991.4659631}, "source.tree_aid.airbyte.sbm_mc2_r_ho_mis__jul__sep22_final": {"database": "tree_aid", "schema": "airbyte", "name": "sbm_mc2_r_ho_mis__jul__sep22_final", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.airbyte.sbm_mc2_r_ho_mis__jul__sep22_final", "fqn": ["tree_aid", "staging", "airbyte", "sbm_mc2_r_ho_mis__jul__sep22_final"], "source_name": "airbyte", "source_description": "", "loader": "", "identifier": "sbm_mc2_r_ho_mis__jul__sep22_final", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"airbyte\".\"sbm_mc2_r_ho_mis__jul__sep22_final\"", "created_at": 1698074991.4661722}, "source.tree_aid.airbyte.chc_mc2_r_ho_mis__jul__sep22_final": {"database": "tree_aid", "schema": "airbyte", "name": "chc_mc2_r_ho_mis__jul__sep22_final", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.airbyte.chc_mc2_r_ho_mis__jul__sep22_final", "fqn": ["tree_aid", "staging", "airbyte", "chc_mc2_r_ho_mis__jul__sep22_final"], "source_name": "airbyte", "source_description": "", "loader": "", "identifier": "chc_mc2_r_ho_mis__jul__sep22_final", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"airbyte\".\"chc_mc2_r_ho_mis__jul__sep22_final\"", "created_at": 1698074991.4663808}, "source.tree_aid.airbyte.sbm_bc3_product_valu___juil_sept_2023_final": {"database": "tree_aid", "schema": "airbyte", "name": "sbm_bc3_product_valu___juil_sept_2023_final", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.airbyte.sbm_bc3_product_valu___juil_sept_2023_final", "fqn": ["tree_aid", "staging", "airbyte", "sbm_bc3_product_valu___juil_sept_2023_final"], "source_name": "airbyte", "source_description": "", "loader": "", "identifier": "sbm_bc3_product_valu___juil_sept_2023_final", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"airbyte\".\"sbm_bc3_product_valu___juil_sept_2023_final\"", "created_at": 1698074991.466631}, "source.tree_aid.airbyte.sbm_bc3_product_valu__es_repeat_derivatives": {"database": "tree_aid", "schema": "airbyte", "name": "sbm_bc3_product_valu__es_repeat_derivatives", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.airbyte.sbm_bc3_product_valu__es_repeat_derivatives", "fqn": ["tree_aid", "staging", "airbyte", "sbm_bc3_product_valu__es_repeat_derivatives"], "source_name": "airbyte", "source_description": "", "loader": "", "identifier": "sbm_bc3_product_valu__es_repeat_derivatives", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"airbyte\".\"sbm_bc3_product_valu__es_repeat_derivatives\"", "created_at": 1698074991.46685}, "source.tree_aid.airbyte.chc_bc3_product_valu___juil_sept_2023_final": {"database": "tree_aid", "schema": "airbyte", "name": "chc_bc3_product_valu___juil_sept_2023_final", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.airbyte.chc_bc3_product_valu___juil_sept_2023_final", "fqn": ["tree_aid", "staging", "airbyte", "chc_bc3_product_valu___juil_sept_2023_final"], "source_name": "airbyte", "source_description": "", "loader": "", "identifier": "chc_bc3_product_valu___juil_sept_2023_final", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"airbyte\".\"chc_bc3_product_valu___juil_sept_2023_final\"", "created_at": 1698074991.4670613}, "source.tree_aid.airbyte.sbm_bc3_land_restora__lanted_repeat_planted": {"database": "tree_aid", "schema": "airbyte", "name": "sbm_bc3_land_restora__lanted_repeat_planted", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.airbyte.sbm_bc3_land_restora__lanted_repeat_planted", "fqn": ["tree_aid", "staging", "airbyte", "sbm_bc3_land_restora__lanted_repeat_planted"], "source_name": "airbyte", "source_description": "", "loader": "", "identifier": "sbm_bc3_land_restora__lanted_repeat_planted", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"airbyte\".\"sbm_bc3_land_restora__lanted_repeat_planted\"", "created_at": 1698074991.4672694}, "source.tree_aid.airbyte.sbm_bc3_land_restoration_survey_2022": {"database": "tree_aid", "schema": "airbyte", "name": "sbm_bc3_land_restoration_survey_2022", "resource_type": "source", "package_name": "tree_aid", "path": "models/staging/a_sources.yml", "original_file_path": "models/staging/a_sources.yml", "unique_id": "source.tree_aid.airbyte.sbm_bc3_land_restoration_survey_2022", "fqn": ["tree_aid", "staging", "airbyte", "sbm_bc3_land_restoration_survey_2022"], "source_name": "airbyte", "source_description": "", "loader": "", "identifier": "sbm_bc3_land_restoration_survey_2022", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"tree_aid\".\"airbyte\".\"sbm_bc3_land_restoration_survey_2022\"", "created_at": 1698074991.467475}}, "macros": {"macro.tree_aid.survey_type_table": {"name": "survey_type_table", "resource_type": "macro", "package_name": "tree_aid", "path": "macros/survey_type_table.sql", "original_file_path": "macros/survey_type_table.sql", "unique_id": "macro.tree_aid.survey_type_table", "macro_sql": "{% macro survey_type_table(survey_type, repeat=NULL) %} \r\n\r\nwith core_questions as \r\n(\r\n{% if repeat == NULL %}\r\n{{union_core_questions(survey_type, repeat)}}\r\n\r\n{% else %}     \r\n{{union_core_questions_old(survey_type, repeat)}}\r\n{% endif %}\r\n)\r\nselect \r\ns.form_name,\r\ns.type,\r\ns.timing,\r\ns.country,\r\ns.project_code,\r\ns.type_2,\r\ncq.*\r\nfrom {{ref('stg_survey_master')}} s \r\nleft join core_questions cq on s.form_id::int = cq.form_id::int   \r\nwhere s.type = '{{survey_type}}'\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.tree_aid.union_core_questions", "macro.tree_aid.union_core_questions_old"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.6800272, "supported_languages": null}, "macro.tree_aid.labels_generation": {"name": "labels_generation", "resource_type": "macro", "package_name": "tree_aid", "path": "macros/labels_generation.sql", "original_file_path": "macros/labels_generation.sql", "unique_id": "macro.tree_aid.labels_generation", "macro_sql": "{% macro labels_generation() %}\r\n\r\n-- find all keys in xform:choices (FIELD NAME - long)\r\n   {%- set form_json -%}\r\n    (select \r\n    jsonb_object_keys(json -> 'xform:choices')\r\n    from onadata.registry  order by 1 limit 1 )\r\n    {%- endset -%}\r\n\r\n    -- for each key, find all inside dictionary keys  (choices)\r\n    {% for tablerow in run_query(form_json) %}   \r\n    {{ log('Looping through: ' ~ tablerow, info=True) }}\r\n\r\n        {# accessing the first value of the row, which is the only one. Unclear why we need to do this, but it works. Problem is that the run_query is returning a funky object #}\r\n        {%- set list_option =  tablerow.values()[0] -%}  \r\n\r\n        {%- set option_json -%}\r\n            (select \r\n            jsonb_object_keys(json -> 'xform:choices' -> '{{list_option}}' )\r\n            from (select * from onadata.registry  limit 1 ) form2  )\r\n        {%- endset -%}\r\n        {%- set choices = run_query(option_json) -%}\r\n\r\n        --for each choice, find the language options \r\n        {%- for choice in choices  %}      \r\n            {%- set choice_value = choice.values()[0] -%}\r\n            {%- set label_language -%}\r\n                (select \r\n                jsonb_object_keys(json -> 'xform:choices' -> '{{list_option}}' -> '{{choice_value}}' )\r\n                from (select * from onadata.registry \r\n                limit 1 ) form3 )\r\n            {%- endset -%}\r\n            {%- set languages = run_query(label_language) -%}\r\n\r\n            --for each language, store the language and value \r\n            {%- for language in languages -%}            \r\n                {%- set language_value = language.values()[0] -%}\r\n                (select \r\n                '{{list_option}}' as option_long,\r\n                (string_to_array('{{list_option}}', '/'))[array_length(string_to_array('{{list_option}}', '/'),1)] as option, \r\n                '{{choice_value}}' as label, \r\n                '{{language_value}}' as language, \r\n                json -> 'xform:choices' -> '{{list_option}}' -> '{{choice_value}}' -> '{{language_value}}' as value\r\n                from (select * from onadata.registry \r\n                limit 1 ) form4 )\r\n\r\n                {% if not loop.last -%}\r\n                union all \r\n                {%- endif -%}\r\n            {% endfor %}\r\n            {% if not loop.last and languages|length >0 -%}\r\n            union all \r\n            {%- endif %}\r\n        {% endfor -%}\r\n\r\n        {% if not loop.last and choices|length > 0 -%}\r\n        union all \r\n        {%- endif -%} \r\n    {% endfor %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.6848776, "supported_languages": null}, "macro.tree_aid.labels_generation2": {"name": "labels_generation2", "resource_type": "macro", "package_name": "tree_aid", "path": "macros/labels_generation2.sql", "original_file_path": "macros/labels_generation2.sql", "unique_id": "macro.tree_aid.labels_generation2", "macro_sql": "{% macro labels_generation2() %}\r\n\r\n\r\n-- find all keys in xform:choices (FIELD NAME - long)\r\n   {% set form_labels %}\r\n        (select\r\n            (json -> 'xform:choices') \r\n            from (select * from onadata.registry \r\n            limit 1 ) form1 \r\n        )\r\n    {% endset %}\r\n\r\n    -- for each key, find all inside dictionary keys  (list)\r\n\r\n    {% for tablerow in run_query(form_labels) %}\r\n        {{tablerow.from_json() }}\r\n    {% endfor %}\r\n--from_json\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.6857038, "supported_languages": null}, "macro.tree_aid.grant_select": {"name": "grant_select", "resource_type": "macro", "package_name": "tree_aid", "path": "macros/grant_select.sql", "original_file_path": "macros/grant_select.sql", "unique_id": "macro.tree_aid.grant_select", "macro_sql": "{% macro grant_select(schema=target.schema, user=target.user) %}\r\n\r\n  {% if target.name == 'default' %}     {# runs only if the target for the job is the dbt schema, therefore only if the job is running in prod #}\r\n\r\n  {% set sql %}\r\n  grant usage on schema {{ schema }} to {{ user }};\r\n  grant select on all tables in schema {{ schema }} to {{ user }};\r\n  {% endset %}\r\n\r\n  {{ log('Granting select on all tables and views in schema ' ~ target.schema ~ ' to role ' ~ user, info=True) }}\r\n  {% do run_query(sql) %}\r\n  {{ log('Privileges granted', info=True) }}\r\n\r\n  {% endif %} \r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.6873214, "supported_languages": null}, "macro.tree_aid.forms_location_table": {"name": "forms_location_table", "resource_type": "macro", "package_name": "tree_aid", "path": "macros/union_core_questions.sql", "original_file_path": "macros/union_core_questions.sql", "unique_id": "macro.tree_aid.forms_location_table", "macro_sql": "{% macro forms_location_table(survey_type, repeat=[]) %}   \r\n\r\n{% set formtable  %}\r\nselect form_id, schemaname, tablename from  {{ref('stg_core_questions_union')}}\r\nwhere type = '{{survey_type}}'   \r\n    {% if repeat|length > 0  -%}\r\n    and repeat_group_name = '{{repeat}}'\r\n    {% else -%}\r\n    and repeat_group_name is null \r\n    {%- endif %}\r\ngroup by 1,2,3\r\n{%- endset -%}\r\n\r\n{%- set results = run_query(formtable)  -%}\r\n\r\n{{return(results)}}\r\n\r\n{% endmacro%}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.6927664, "supported_languages": null}, "macro.tree_aid.find_corefields": {"name": "find_corefields", "resource_type": "macro", "package_name": "tree_aid", "path": "macros/union_core_questions.sql", "original_file_path": "macros/union_core_questions.sql", "unique_id": "macro.tree_aid.find_corefields", "macro_sql": "{% macro find_corefields(survey_type, repeat = []) %}\r\n\r\n{%- set corefields_query  -%}\r\n    select name from {{ref('stg_core_questions_master')}} where is_{{survey_type | lower | replace(' ', '_')}}  \r\n    {% if repeat|length > 0   -%}\r\n        and repeat_group_name = '{{repeat}}'  \r\n        {%- else -%}\r\n        and repeat_group_name is null \r\n        {% endif -%}\r\n{%- endset -%}\r\n\r\n{% if execute %}\r\n    {% set core_fields = run_query(corefields_query).columns['name'].values()  %} \r\n{% else %}\r\n    {% set core_fields = [] %}\r\n{% endif %}\r\n\r\n{{return(core_fields)}}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.6941657, "supported_languages": null}, "macro.tree_aid.fields": {"name": "fields", "resource_type": "macro", "package_name": "tree_aid", "path": "macros/union_core_questions.sql", "original_file_path": "macros/union_core_questions.sql", "unique_id": "macro.tree_aid.fields", "macro_sql": "{% macro fields(schemaname, tablename) %}\r\n    {%- set fieldsquery -%}\r\n    select column_name from \r\n        information_schema.columns\r\n        where table_schema = '{{schemaname}}'\r\n    and table_name = '{{tablename}}'\r\n    {%- endset -%}\r\n\r\n    {%- set fields = dbt_utils.get_query_results_as_dict(fieldsquery)  -%}\r\n\r\n    {{return(fields['column_name'])}}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.694862, "supported_languages": null}, "macro.tree_aid.form_core_fields_names": {"name": "form_core_fields_names", "resource_type": "macro", "package_name": "tree_aid", "path": "macros/union_core_questions.sql", "original_file_path": "macros/union_core_questions.sql", "unique_id": "macro.tree_aid.form_core_fields_names", "macro_sql": "{% macro form_core_fields_names(form_id) %}\r\n\r\n    {%- set formfields_query -%}\r\n        select question_name, core_question_name\r\n        from  {{ref('stg_core_questions_union')}} \r\n        where form_id = '{{form_id}}'\r\n    {%- endset -%}\r\n\r\n\r\n    {% if execute %}\r\n        {%- set results =  dbt_utils.get_query_results_as_dict(formfields_query) -%}   \r\n    {% else %}\r\n        {% set results = [] %}\r\n    {% endif %}\r\n\r\n    {{ return(results) }}\r\n    \r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.6957378, "supported_languages": null}, "macro.tree_aid.union_core_questions": {"name": "union_core_questions", "resource_type": "macro", "package_name": "tree_aid", "path": "macros/union_core_questions.sql", "original_file_path": "macros/union_core_questions.sql", "unique_id": "macro.tree_aid.union_core_questions", "macro_sql": "{% macro union_core_questions(survey_type, repeat = []) %}\r\n\r\n--find all the expected core fields for that form type    \r\n{% set corefields = find_corefields(survey_type) %}\r\n\r\n--For all forms for a selected survey type\r\n{% for row in forms_location_table(survey_type) %}\r\n{{ log(\"Starting analysis for form: \" ~ row['form_id'], True) }}\r\n\r\n--find all the fields for the table associated with the form\r\n{%- set fields = fields(row['schemaname'], row['tablename'])  -%}\r\n\r\n--find the core fields and how they are referenced in the specific form \r\n{%- set form_core_fields = form_core_fields_names(row['form_id']) -%}\r\n{%- set form_question_names = form_core_fields['question_name'] | list -%}\r\n{%- set core_question_names = form_core_fields['core_question_name'] | list -%}\r\n\r\n--- final query \r\nselect \r\n{{row['form_id']}}::varchar as form_id, \r\n    {% if '_id' in fields %} \r\n    _id::bigint as submission_id,\r\n    {% else -%}\r\n    id::bigint as submission_id,\r\n    {%- endif %}\r\n    -- if _index in the actual table, add index if not add null\r\n    {% if '_index' in fields %}\r\n    _index::int as submission_index,\r\n    {% else -%}\r\n    NULL::int as submission_index,\r\n    {%- endif %}\r\n-- loop through all the core fields, select the field with the appropriate name if present\r\n{% for core_field in corefields %}\r\n    {%- if core_field in core_question_names %}\r\n        {%- set indexvalue = core_question_names.index(core_field) %} \r\n        {{form_question_names[indexvalue]}}::varchar    -- finds the item of the list that correspond to a rule \r\n    {%- else %}\r\n        NULL::varchar \r\n    {%- endif %} \r\n        as {{core_field}} \r\n    {%- if not loop.last -%}\r\n    ,\r\n    {%- endif -%}    \r\n{% endfor %}\r\n-- appropriate from statement\r\n    from {{row['schemaname']}}.\"{{row['tablename']}}\"\r\n{% if not loop.last %}\r\n    union all\r\n{%- endif -%}\r\n\r\n{% endfor %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.tree_aid.find_corefields", "macro.tree_aid.forms_location_table", "macro.tree_aid.fields", "macro.tree_aid.form_core_fields_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.6987593, "supported_languages": null}, "macro.tree_aid.get_common_columns": {"name": "get_common_columns", "resource_type": "macro", "package_name": "tree_aid", "path": "macros/common_fields.sql", "original_file_path": "macros/common_fields.sql", "unique_id": "macro.tree_aid.get_common_columns", "macro_sql": "{% macro get_common_columns() %}\r\n        form_name,\r\n        country,\r\n        project_code,\r\n        form_id,\r\n        submission_id,\r\n        region,\r\n        province,\r\n        commune,\r\n        date_assessment,\r\n        assessment_year,\r\n        assessment_year_date,\r\n        beneficiary_control\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.699111, "supported_languages": null}, "macro.tree_aid.area_in_hectares": {"name": "area_in_hectares", "resource_type": "macro", "package_name": "tree_aid", "path": "macros/area_in_hectares.sql", "original_file_path": "macros/area_in_hectares.sql", "unique_id": "macro.tree_aid.area_in_hectares", "macro_sql": "{% macro area_in_hectares(column_name) -%}\r\n    {{ column_name}} / 10000\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.6994178, "supported_languages": null}, "macro.tree_aid.union_core_questions_old": {"name": "union_core_questions_old", "resource_type": "macro", "package_name": "tree_aid", "path": "macros/union_core_questions_old.sql", "original_file_path": "macros/union_core_questions_old.sql", "unique_id": "macro.tree_aid.union_core_questions_old", "macro_sql": "{% macro union_core_questions_old(survey_type, repeat) %}   \r\n\r\n-- create list of forms.   -- if 'rhomis' create list that are not in extended.rhomis . And either way, up to 5\r\n{%- set query -%}\r\nselect form_id, schemaname, tablename from  {{ref('stg_core_questions_union')}}\r\nwhere type = '{{survey_type}}'   \r\n    {% if repeat|length > 0  -%}\r\n    and repeat_group_name = '{{repeat}}'\r\n    {% else -%}\r\n    and repeat_group_name is null \r\n    {%- endif %}\r\ngroup by 1,2,3\r\n    {% if '{{survey_type}}' == 'Rhomis'  -%}  \r\n    limit 5\r\n    {% endif -%}\r\n{%- endset -%}\r\n\r\n-- create list of fields\r\n{%- set corefields_query  -%}\r\n    select name from {{ref('stg_core_questions_master')}} where is_{{survey_type | lower | replace(' ', '_')}}  \r\n    {% if repeat|length > 0   -%}\r\n        and repeat_group_name = '{{repeat}}'  \r\n        {%- else -%}\r\n        and repeat_group_name is null \r\n        {% endif -%}\r\n{%- endset -%}\r\n\r\n-- start actual macro \r\n{%- set results = run_query(query) -%}\r\n\r\n{%- if execute -%}\r\n    {% set forms = (results.select(['form_id']).columns[0].values()) | unique | list %}\r\n    {% set corefields = run_query(corefields_query).columns[0].values() | list %} \r\n{%- else -%}\r\n    {% set forms = [] %}\r\n    {% set corefields = [] %}\r\n{%- endif -%}\r\n \r\n-- for each form\r\n{% for form in forms %}\r\n    --finds schemaname and tablename for the db table associated to the form\r\n    {%- set schemalist = []  -%}\r\n    {%- set tablelist = []  -%}\r\n    {%- set uniquelist = []  -%}\r\n\r\n    {%- for row in results -%}  \r\n        {%- if row['form_id'] == form -%}\r\n            {%- do schemalist.append(row['schemaname'])  -%}\r\n            {%- do tablelist.append(row['tablename'])  -%}\r\n        {%- endif -%}\r\n    {%- endfor %}\r\n\r\n    {%- set schemaname = schemalist[0] %}\r\n    {%- set tablename = tablelist[0] %}\r\n\r\n    {%- set fieldsquery -%}\r\n        select * \r\n        from  {{schemaname}}.\"{{tablename}}\" \r\n    {%- endset -%}\r\n\r\n    {%- set fields = dbt_utils.get_query_results_as_dict(fieldsquery)  -%}\r\n    \r\n    {% if repeat|length > 0  -%}\r\n        {%- if 'parent_index' in fields %}\r\n            {%for val in fields['parent_index'] %}\r\n                {%if val not in uniquelist%}\r\n                    {%- do uniquelist.append(val)  -%}\r\n                {%endif%}\r\n            {%endfor%}\r\n        {% else -%}\r\n            {%for val in fields['parent_id'] %}\r\n                {%if val not in uniquelist%}\r\n                    {%- do uniquelist.append(val) -%}\r\n                {%endif%}\r\n            {%endfor%}\r\n        {%endif%}\r\n    {%else%}\r\n        {%for val in fields['id'] %}\r\n                {%if val not in uniquelist%}\r\n                    {%- do uniquelist.append(val) -%}\r\n                {%endif%}\r\n        {%endfor%}\r\n    {%endif%}  \r\n\r\n    -- loop through all the core fields, select the field with the appropriate name if present\r\n\r\n     {%- set formfields_query -%}\r\n        select question_name, core_question_name\r\n        from  {{ref('stg_core_questions_union')}} \r\n        where form_id = {{form}}\r\n    {%- endset -%}\r\n\r\n    {%- set question_names = run_query(formfields_query).columns[0].values() | list -%}\r\n    {%- set core_questions_names = run_query(formfields_query).columns[1].values() | list -%} \r\n\r\n    {% if uniquelist| length >0%}\r\n        {%for val in range(uniquelist| length) %}\r\n            --loop through all the fields in dict\r\n            select \r\n            {{form}}::varchar as form_id, \r\n            -- if we are in a repeat group, check the actual names of fields in the repeat group to see if we have the parent submission_id or only the parent_index\r\n                {% if repeat|length > 0  -%}\r\n                    id as id,  \r\n                    {%- if 'parent_index' in fields %}\r\n                        null as submission_id,\r\n                        parent_index::bigint as parent_index,\r\n                    {% else -%}\r\n                        {{uniquelist[loop.index0]}} as submission_id,                    \r\n                        null::bigint as parent_index,\r\n                    {%- endif %}\r\n                {% else %}\r\n                    id as submission_id,\r\n                    -- if _index in the actual table, add index if not add null\r\n                    {% if '_index' in fields %}\r\n                        _index::int as submission_index,\r\n                    {% else -%}\r\n                        NULL::int as submission_index,\r\n                    {%- endif %}\r\n                {% endif %}\r\n                -- loop through all the core fields, select the field with the appropriate name if present\r\n                {% for core_field in corefields %}\r\n                    {%- if core_field in core_questions_names %}\r\n                    {%- set indexvalue = core_questions_names.index(core_field) -%} \r\n                        {# finds the item of the list that correspond to a rule #}\r\n                    {{question_names[indexvalue]}}::varchar\r\n                    {%- else %}\r\n                    NULL::varchar \r\n                    {% endif %} \r\n                    as {{core_field}} \r\n                    {%- if not loop.last -%}\r\n                    ,\r\n                    {%- endif -%}\r\n                    \r\n                {% endfor %}\r\n            \r\n                --find the appropriate table to join based on information in 'stg_core_questions_land_survey'\r\n                from \r\n                {% if execute -%}\r\n                    {{schemaname}}.\"{{tablename}}\"\r\n                    {% if repeat|length > 0  -%}\r\n                        {%- if 'parent_index' not in fields %}\r\n                                where parent_id={{uniquelist[loop.index0]}}\r\n                            {%else%}\r\n                                where parent_index={{uniquelist[loop.index0]}}\r\n                        {%- endif %}\r\n                    {%else%}\r\n                        where id= {{uniquelist[loop.index0]}}\r\n                    {%endif%}\r\n                    \r\n                {%- endif -%}\r\n                {% if not loop.last %}\r\n                    union all\r\n                {%- endif -%}\r\n        {% endfor %} \r\n            \r\n        {% if not loop.last %}\r\n            union all\r\n        {%- endif -%}\r\n    {%- endif -%}\r\n{%- endfor -%}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7219555, "supported_languages": null}, "macro.tree_aid.get_standard_columns": {"name": "get_standard_columns", "resource_type": "macro", "package_name": "tree_aid", "path": "macros/standard_columns.sql", "original_file_path": "macros/standard_columns.sql", "unique_id": "macro.tree_aid.get_standard_columns", "macro_sql": "{% macro get_standard_columns(alias1,alias2) %}\r\n\"{{alias1}}\".form_name,\r\n\"{{alias1}}\".country,\r\n\"{{alias1}}\".project_code,\r\n\"{{alias1}}\".form_id,\r\n\"{{alias1}}\".id,\r\n\"{{alias1}}\".submission_id, --in this macro, submission id is collected from the first alias\r\n\"{{alias2}}\".region,\r\n\"{{alias2}}\".province,\r\n\"{{alias2}}\".commune,\r\n\"{{alias2}}\".date_assessment,\r\nextract('Year' from \"{{alias2}}\".date_assessment::date) as assessment_year,\r\n\"{{alias2}}\".assessment_year_date,\r\n\"{{alias2}}\".beneficiary_control\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.723717, "supported_languages": null}, "macro.tree_aid.get_standard_columns_2": {"name": "get_standard_columns_2", "resource_type": "macro", "package_name": "tree_aid", "path": "macros/standard_columns.sql", "original_file_path": "macros/standard_columns.sql", "unique_id": "macro.tree_aid.get_standard_columns_2", "macro_sql": "{% macro get_standard_columns_2(alias1,alias2) %}\r\n\"{{alias1}}\".form_name,\r\n\"{{alias1}}\".country,\r\n\"{{alias1}}\".project_code,\r\n\"{{alias1}}\".form_id,\r\n\"{{alias1}}\".id,\r\n\"{{alias2}}\".submission_id,--in this macro, submission id is collected from the second alias\r\n\"{{alias2}}\".region,\r\n\"{{alias2}}\".province,\r\n\"{{alias2}}\".commune,\r\n\"{{alias2}}\".date_assessment,\r\nextract('Year' from \"{{alias2}}\".date_assessment::date) as assessment_year,\r\n\"{{alias2}}\".assessment_year_date,\r\n\"{{alias2}}\".beneficiary_control\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.724437, "supported_languages": null}, "macro.dbt_postgres.postgres_get_relations": {"name": "postgres_get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres_get_relations", "macro_sql": "{% macro postgres_get_relations () -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select distinct\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7256439, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog": {"name": "postgres__get_catalog", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7276, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp": {"name": "postgres__current_timestamp", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n    now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7281582, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"name": "postgres__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7285688, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_get_time": {"name": "postgres__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7288494, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_backcompat": {"name": "postgres__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_backcompat", "macro_sql": "{% macro postgres__current_timestamp_backcompat() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7291076, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat": {"name": "postgres__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro postgres__current_timestamp_in_utc_backcompat() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7293558, "supported_languages": null}, "macro.dbt_postgres.postgres__create_table_as": {"name": "postgres__create_table_as", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} (\n      {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    )\n    {%- set sql = get_select_subquery(sql) %}\n  {% else %}\n    as\n  {% endif %}\n  (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.default__get_column_names", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7403834, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_index_sql": {"name": "postgres__get_create_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }});\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7414997, "supported_languages": null}, "macro.dbt_postgres.postgres__create_schema": {"name": "postgres__create_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7422001, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_schema": {"name": "postgres__drop_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7429159, "supported_languages": null}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"name": "postgres__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7439313, "supported_languages": null}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"name": "postgres__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.744739, "supported_languages": null}, "macro.dbt_postgres.postgres__information_schema_name": {"name": "postgres__information_schema_name", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.745161, "supported_languages": null}, "macro.dbt_postgres.postgres__list_schemas": {"name": "postgres__list_schemas", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7459202, "supported_languages": null}, "macro.dbt_postgres.postgres__check_schema_exists": {"name": "postgres__check_schema_exists", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7469382, "supported_languages": null}, "macro.dbt_postgres.postgres__make_relation_with_suffix": {"name": "postgres__make_relation_with_suffix", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_relation_with_suffix", "macro_sql": "{% macro postgres__make_relation_with_suffix(base_relation, suffix, dstring) %}\n    {% if dstring %}\n      {% set dt = modules.datetime.datetime.now() %}\n      {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n      {% set suffix = suffix ~ dtstring %}\n    {% endif %}\n    {% set suffix_length = suffix|length %}\n    {% set relation_max_name_length = base_relation.relation_max_name_length() %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Relation suffix is too long (' ~ suffix_length ~ ' characters). Maximum length is ' ~ relation_max_name_length ~ ' characters.') %}\n    {% endif %}\n    {% set identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix %}\n\n    {{ return(base_relation.incorporate(path={\"identifier\": identifier })) }}\n\n  {% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.748677, "supported_languages": null}, "macro.dbt_postgres.postgres__make_intermediate_relation": {"name": "postgres__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_intermediate_relation", "macro_sql": "{% macro postgres__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(postgres__make_relation_with_suffix(base_relation, suffix, dstring=False)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.749141, "supported_languages": null}, "macro.dbt_postgres.postgres__make_temp_relation": {"name": "postgres__make_temp_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set temp_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=True) %}\n    {{ return(temp_relation.incorporate(path={\"schema\": none,\n                                              \"database\": none})) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7498293, "supported_languages": null}, "macro.dbt_postgres.postgres__make_backup_relation": {"name": "postgres__make_backup_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_backup_relation", "macro_sql": "{% macro postgres__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {% set backup_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=False) %}\n    {{ return(backup_relation.incorporate(type=backup_relation_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7504377, "supported_languages": null}, "macro.dbt_postgres.postgres_escape_comment": {"name": "postgres_escape_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7513628, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_relation_comment": {"name": "postgres__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7518797, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_column_comment": {"name": "postgres__alter_column_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.753263, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_grant_sql": {"name": "postgres__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_grant_sql", "macro_sql": "\n\n{%- macro postgres__get_show_grant_sql(relation) -%}\n  select grantee, privilege_type\n  from {{ relation.information_schema('role_table_grants') }}\n      where grantor = current_role\n        and grantee != current_role\n        and table_schema = '{{ relation.schema }}'\n        and table_name = '{{ relation.identifier }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7538142, "supported_languages": null}, "macro.dbt_postgres.postgres__copy_grants": {"name": "postgres__copy_grants", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__copy_grants", "macro_sql": "{% macro postgres__copy_grants() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.754102, "supported_languages": null}, "macro.dbt_postgres.postgres__get_incremental_default_sql": {"name": "postgres__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/incremental_strategies.sql", "original_file_path": "macros/materializations/incremental_strategies.sql", "unique_id": "macro.dbt_postgres.postgres__get_incremental_default_sql", "macro_sql": "{% macro postgres__get_incremental_default_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n  {% else %}\n    {% do return(get_incremental_append_sql(arg_dict)) %}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql", "macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7549636, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"name": "postgres__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7563748, "supported_languages": null}, "macro.dbt_postgres.postgres__datediff": {"name": "postgres__datediff", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_postgres.postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7622435, "supported_languages": null}, "macro.dbt_postgres.postgres__dateadd": {"name": "postgres__dateadd", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_postgres.postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7627678, "supported_languages": null}, "macro.dbt_postgres.postgres__split_part": {"name": "postgres__split_part", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_postgres.postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part", "macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7636387, "supported_languages": null}, "macro.dbt_postgres.postgres__last_day": {"name": "postgres__last_day", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt_postgres.postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7646928, "supported_languages": null}, "macro.dbt_postgres.postgres__listagg": {"name": "postgres__listagg", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_postgres.postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7659566, "supported_languages": null}, "macro.dbt_postgres.postgres__any_value": {"name": "postgres__any_value", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt_postgres.postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7663226, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7673354, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7679236, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.768553, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7693822, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7699556, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7708097, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.771849, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7725897, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7732809, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7739627, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7761068, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.776549, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7769065, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7772322, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7775536, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7783477, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.77919, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7800825, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7807713, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7848787, "supported_languages": ["sql"]}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.7956796, "supported_languages": ["sql"]}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8052473, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8059664, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8068924, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8114111, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8121014, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8128483, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8184354, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8238392, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8354654, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.836497, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8369412, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8371658, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.837498, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.837767, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8382185, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8400795, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.840514, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8411028, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8420455, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.842947, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8435426, "supported_languages": null}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8508408, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8527713, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8533592, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8544316, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8548706, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8551786, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8555057, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8557794, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.856317, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8565974, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8576488, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8580706, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8606448, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8669667, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8699996, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    /* Do the equivalent of rename_if_exists */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.875359, "supported_languages": ["sql"]}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8760278, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8765209, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.877376, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.877743, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.87815, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8790781, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8806617, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8812146, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.881639, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8822823, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.882706, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8833413, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8837614, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8843346, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8849437, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8853443, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.8863328, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9022942, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9084735, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9095225, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9133365, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9143813, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9168918, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9326825, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9375544, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9425745, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9459383, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.948314, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.953261, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9545083, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.955952, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9564853, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9580605, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9677653, "supported_languages": ["sql"]}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9696453, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9699278, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9710808, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9714673, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9717803, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.974532, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.975388, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9761376, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n    /* Do the equivalent of rename_if_exists */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.981511, "supported_languages": ["sql"]}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9831092, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9835303, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9844618, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9859703, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9870126, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9874427, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9878576, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9884143, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9888086, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.989527, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9899094, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9905477, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9913197, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.991832, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9920194, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9927175, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9931273, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9940922, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9944966, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9949963, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9957047, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.996273, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9966083, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.997139, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9973273, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.997941, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.998255, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9988406, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.999164, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110852.9999485, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0004904, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0022876, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.002643, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0031788, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0035474, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0039105, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.00425, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0046103, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0050259, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0053926, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0057328, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0060923, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0064309, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0067878, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0071127, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0076587, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0079076, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0085018, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0088286, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0094469, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0097613, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0103269, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0105855, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0117445, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0128098, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0134313, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0137367, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0142894, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0145414, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.015227, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0156167, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.01616, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0164506, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0170305, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0174031, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0180323, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0183737, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0189536, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0192149, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0228944, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0233214, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.024072, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.024586, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0250823, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0255044, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.027327, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0280926, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0285027, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0292854, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.029803, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0311198, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0317094, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0334117, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0385358, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0389163, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0394053, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0400476, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0405848, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0413086, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0417202, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0421975, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0426145, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0429897, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0434394, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0440624, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0446048, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.045959, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.046481, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0468013, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0472305, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.048448, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0488613, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0493138, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0496953, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.050279, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.051313, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0522335, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0525784, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.052934, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.05319, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0535643, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0537515, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0541244, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.054514, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0554166, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0557342, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0560966, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0570033, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0598164, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0600932, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0606265, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0609648, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0617294, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0621479, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0624063, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0628977, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0633185, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0638154, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0642378, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.064734, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0662086, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0666554, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0672145, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0677238, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0701642, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.07269, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0733228, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.073753, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0741155, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0745401, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0750945, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0755475, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0763779, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.076821, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.077191, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.078223, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.078656, "supported_languages": null}, "macro.dbt.default__get_limit_subquery_sql": {"name": "default__get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_subquery_sql", "macro_sql": "{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0789676, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0797157, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0801349, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0805008, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0809445, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.081782, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0826855, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0833936, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.084565, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0852551, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0857937, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0887675, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0914705, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0930872, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0936096, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0965464, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0978043, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.0984702, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1010962, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1014433, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1031513, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1040306, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1052926, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.106308, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1064928, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1074758, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1079993, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.108624, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1092649, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1111984, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.11317, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.114514, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {% endif %}\n\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n    {%- if cols|length <= 0 -%}\n      {{- return('*') -}}\n    {%- else -%}\n        {%- for col in cols %}\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n        {%- endfor -%}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1165888, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.postgres__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1174667, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1176782, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1178792, "supported_languages": null}, "macro.dbt_utils.bigquery__get_table_types_sql": {"name": "bigquery__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_table_types_sql", "macro_sql": "{% macro bigquery__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as `table_type`\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1180763, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.postgres__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.122407, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1228971, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.123331, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1237519, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1241195, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.124505, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1256638, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1276987, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1284943, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1297975, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1310837, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1323574, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1330383, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1338186, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.135743, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1389701, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1395984, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.14019, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.142757, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.143353, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1448824, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1459837, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1466546, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1474032, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.148234, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1488717, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.150108, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1519408, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1532183, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1550286, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1558392, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.156495, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1583056, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1589081, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1602478, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1619833, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1649597, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1691384, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1706207, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1715233, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.171946, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1730897, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1737897, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.17455, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.178613, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1850586, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1860313, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1875782, "supported_languages": null}, "macro.dbt_utils.get_period_boundaries": {"name": "get_period_boundaries", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "unique_id": "macro.dbt_utils.get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1965373, "supported_languages": null}, "macro.dbt_utils.default__get_period_boundaries": {"name": "default__get_period_boundaries", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "unique_id": "macro.dbt_utils.default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.19765, "supported_languages": null}, "macro.dbt_utils.get_period_sql": {"name": "get_period_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "unique_id": "macro.dbt_utils.get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1983364, "supported_languages": null}, "macro.dbt_utils.default__get_period_sql": {"name": "default__get_period_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "unique_id": "macro.dbt_utils.default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.1995108, "supported_languages": null}, "macro.dbt_utils.materialization_insert_by_period_default": {"name": "materialization_insert_by_period_default", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2108455, "supported_languages": ["sql"]}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2116165, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.212072, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2131288, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2137406, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2141452, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2147355, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2151344, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2158005, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.216498, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.217433, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2188346, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2195518, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2205596, "supported_languages": null}, "macro.dbt_utils.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "unique_id": "macro.dbt_utils.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.postgres__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2230263, "supported_languages": null}, "macro.dbt_utils.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "unique_id": "macro.dbt_utils.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2234108, "supported_languages": null}, "macro.dbt_utils._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "unique_id": "macro.dbt_utils._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2239072, "supported_languages": null}, "macro.dbt_utils.postgres__split_part": {"name": "postgres__split_part", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "unique_id": "macro.dbt_utils.postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2246308, "supported_languages": null}, "macro.dbt_utils.redshift__split_part": {"name": "redshift__split_part", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "unique_id": "macro.dbt_utils.redshift__split_part", "macro_sql": "{% macro redshift__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2253854, "supported_languages": null}, "macro.dbt_utils.bigquery__split_part": {"name": "bigquery__split_part", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "unique_id": "macro.dbt_utils.bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2263536, "supported_languages": null}, "macro.dbt_utils.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "unique_id": "macro.dbt_utils.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2270818, "supported_languages": null}, "macro.dbt_utils.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "unique_id": "macro.dbt_utils.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2274044, "supported_languages": null}, "macro.dbt_utils.snowflake__escape_single_quotes": {"name": "snowflake__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "unique_id": "macro.dbt_utils.snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2277615, "supported_languages": null}, "macro.dbt_utils.bigquery__escape_single_quotes": {"name": "bigquery__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "unique_id": "macro.dbt_utils.bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.228105, "supported_languages": null}, "macro.dbt_utils.length": {"name": "length", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "unique_id": "macro.dbt_utils.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.228736, "supported_languages": null}, "macro.dbt_utils.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "unique_id": "macro.dbt_utils.default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.229032, "supported_languages": null}, "macro.dbt_utils.redshift__length": {"name": "redshift__length", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "unique_id": "macro.dbt_utils.redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2292778, "supported_languages": null}, "macro.dbt_utils.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "unique_id": "macro.dbt_utils.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt_utils')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2300358, "supported_languages": null}, "macro.dbt_utils.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "unique_id": "macro.dbt_utils.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2303562, "supported_languages": null}, "macro.dbt_utils.bigquery__array_concat": {"name": "bigquery__array_concat", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "unique_id": "macro.dbt_utils.bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2306576, "supported_languages": null}, "macro.dbt_utils.redshift__array_concat": {"name": "redshift__array_concat", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "unique_id": "macro.dbt_utils.redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2309551, "supported_languages": null}, "macro.dbt_utils.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dbt_utils.current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2319918, "supported_languages": null}, "macro.dbt_utils.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dbt_utils.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.23227, "supported_languages": null}, "macro.dbt_utils.redshift__current_timestamp": {"name": "redshift__current_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dbt_utils.redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2324488, "supported_languages": null}, "macro.dbt_utils.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dbt_utils.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.232623, "supported_languages": null}, "macro.dbt_utils.current_timestamp_in_utc": {"name": "current_timestamp_in_utc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dbt_utils.current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.postgres__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2330198, "supported_languages": null}, "macro.dbt_utils.default__current_timestamp_in_utc": {"name": "default__current_timestamp_in_utc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2332892, "supported_languages": null}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"name": "snowflake__current_timestamp_in_utc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2336226, "supported_languages": null}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"name": "postgres__current_timestamp_in_utc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2338905, "supported_languages": null}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"name": "redshift__current_timestamp_in_utc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2342024, "supported_languages": null}, "macro.dbt_utils.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "unique_id": "macro.dbt_utils.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt_utils')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2349842, "supported_languages": null}, "macro.dbt_utils.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "unique_id": "macro.dbt_utils.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2354622, "supported_languages": null}, "macro.dbt_utils.bigquery__array_append": {"name": "bigquery__array_append", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "unique_id": "macro.dbt_utils.bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2358897, "supported_languages": null}, "macro.dbt_utils.redshift__array_append": {"name": "redshift__array_append", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "unique_id": "macro.dbt_utils.redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2363007, "supported_languages": null}, "macro.dbt_utils.right": {"name": "right", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "unique_id": "macro.dbt_utils.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2373388, "supported_languages": null}, "macro.dbt_utils.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "unique_id": "macro.dbt_utils.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2376626, "supported_languages": null}, "macro.dbt_utils.bigquery__right": {"name": "bigquery__right", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "unique_id": "macro.dbt_utils.bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2380235, "supported_languages": null}, "macro.dbt_utils.snowflake__right": {"name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "unique_id": "macro.dbt_utils.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2383924, "supported_languages": null}, "macro.dbt_utils.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "unique_id": "macro.dbt_utils.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2390091, "supported_languages": null}, "macro.dbt_utils.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "unique_id": "macro.dbt_utils.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.239337, "supported_languages": null}, "macro.dbt_utils.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "unique_id": "macro.dbt_utils.bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2396414, "supported_languages": null}, "macro.dbt_utils.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "unique_id": "macro.dbt_utils.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.24026, "supported_languages": null}, "macro.dbt_utils.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "unique_id": "macro.dbt_utils.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    \n    any_value({{ expression }})\n    \n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2405114, "supported_languages": null}, "macro.dbt_utils.postgres__any_value": {"name": "postgres__any_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "unique_id": "macro.dbt_utils.postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n    {#- /*Postgres doesn't support any_value, so we're using min() to get the same result*/ -#}\n    min({{ expression }})\n    \n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2407658, "supported_languages": null}, "macro.dbt_utils.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "unique_id": "macro.dbt_utils.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2415555, "supported_languages": null}, "macro.dbt_utils.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "unique_id": "macro.dbt_utils.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2419367, "supported_languages": null}, "macro.dbt_utils.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "unique_id": "macro.dbt_utils.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2425878, "supported_languages": null}, "macro.dbt_utils.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "unique_id": "macro.dbt_utils.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2429156, "supported_languages": null}, "macro.dbt_utils.redshift__cast_bool_to_text": {"name": "redshift__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2432039, "supported_languages": null}, "macro.dbt_utils.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "unique_id": "macro.dbt_utils.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2438905, "supported_languages": null}, "macro.dbt_utils.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "unique_id": "macro.dbt_utils.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    \n    bool_or({{ expression }})\n    \n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.244139, "supported_languages": null}, "macro.dbt_utils.snowflake__bool_or": {"name": "snowflake__bool_or", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "unique_id": "macro.dbt_utils.snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n    \n    boolor_agg({{ expression }})\n    \n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2443776, "supported_languages": null}, "macro.dbt_utils.bigquery__bool_or": {"name": "bigquery__bool_or", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "unique_id": "macro.dbt_utils.bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n    \n    logical_or({{ expression }})\n    \n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2446158, "supported_languages": null}, "macro.dbt_utils.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "unique_id": "macro.dbt_utils.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2452242, "supported_languages": null}, "macro.dbt_utils.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "unique_id": "macro.dbt_utils.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.245685, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2467408, "supported_languages": null}, "macro.dbt_utils.identifier": {"name": "identifier", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "unique_id": "macro.dbt_utils.identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.247732, "supported_languages": null}, "macro.dbt_utils.default__identifier": {"name": "default__identifier", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "unique_id": "macro.dbt_utils.default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2479908, "supported_languages": null}, "macro.dbt_utils.bigquery__identifier": {"name": "bigquery__identifier", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "unique_id": "macro.dbt_utils.bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2482297, "supported_languages": null}, "macro.dbt_utils.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "unique_id": "macro.dbt_utils.array_construct", "macro_sql": "{% macro array_construct(inputs = [], data_type = api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt_utils')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2492816, "supported_languages": null}, "macro.dbt_utils.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "unique_id": "macro.dbt_utils.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.249836, "supported_languages": null}, "macro.dbt_utils.snowflake__array_construct": {"name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "unique_id": "macro.dbt_utils.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2501655, "supported_languages": null}, "macro.dbt_utils.redshift__array_construct": {"name": "redshift__array_construct", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "unique_id": "macro.dbt_utils.redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2504995, "supported_languages": null}, "macro.dbt_utils.bigquery__array_construct": {"name": "bigquery__array_construct", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "unique_id": "macro.dbt_utils.bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    [ {{ inputs|join(' , ') }} ]\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.25082, "supported_languages": null}, "macro.dbt_utils.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "unique_id": "macro.dbt_utils.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.postgres__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2544942, "supported_languages": null}, "macro.dbt_utils.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "unique_id": "macro.dbt_utils.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2553856, "supported_languages": null}, "macro.dbt_utils.bigquery__listagg": {"name": "bigquery__listagg", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "unique_id": "macro.dbt_utils.bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2560146, "supported_languages": null}, "macro.dbt_utils.postgres__listagg": {"name": "postgres__listagg", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "unique_id": "macro.dbt_utils.postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    \n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2568893, "supported_languages": null}, "macro.dbt_utils.redshift__listagg": {"name": "redshift__listagg", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "unique_id": "macro.dbt_utils.redshift__listagg", "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}  \n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2589383, "supported_languages": null}, "macro.dbt_utils.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "unique_id": "macro.dbt_utils.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.postgres__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.263207, "supported_languages": null}, "macro.dbt_utils.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "unique_id": "macro.dbt_utils.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2635918, "supported_languages": null}, "macro.dbt_utils.bigquery__datediff": {"name": "bigquery__datediff", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "unique_id": "macro.dbt_utils.bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2639532, "supported_languages": null}, "macro.dbt_utils.postgres__datediff": {"name": "postgres__datediff", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "unique_id": "macro.dbt_utils.postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2676837, "supported_languages": null}, "macro.dbt_utils.redshift__datediff": {"name": "redshift__datediff", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "unique_id": "macro.dbt_utils.redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.26815, "supported_languages": null}, "macro.dbt_utils.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "unique_id": "macro.dbt_utils.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.postgres__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.26924, "supported_languages": null}, "macro.dbt_utils.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "unique_id": "macro.dbt_utils.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2696228, "supported_languages": null}, "macro.dbt_utils.bigquery__dateadd": {"name": "bigquery__dateadd", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "unique_id": "macro.dbt_utils.bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.269995, "supported_languages": null}, "macro.dbt_utils.postgres__dateadd": {"name": "postgres__dateadd", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "unique_id": "macro.dbt_utils.postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2703736, "supported_languages": null}, "macro.dbt_utils.redshift__dateadd": {"name": "redshift__dateadd", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "unique_id": "macro.dbt_utils.redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2708137, "supported_languages": null}, "macro.dbt_utils.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.postgres__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2720811, "supported_languages": null}, "macro.dbt_utils.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.272273, "supported_languages": null}, "macro.dbt_utils.redshift__type_string": {"name": "redshift__type_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2724624, "supported_languages": null}, "macro.dbt_utils.postgres__type_string": {"name": "postgres__type_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2726402, "supported_languages": null}, "macro.dbt_utils.snowflake__type_string": {"name": "snowflake__type_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2728448, "supported_languages": null}, "macro.dbt_utils.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.postgres__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2732162, "supported_languages": null}, "macro.dbt_utils.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2733996, "supported_languages": null}, "macro.dbt_utils.postgres__type_timestamp": {"name": "postgres__type_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() %}\n    timestamp without time zone\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.273575, "supported_languages": null}, "macro.dbt_utils.snowflake__type_timestamp": {"name": "snowflake__type_timestamp", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2737446, "supported_languages": null}, "macro.dbt_utils.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.274111, "supported_languages": null}, "macro.dbt_utils.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.274302, "supported_languages": null}, "macro.dbt_utils.bigquery__type_float": {"name": "bigquery__type_float", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.274476, "supported_languages": null}, "macro.dbt_utils.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2748523, "supported_languages": null}, "macro.dbt_utils.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2750516, "supported_languages": null}, "macro.dbt_utils.bigquery__type_numeric": {"name": "bigquery__type_numeric", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.275227, "supported_languages": null}, "macro.dbt_utils.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2757306, "supported_languages": null}, "macro.dbt_utils.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2759283, "supported_languages": null}, "macro.dbt_utils.bigquery__type_bigint": {"name": "bigquery__type_bigint", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2761052, "supported_languages": null}, "macro.dbt_utils.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2764647, "supported_languages": null}, "macro.dbt_utils.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2766461, "supported_languages": null}, "macro.dbt_utils.bigquery__type_int": {"name": "bigquery__type_int", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dbt_utils.bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2768464, "supported_languages": null}, "macro.dbt_utils.position": {"name": "position", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "unique_id": "macro.dbt_utils.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2776349, "supported_languages": null}, "macro.dbt_utils.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "unique_id": "macro.dbt_utils.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2779598, "supported_languages": null}, "macro.dbt_utils.bigquery__position": {"name": "bigquery__position", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "unique_id": "macro.dbt_utils.bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2782834, "supported_languages": null}, "macro.dbt_utils.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "unique_id": "macro.dbt_utils.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2788367, "supported_languages": null}, "macro.dbt_utils.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "unique_id": "macro.dbt_utils.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2790854, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2807505, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.283111, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.284117, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"name": "redshift__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "unique_id": "macro.dbt_utils.redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2851653, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2856014, "supported_languages": null}, "macro.dbt_utils.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "unique_id": "macro.dbt_utils.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2863157, "supported_languages": null}, "macro.dbt_utils.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "unique_id": "macro.dbt_utils.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2866237, "supported_languages": null}, "macro.dbt_utils.bigquery__date_trunc": {"name": "bigquery__date_trunc", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "unique_id": "macro.dbt_utils.bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2869241, "supported_languages": null}, "macro.dbt_utils.except": {"name": "except", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "unique_id": "macro.dbt_utils.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2874658, "supported_languages": null}, "macro.dbt_utils.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "unique_id": "macro.dbt_utils.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2876544, "supported_languages": null}, "macro.dbt_utils.bigquery__except": {"name": "bigquery__except", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "unique_id": "macro.dbt_utils.bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2878327, "supported_languages": null}, "macro.dbt_utils.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "unique_id": "macro.dbt_utils.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2886028, "supported_languages": null}, "macro.dbt_utils.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "unique_id": "macro.dbt_utils.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2889686, "supported_languages": null}, "macro.dbt_utils.snowflake__safe_cast": {"name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "unique_id": "macro.dbt_utils.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.289311, "supported_languages": null}, "macro.dbt_utils.bigquery__safe_cast": {"name": "bigquery__safe_cast", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "unique_id": "macro.dbt_utils.bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.289783, "supported_languages": null}, "macro.dbt_utils.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "unique_id": "macro.dbt_utils.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.postgres__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2908509, "supported_languages": null}, "macro.dbt_utils.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "unique_id": "macro.dbt_utils.default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.291432, "supported_languages": null}, "macro.dbt_utils.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "unique_id": "macro.dbt_utils.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2917688, "supported_languages": null}, "macro.dbt_utils.postgres__last_day": {"name": "postgres__last_day", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "unique_id": "macro.dbt_utils.postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2926178, "supported_languages": null}, "macro.dbt_utils.redshift__last_day": {"name": "redshift__last_day", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "unique_id": "macro.dbt_utils.redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2930539, "supported_languages": null}, "macro.dbt_utils.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "unique_id": "macro.dbt_utils.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2936113, "supported_languages": null}, "macro.dbt_utils.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "unique_id": "macro.dbt_utils.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2938027, "supported_languages": null}, "macro.dbt_utils.bigquery__intersect": {"name": "bigquery__intersect", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "unique_id": "macro.dbt_utils.bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2939818, "supported_languages": null}, "macro.dbt_utils.cast_array_to_string": {"name": "cast_array_to_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "unique_id": "macro.dbt_utils.cast_array_to_string", "macro_sql": "{% macro cast_array_to_string(array) %}\n  {{ adapter.dispatch('cast_array_to_string', 'dbt_utils') (array) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.postgres__cast_array_to_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2947958, "supported_languages": null}, "macro.dbt_utils.default__cast_array_to_string": {"name": "default__cast_array_to_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "unique_id": "macro.dbt_utils.default__cast_array_to_string", "macro_sql": "{% macro default__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2951293, "supported_languages": null}, "macro.dbt_utils.postgres__cast_array_to_string": {"name": "postgres__cast_array_to_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "unique_id": "macro.dbt_utils.postgres__cast_array_to_string", "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\n    {%- set array_as_string -%}cast({{ array }} as {{ dbt_utils.type_string() }}){%- endset -%}\n    {{ dbt_utils.replace(dbt_utils.replace(array_as_string,\"'}'\",\"']'\"),\"'{'\",\"'['\") }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2957993, "supported_languages": null}, "macro.dbt_utils.redshift__cast_array_to_string": {"name": "redshift__cast_array_to_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "unique_id": "macro.dbt_utils.redshift__cast_array_to_string", "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.296131, "supported_languages": null}, "macro.dbt_utils.bigquery__cast_array_to_string": {"name": "bigquery__cast_array_to_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "unique_id": "macro.dbt_utils.bigquery__cast_array_to_string", "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\n    '['||(select string_agg(cast(element as string), ',') from unnest({{ array }}) element)||']'\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2963808, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2973652, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.298024, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2987113, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.2991056, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.3003418, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.3018417, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.3026989, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.3037941, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.304477, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.3048997, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.3062878, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.3082209, "supported_languages": null}, "macro.dbt_utils.test_not_null_where": {"name": "test_not_null_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "unique_id": "macro.dbt_utils.test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.3091419, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_where": {"name": "default__test_not_null_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "unique_id": "macro.dbt_utils.default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.3095877, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.3104212, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.311153, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.3125284, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.313423, "supported_languages": null}, "macro.dbt_utils.test_unique_where": {"name": "test_unique_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "unique_id": "macro.dbt_utils.test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.3143182, "supported_languages": null}, "macro.dbt_utils.default__test_unique_where": {"name": "default__test_unique_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "unique_id": "macro.dbt_utils.default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.314758, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.3197699, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.323142, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.3243682, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.325143, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.3263094, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.327331, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.3283062, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.328835, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.3299856, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.3314028, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.3322341, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.33299, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.3340204, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1697110853.3347845, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"test.tree_aid.source_unique_onadata_gb8_vte_edp_survey_apr-jun2022_id.bb39fc7787": ["source.tree_aid.onadata.gb8_vte_edp_survey_apr-jun2022"], "test.tree_aid.source_not_null_onadata_gb8_vte_edp_survey_apr-jun2022_id.a519ca8ffa": ["source.tree_aid.onadata.gb8_vte_edp_survey_apr-jun2022"], "test.tree_aid.source_unique_onadata_mb6_vte_edp_survey_apr-jun2022_id.dc183f146c": ["source.tree_aid.onadata.mb6_vte_edp_survey_apr-jun2022"], "test.tree_aid.source_not_null_onadata_mb6_vte_edp_survey_apr-jun2022_id.c22aeb3fc2": ["source.tree_aid.onadata.mb6_vte_edp_survey_apr-jun2022"], "test.tree_aid.source_unique_onadata_a_village_tree_enterprise_co-op_mb2_mali_id.c92c5a5ba0": ["source.tree_aid.onadata.a_village_tree_enterprise_co-op_mb2_mali"], "test.tree_aid.source_not_null_onadata_a_village_tree_enterprise_co-op_mb2_mali_id.8c54939d9d": ["source.tree_aid.onadata.a_village_tree_enterprise_co-op_mb2_mali"], "test.tree_aid.source_unique_onadata_a_vte_coop_assessment_gb1_id.3b962c2661": ["source.tree_aid.onadata.a_vte_coop_assessment_gb1"], "test.tree_aid.source_not_null_onadata_a_vte_coop_assessment_gb1_id.0262004c72": ["source.tree_aid.onadata.a_vte_coop_assessment_gb1"], "test.tree_aid.source_unique_onadata_tree_aid_rhomis_bc4_apr-jun22_final_id.749d93e16c": ["source.tree_aid.onadata.tree_aid_rhomis_bc4_apr-jun22_final"], "test.tree_aid.source_not_null_onadata_tree_aid_rhomis_bc4_apr-jun22_final_id.8f391b36bc": ["source.tree_aid.onadata.tree_aid_rhomis_bc4_apr-jun22_final"], "test.tree_aid.source_unique_onadata_burkina_ta_bb1_v1_3_1_tablet_id.c7047c5035": ["source.tree_aid.onadata.burkina_ta_bb1_v1_3_1_tablet"], "test.tree_aid.source_not_null_onadata_burkina_ta_bb1_v1_3_1_tablet_id.aa7790be9f": ["source.tree_aid.onadata.burkina_ta_bb1_v1_3_1_tablet"], "test.tree_aid.source_unique_onadata_burkina_ta_baseline_v1_3_webform_id.30c8fd9b0d": ["source.tree_aid.onadata.burkina_ta_baseline_v1_3_webform"], "test.tree_aid.source_not_null_onadata_burkina_ta_baseline_v1_3_webform_id.4ed897e765": ["source.tree_aid.onadata.burkina_ta_baseline_v1_3_webform"], "test.tree_aid.source_unique_onadata_ta_rho_mis_bb6_oct_dec21_id.cb2a2a63c0": ["source.tree_aid.onadata.ta_rho_mis_bb6_oct_dec21"], "test.tree_aid.source_not_null_onadata_ta_rho_mis_bb6_oct_dec21_id.b76b7b158b": ["source.tree_aid.onadata.ta_rho_mis_bb6_oct_dec21"], "test.tree_aid.source_unique_onadata_ta_rho_mis_bc1_endline_oct2020_final_id.33c0709f05": ["source.tree_aid.onadata.ta_rho_mis_bc1_endline_oct2020_final"], "test.tree_aid.source_not_null_onadata_ta_rho_mis_bc1_endline_oct2020_final_id.32dcf43437": ["source.tree_aid.onadata.ta_rho_mis_bc1_endline_oct2020_final"], "test.tree_aid.source_unique_onadata_household_income_mtr_bc1_id.6592797a5c": ["source.tree_aid.onadata.household_income_mtr_bc1"], "test.tree_aid.source_not_null_onadata_household_income_mtr_bc1_id.5cf5fc2e12": ["source.tree_aid.onadata.household_income_mtr_bc1"], "test.tree_aid.source_unique_onadata_voice_choice_control_mtr_bc1_id.d708109868": ["source.tree_aid.onadata.voice_choice_control_mtr_bc1"], "test.tree_aid.source_not_null_onadata_voice_choice_control_mtr_bc1_id.76255dcbc2": ["source.tree_aid.onadata.voice_choice_control_mtr_bc1"], "test.tree_aid.source_unique_onadata_ta_rhomis_eco_q1_2022_id.20f923d61c": ["source.tree_aid.onadata.ta_rhomis_eco_q1_2022"], "test.tree_aid.source_not_null_onadata_ta_rhomis_eco_q1_2022_id.1833631958": ["source.tree_aid.onadata.ta_rhomis_eco_q1_2022"], "test.tree_aid.source_unique_onadata_ethiopia_ea3_eb5_1_3_4_id.d0b90c6208": ["source.tree_aid.onadata.ethiopia_ea3_eb5_1_3_4"], "test.tree_aid.source_not_null_onadata_ethiopia_ea3_eb5_1_3_4_id.888a32f1ed": ["source.tree_aid.onadata.ethiopia_ea3_eb5_1_3_4"], "test.tree_aid.source_unique_onadata_ethiopia_meki_2_extra_id.0bb7330c0b": ["source.tree_aid.onadata.ethiopia_meki_2_extra"], "test.tree_aid.source_not_null_onadata_ethiopia_meki_2_extra_id.050b572bea": ["source.tree_aid.onadata.ethiopia_meki_2_extra"], "test.tree_aid.source_unique_onadata_ethiopia_meki_2_id.cbfc70ce0f": ["source.tree_aid.onadata.ethiopia_meki_2"], "test.tree_aid.source_not_null_onadata_ethiopia_meki_2_id.b3d085d711": ["source.tree_aid.onadata.ethiopia_meki_2"], "test.tree_aid.source_unique_onadata_eb8_2019_id.f7b3def8b9": ["source.tree_aid.onadata.eb8_2019"], "test.tree_aid.source_not_null_onadata_eb8_2019_id.98a94ac07c": ["source.tree_aid.onadata.eb8_2019"], "test.tree_aid.source_unique_onadata_ta_rhomis_eb3eb8_2020_id.036d74339b": ["source.tree_aid.onadata.ta_rhomis_eb3eb8_2020"], "test.tree_aid.source_not_null_onadata_ta_rhomis_eb3eb8_2020_id.207cf662ee": ["source.tree_aid.onadata.ta_rhomis_eb3eb8_2020"], "test.tree_aid.source_unique_onadata_ta_rhomis_gb8_endline_jan-mar2021_consolidated_id.2008927689": ["source.tree_aid.onadata.ta_rhomis_gb8_endline_jan-mar2021_consolidated"], "test.tree_aid.source_not_null_onadata_ta_rhomis_gb8_endline_jan-mar2021_consolidated_id.5c43b81e9c": ["source.tree_aid.onadata.ta_rhomis_gb8_endline_jan-mar2021_consolidated"], "test.tree_aid.source_unique_onadata_gb1_ta_baseline_v1_3_3_id.27ffa08831": ["source.tree_aid.onadata.gb1_ta_baseline_v1_3_3"], "test.tree_aid.source_not_null_onadata_gb1_ta_baseline_v1_3_3_id.9aecd78f35": ["source.tree_aid.onadata.gb1_ta_baseline_v1_3_3"], "test.tree_aid.source_unique_onadata_tree_aid_rhomis_gb8_final_id.0bc9453200": ["source.tree_aid.onadata.tree_aid_rhomis_gb8_final"], "test.tree_aid.source_not_null_onadata_tree_aid_rhomis_gb8_final_id.2a076200ce": ["source.tree_aid.onadata.tree_aid_rhomis_gb8_final"], "test.tree_aid.source_unique_onadata_ta_rhomis_gb1_2021_id.c38987e9fe": ["source.tree_aid.onadata.ta_rhomis_gb1_2021"], "test.tree_aid.source_not_null_onadata_ta_rhomis_gb1_2021_id.90fb347399": ["source.tree_aid.onadata.ta_rhomis_gb1_2021"], "test.tree_aid.source_unique_onadata_ta_rho_mis_gc6_2021_id.4b0c6bbcac": ["source.tree_aid.onadata.ta_rho_mis_gc6_2021"], "test.tree_aid.source_not_null_onadata_ta_rho_mis_gc6_2021_id.f85f8fda91": ["source.tree_aid.onadata.ta_rho_mis_gc6_2021"], "test.tree_aid.source_unique_onadata_ta_rhomis_gc3_oct_2020_id.8f15065350": ["source.tree_aid.onadata.ta_rhomis_gc3_oct_2020"], "test.tree_aid.source_not_null_onadata_ta_rhomis_gc3_oct_2020_id.7affd66d1c": ["source.tree_aid.onadata.ta_rhomis_gc3_oct_2020"], "test.tree_aid.source_unique_onadata_mb2_baseline_id.b7b188a1df": ["source.tree_aid.onadata.mb2_baseline"], "test.tree_aid.source_not_null_onadata_mb2_baseline_id.9788ffb6eb": ["source.tree_aid.onadata.mb2_baseline"], "test.tree_aid.source_unique_onadata_mb2_rhomis_endline_april2020_id.81957106dc": ["source.tree_aid.onadata.mb2_rhomis_endline_april2020"], "test.tree_aid.source_not_null_onadata_mb2_rhomis_endline_april2020_id.601c4ecc38": ["source.tree_aid.onadata.mb2_rhomis_endline_april2020"], "test.tree_aid.source_unique_onadata_tree_aid_rho_mis_mb6_2020_id.06f6c58c7a": ["source.tree_aid.onadata.tree_aid_rho_mis_mb6_2020"], "test.tree_aid.source_not_null_onadata_tree_aid_rho_mis_mb6_2020_id.e6117b44d4": ["source.tree_aid.onadata.tree_aid_rho_mis_mb6_2020"], "test.tree_aid.source_unique_onadata_mb6_income_agri_nrm_vcc_jan-mar22_id.3ce154b735": ["source.tree_aid.onadata.mb6_income_agri_nrm_vcc_jan-mar22"], "test.tree_aid.source_not_null_onadata_mb6_income_agri_nrm_vcc_jan-mar22_id.7e6b2eeb63": ["source.tree_aid.onadata.mb6_income_agri_nrm_vcc_jan-mar22"], "test.tree_aid.source_unique_onadata_tree_aid_rhomis_na6_endline_id.2a0eec5d18": ["source.tree_aid.onadata.tree_aid_rhomis_na6_endline"], "test.tree_aid.source_not_null_onadata_tree_aid_rhomis_na6_endline_id.8398398f6d": ["source.tree_aid.onadata.tree_aid_rhomis_na6_endline"], "test.tree_aid.source_unique_onadata_tree_aid_rhomis_2_0_niger_na4_id.4b6fd3f547": ["source.tree_aid.onadata.tree_aid_rhomis_2_0_niger_na4"], "test.tree_aid.source_not_null_onadata_tree_aid_rhomis_2_0_niger_na4_id.cdee9abf37": ["source.tree_aid.onadata.tree_aid_rhomis_2_0_niger_na4"], "test.tree_aid.source_unique_onadata_tree_aid_rhomis_na6_finale_id.e190dd457f": ["source.tree_aid.onadata.tree_aid_rhomis_na6_finale"], "test.tree_aid.source_not_null_onadata_tree_aid_rhomis_na6_finale_id.18bde80bdb": ["source.tree_aid.onadata.tree_aid_rhomis_na6_finale"], "test.tree_aid.source_unique_onadata_rhomis_treeaid_na4_endline_june2021_tele_final_id.9e48953ec7": ["source.tree_aid.onadata.rhomis_treeaid_na4_endline_june2021_tele_final"], "test.tree_aid.source_not_null_onadata_rhomis_treeaid_na4_endline_june2021_tele_final_id.4c4114764e": ["source.tree_aid.onadata.rhomis_treeaid_na4_endline_june2021_tele_final"], "test.tree_aid.source_unique_onadata_mc2_rho_mis_jul-sep22_final_id.16515c892e": ["source.tree_aid.onadata.mc2_rho_mis_jul-sep22_final"], "test.tree_aid.source_not_null_onadata_mc2_rho_mis_jul-sep22_final_id.9443341505": ["source.tree_aid.onadata.mc2_rho_mis_jul-sep22_final"], "test.tree_aid.source_unique_onadata_tree_aid_rho_mis_bc3_oct-dec2022_final_id.bf80769e43": ["source.tree_aid.onadata.tree_aid_rho_mis_bc3_oct-dec2022_final"], "test.tree_aid.source_not_null_onadata_tree_aid_rho_mis_bc3_oct-dec2022_final_id.37876d4f60": ["source.tree_aid.onadata.tree_aid_rho_mis_bc3_oct-dec2022_final"], "test.tree_aid.source_unique_onadata_mc3_rho_mis_oct-dec22_final_id.2107d53bf0": ["source.tree_aid.onadata.mc3_rho_mis_oct-dec22_final"], "test.tree_aid.source_not_null_onadata_mc3_rho_mis_oct-dec22_final_id.04aaccab48": ["source.tree_aid.onadata.mc3_rho_mis_oct-dec22_final"], "test.tree_aid.source_unique_onadata_ec0_mini_rho_mis_jan-mar2023_final_id.331a8dbd09": ["source.tree_aid.onadata.ec0_mini_rho_mis_jan-mar2023_final"], "test.tree_aid.source_not_null_onadata_ec0_mini_rho_mis_jan-mar2023_final_id.46be135da3": ["source.tree_aid.onadata.ec0_mini_rho_mis_jan-mar2023_final"], "test.tree_aid.source_unique_onadata_gc6_perimeter_village_may2021_survey_final_id.253a89e524": ["source.tree_aid.onadata.gc6_perimeter_village_may2021_survey_final"], "test.tree_aid.source_not_null_onadata_gc6_perimeter_village_may2021_survey_final_id.3447545492": ["source.tree_aid.onadata.gc6_perimeter_village_may2021_survey_final"], "model.tree_aid.enterprise_survey_derivatives": ["model.tree_aid.enterprise_surveys", "model.tree_aid.enterprise_surveys", "model.tree_aid.stg_core_questions_master", "model.tree_aid.stg_core_questions_union", "model.tree_aid.stg_survey_master"], "model.tree_aid.enterprise_survey_product_combined": ["model.tree_aid.enterprise_survey_product", "model.tree_aid.enterprise_surveys"], "model.tree_aid.enterprise_survey_product": ["model.tree_aid.enterprise_surveys", "model.tree_aid.enterprise_surveys", "model.tree_aid.stg_core_questions_master", "model.tree_aid.stg_core_questions_union", "model.tree_aid.stg_survey_master"], "model.tree_aid.int_filter_values": ["model.tree_aid.beneficiaries", "model.tree_aid.enterprise_surveys", "model.tree_aid.land_surveys", "model.tree_aid.rhomis_surveys"], "model.tree_aid.survey_test": ["model.tree_aid.enterprise_surveys", "model.tree_aid.land_surveys", "model.tree_aid.rhomis_surveys"], "model.tree_aid.enterprise_surveys": ["model.tree_aid.stg_core_questions_master", "model.tree_aid.stg_core_questions_union", "model.tree_aid.stg_survey_master"], "model.tree_aid.int_land_restoration_activities": ["model.tree_aid.land_surveys"], "model.tree_aid.land_surveys_planted": ["model.tree_aid.land_surveys", "model.tree_aid.stg_core_questions_master", "model.tree_aid.stg_core_questions_union", "model.tree_aid.stg_survey_master", "source.tree_aid.airbyte.trees_planted_legacy"], "model.tree_aid.land_surveys": ["model.tree_aid.stg_core_questions_master", "model.tree_aid.stg_core_questions_union", "model.tree_aid.stg_survey_master", "source.tree_aid.airbyte.land_area_legacy"], "model.tree_aid.rhomis_nrm_land_techniques": ["model.tree_aid.rhomis_nrm_techniques"], "model.tree_aid.rhomis_nrm_techniques": ["model.tree_aid.stg_rhomis_data"], "model.tree_aid.rhomis_survey_aggregations": ["model.tree_aid.rhomis_surveys", "source.tree_aid.airbyte.projects"], "model.tree_aid.stg_rhomis_data": ["model.tree_aid.stg_core_questions_master", "model.tree_aid.stg_core_questions_union", "model.tree_aid.stg_survey_master"], "model.tree_aid.stg_core_questions_union": ["model.tree_aid.stg_core_questions_master", "model.tree_aid.stg_core_questions_master", "model.tree_aid.stg_survey_definitions_master", "model.tree_aid.stg_survey_definitions_master", "model.tree_aid.stg_survey_master", "model.tree_aid.stg_survey_master"], "model.tree_aid.stg_survey_master": ["source.tree_aid.airbyte.surveys"], "model.tree_aid.stg_survey_definitions_master": ["source.tree_aid.airbyte.survey_definitions"], "model.tree_aid.stg_core_questions_master": ["source.tree_aid.airbyte.core_questions"], "model.tree_aid.beneficiaries": ["model.tree_aid.stg_beneficiaries"], "model.tree_aid.stg_beneficiaries": ["model.tree_aid.stg_beneficiaries_form_data", "source.tree_aid.airbyte.beneficiaries_list"], "model.tree_aid.stg_beneficiaries_form_data": ["source.tree_aid.airbyte.sbm_beneficiary_list_1", "source.tree_aid.airbyte.sbm_beneficiary_list_1"], "test.tree_aid.empty_tables": ["model.tree_aid.enterprise_surveys", "model.tree_aid.land_surveys", "model.tree_aid.rhomis_surveys"], "test.tree_aid.source_unique_airbyte_surveys_form_id.16310e6b4f": ["source.tree_aid.airbyte.surveys"], "test.tree_aid.source_not_null_airbyte_surveys_form_id.67862aa9d2": ["source.tree_aid.airbyte.surveys"], "test.tree_aid.source_unique_airbyte_core_questions_id.53ef7260a7": ["source.tree_aid.airbyte.core_questions"], "test.tree_aid.source_not_null_airbyte_core_questions_id.d86f814b39": ["source.tree_aid.airbyte.core_questions"], "test.tree_aid.source_unique_airbyte_rhomis_indicators_id_hh.70d520ef17": ["source.tree_aid.airbyte.rhomis_indicators"], "test.tree_aid.source_not_null_airbyte_rhomis_indicators_id_hh.e86e5fe090": ["source.tree_aid.airbyte.rhomis_indicators"], "model.tree_aid.stg_rhomis_indicators": ["source.tree_aid.airbyte.rhomis_indicators", "source.tree_aid.csv.rhomis_indicators"], "model.tree_aid.rhomis_surveys": ["model.tree_aid.stg_rhomis_data", "model.tree_aid.stg_rhomis_indicators"], "source.tree_aid.onadata.registry": [], "source.tree_aid.onadata.gb8_vte_edp_survey_apr-jun2022": [], "source.tree_aid.onadata.mb6_vte_edp_survey_apr-jun2022": [], "source.tree_aid.onadata.a_village_tree_enterprise_co-op_mb2_mali": [], "source.tree_aid.onadata.a_vte_coop_assessment_gb1": [], "source.tree_aid.onadata.tree_aid_rhomis_bc4_apr-jun22_final": [], "source.tree_aid.onadata.burkina_ta_bb1_v1_3_1_tablet": [], "source.tree_aid.onadata.burkina_ta_baseline_v1_3_webform": [], "source.tree_aid.onadata.ta_rho_mis_bb6_oct_dec21": [], "source.tree_aid.onadata.ta_rho_mis_bc1_endline_oct2020_final": [], "source.tree_aid.onadata.household_income_mtr_bc1": [], "source.tree_aid.onadata.voice_choice_control_mtr_bc1": [], "source.tree_aid.onadata.ta_rhomis_eco_q1_2022": [], "source.tree_aid.onadata.ethiopia_ea3_eb5_1_3_4": [], "source.tree_aid.onadata.ethiopia_meki_2_extra": [], "source.tree_aid.onadata.ethiopia_meki_2": [], "source.tree_aid.onadata.eb8_2019": [], "source.tree_aid.onadata.ta_rhomis_eb3eb8_2020": [], "source.tree_aid.onadata.ta_rhomis_gb8_endline_jan-mar2021_consolidated": [], "source.tree_aid.onadata.gb1_ta_baseline_v1_3_3": [], "source.tree_aid.onadata.tree_aid_rhomis_gb8_final": [], "source.tree_aid.onadata.ta_rhomis_gb1_2021": [], "source.tree_aid.onadata.ta_rho_mis_gc6_2021": [], "source.tree_aid.onadata.ta_rhomis_gc3_oct_2020": [], "source.tree_aid.onadata.mb2_baseline": [], "source.tree_aid.onadata.mb2_rhomis_endline_april2020": [], "source.tree_aid.onadata.tree_aid_rho_mis_mb6_2020": [], "source.tree_aid.onadata.mb6_income_agri_nrm_vcc_jan-mar22": [], "source.tree_aid.onadata.tree_aid_rhomis_na6_endline": [], "source.tree_aid.onadata.tree_aid_rhomis_2_0_niger_na4": [], "source.tree_aid.onadata.tree_aid_rhomis_na6_finale": [], "source.tree_aid.onadata.rhomis_treeaid_na4_endline_june2021_tele_final": [], "source.tree_aid.onadata.mc2_rho_mis_jul-sep22_final": [], "source.tree_aid.onadata.tree_aid_rho_mis_bc3_oct-dec2022_final": [], "source.tree_aid.onadata.mc3_rho_mis_oct-dec22_final": [], "source.tree_aid.onadata.ec0_mini_rho_mis_jan-mar2023_final": [], "source.tree_aid.onadata.gc6_perimeter_village_may2021_survey_final": [], "source.tree_aid.csv.rhomis_indicators": [], "source.tree_aid.airbyte.surveys": [], "source.tree_aid.airbyte.survey_definitions": [], "source.tree_aid.airbyte.core_questions": [], "source.tree_aid.airbyte.rhomis_indicators": [], "source.tree_aid.airbyte.projects": [], "source.tree_aid.airbyte.trees_planted_legacy": [], "source.tree_aid.airbyte.country_hh_size": [], "source.tree_aid.airbyte.vte_groups_legacy": [], "source.tree_aid.airbyte.land_area_legacy": [], "source.tree_aid.airbyte.beneficiaries_list": [], "source.tree_aid.airbyte.sbm_beneficiary_list_1": [], "source.tree_aid.airbyte.sbm_mb6_r_ho_mis_endline__apr__jun2023": [], "source.tree_aid.airbyte.sbm_mc2_r_ho_mis__jul__sep22_final": [], "source.tree_aid.airbyte.chc_mc2_r_ho_mis__jul__sep22_final": [], "source.tree_aid.airbyte.sbm_bc3_product_valu___juil_sept_2023_final": [], "source.tree_aid.airbyte.sbm_bc3_product_valu__es_repeat_derivatives": [], "source.tree_aid.airbyte.chc_bc3_product_valu___juil_sept_2023_final": [], "source.tree_aid.airbyte.sbm_bc3_land_restora__lanted_repeat_planted": [], "source.tree_aid.airbyte.sbm_bc3_land_restoration_survey_2022": []}, "child_map": {"test.tree_aid.source_unique_onadata_gb8_vte_edp_survey_apr-jun2022_id.bb39fc7787": [], "test.tree_aid.source_not_null_onadata_gb8_vte_edp_survey_apr-jun2022_id.a519ca8ffa": [], "test.tree_aid.source_unique_onadata_mb6_vte_edp_survey_apr-jun2022_id.dc183f146c": [], "test.tree_aid.source_not_null_onadata_mb6_vte_edp_survey_apr-jun2022_id.c22aeb3fc2": [], "test.tree_aid.source_unique_onadata_a_village_tree_enterprise_co-op_mb2_mali_id.c92c5a5ba0": [], "test.tree_aid.source_not_null_onadata_a_village_tree_enterprise_co-op_mb2_mali_id.8c54939d9d": [], "test.tree_aid.source_unique_onadata_a_vte_coop_assessment_gb1_id.3b962c2661": [], "test.tree_aid.source_not_null_onadata_a_vte_coop_assessment_gb1_id.0262004c72": [], "test.tree_aid.source_unique_onadata_tree_aid_rhomis_bc4_apr-jun22_final_id.749d93e16c": [], "test.tree_aid.source_not_null_onadata_tree_aid_rhomis_bc4_apr-jun22_final_id.8f391b36bc": [], "test.tree_aid.source_unique_onadata_burkina_ta_bb1_v1_3_1_tablet_id.c7047c5035": [], "test.tree_aid.source_not_null_onadata_burkina_ta_bb1_v1_3_1_tablet_id.aa7790be9f": [], "test.tree_aid.source_unique_onadata_burkina_ta_baseline_v1_3_webform_id.30c8fd9b0d": [], "test.tree_aid.source_not_null_onadata_burkina_ta_baseline_v1_3_webform_id.4ed897e765": [], "test.tree_aid.source_unique_onadata_ta_rho_mis_bb6_oct_dec21_id.cb2a2a63c0": [], "test.tree_aid.source_not_null_onadata_ta_rho_mis_bb6_oct_dec21_id.b76b7b158b": [], "test.tree_aid.source_unique_onadata_ta_rho_mis_bc1_endline_oct2020_final_id.33c0709f05": [], "test.tree_aid.source_not_null_onadata_ta_rho_mis_bc1_endline_oct2020_final_id.32dcf43437": [], "test.tree_aid.source_unique_onadata_household_income_mtr_bc1_id.6592797a5c": [], "test.tree_aid.source_not_null_onadata_household_income_mtr_bc1_id.5cf5fc2e12": [], "test.tree_aid.source_unique_onadata_voice_choice_control_mtr_bc1_id.d708109868": [], "test.tree_aid.source_not_null_onadata_voice_choice_control_mtr_bc1_id.76255dcbc2": [], "test.tree_aid.source_unique_onadata_ta_rhomis_eco_q1_2022_id.20f923d61c": [], "test.tree_aid.source_not_null_onadata_ta_rhomis_eco_q1_2022_id.1833631958": [], "test.tree_aid.source_unique_onadata_ethiopia_ea3_eb5_1_3_4_id.d0b90c6208": [], "test.tree_aid.source_not_null_onadata_ethiopia_ea3_eb5_1_3_4_id.888a32f1ed": [], "test.tree_aid.source_unique_onadata_ethiopia_meki_2_extra_id.0bb7330c0b": [], "test.tree_aid.source_not_null_onadata_ethiopia_meki_2_extra_id.050b572bea": [], "test.tree_aid.source_unique_onadata_ethiopia_meki_2_id.cbfc70ce0f": [], "test.tree_aid.source_not_null_onadata_ethiopia_meki_2_id.b3d085d711": [], "test.tree_aid.source_unique_onadata_eb8_2019_id.f7b3def8b9": [], "test.tree_aid.source_not_null_onadata_eb8_2019_id.98a94ac07c": [], "test.tree_aid.source_unique_onadata_ta_rhomis_eb3eb8_2020_id.036d74339b": [], "test.tree_aid.source_not_null_onadata_ta_rhomis_eb3eb8_2020_id.207cf662ee": [], "test.tree_aid.source_unique_onadata_ta_rhomis_gb8_endline_jan-mar2021_consolidated_id.2008927689": [], "test.tree_aid.source_not_null_onadata_ta_rhomis_gb8_endline_jan-mar2021_consolidated_id.5c43b81e9c": [], "test.tree_aid.source_unique_onadata_gb1_ta_baseline_v1_3_3_id.27ffa08831": [], "test.tree_aid.source_not_null_onadata_gb1_ta_baseline_v1_3_3_id.9aecd78f35": [], "test.tree_aid.source_unique_onadata_tree_aid_rhomis_gb8_final_id.0bc9453200": [], "test.tree_aid.source_not_null_onadata_tree_aid_rhomis_gb8_final_id.2a076200ce": [], "test.tree_aid.source_unique_onadata_ta_rhomis_gb1_2021_id.c38987e9fe": [], "test.tree_aid.source_not_null_onadata_ta_rhomis_gb1_2021_id.90fb347399": [], "test.tree_aid.source_unique_onadata_ta_rho_mis_gc6_2021_id.4b0c6bbcac": [], "test.tree_aid.source_not_null_onadata_ta_rho_mis_gc6_2021_id.f85f8fda91": [], "test.tree_aid.source_unique_onadata_ta_rhomis_gc3_oct_2020_id.8f15065350": [], "test.tree_aid.source_not_null_onadata_ta_rhomis_gc3_oct_2020_id.7affd66d1c": [], "test.tree_aid.source_unique_onadata_mb2_baseline_id.b7b188a1df": [], "test.tree_aid.source_not_null_onadata_mb2_baseline_id.9788ffb6eb": [], "test.tree_aid.source_unique_onadata_mb2_rhomis_endline_april2020_id.81957106dc": [], "test.tree_aid.source_not_null_onadata_mb2_rhomis_endline_april2020_id.601c4ecc38": [], "test.tree_aid.source_unique_onadata_tree_aid_rho_mis_mb6_2020_id.06f6c58c7a": [], "test.tree_aid.source_not_null_onadata_tree_aid_rho_mis_mb6_2020_id.e6117b44d4": [], "test.tree_aid.source_unique_onadata_mb6_income_agri_nrm_vcc_jan-mar22_id.3ce154b735": [], "test.tree_aid.source_not_null_onadata_mb6_income_agri_nrm_vcc_jan-mar22_id.7e6b2eeb63": [], "test.tree_aid.source_unique_onadata_tree_aid_rhomis_na6_endline_id.2a0eec5d18": [], "test.tree_aid.source_not_null_onadata_tree_aid_rhomis_na6_endline_id.8398398f6d": [], "test.tree_aid.source_unique_onadata_tree_aid_rhomis_2_0_niger_na4_id.4b6fd3f547": [], "test.tree_aid.source_not_null_onadata_tree_aid_rhomis_2_0_niger_na4_id.cdee9abf37": [], "test.tree_aid.source_unique_onadata_tree_aid_rhomis_na6_finale_id.e190dd457f": [], "test.tree_aid.source_not_null_onadata_tree_aid_rhomis_na6_finale_id.18bde80bdb": [], "test.tree_aid.source_unique_onadata_rhomis_treeaid_na4_endline_june2021_tele_final_id.9e48953ec7": [], "test.tree_aid.source_not_null_onadata_rhomis_treeaid_na4_endline_june2021_tele_final_id.4c4114764e": [], "test.tree_aid.source_unique_onadata_mc2_rho_mis_jul-sep22_final_id.16515c892e": [], "test.tree_aid.source_not_null_onadata_mc2_rho_mis_jul-sep22_final_id.9443341505": [], "test.tree_aid.source_unique_onadata_tree_aid_rho_mis_bc3_oct-dec2022_final_id.bf80769e43": [], "test.tree_aid.source_not_null_onadata_tree_aid_rho_mis_bc3_oct-dec2022_final_id.37876d4f60": [], "test.tree_aid.source_unique_onadata_mc3_rho_mis_oct-dec22_final_id.2107d53bf0": [], "test.tree_aid.source_not_null_onadata_mc3_rho_mis_oct-dec22_final_id.04aaccab48": [], "test.tree_aid.source_unique_onadata_ec0_mini_rho_mis_jan-mar2023_final_id.331a8dbd09": [], "test.tree_aid.source_not_null_onadata_ec0_mini_rho_mis_jan-mar2023_final_id.46be135da3": [], "test.tree_aid.source_unique_onadata_gc6_perimeter_village_may2021_survey_final_id.253a89e524": [], "test.tree_aid.source_not_null_onadata_gc6_perimeter_village_may2021_survey_final_id.3447545492": [], "model.tree_aid.enterprise_survey_derivatives": [], "model.tree_aid.enterprise_survey_product_combined": [], "model.tree_aid.enterprise_survey_product": ["model.tree_aid.enterprise_survey_product_combined"], "model.tree_aid.int_filter_values": [], "model.tree_aid.survey_test": [], "model.tree_aid.enterprise_surveys": ["model.tree_aid.enterprise_survey_derivatives", "model.tree_aid.enterprise_survey_derivatives", "model.tree_aid.enterprise_survey_product", "model.tree_aid.enterprise_survey_product", "model.tree_aid.enterprise_survey_product_combined", "model.tree_aid.int_filter_values", "model.tree_aid.survey_test", "test.tree_aid.empty_tables"], "model.tree_aid.int_land_restoration_activities": [], "model.tree_aid.land_surveys_planted": [], "model.tree_aid.land_surveys": ["model.tree_aid.int_filter_values", "model.tree_aid.int_land_restoration_activities", "model.tree_aid.land_surveys_planted", "model.tree_aid.survey_test", "test.tree_aid.empty_tables"], "model.tree_aid.rhomis_nrm_land_techniques": [], "model.tree_aid.rhomis_nrm_techniques": ["model.tree_aid.rhomis_nrm_land_techniques"], "model.tree_aid.rhomis_survey_aggregations": [], "model.tree_aid.stg_rhomis_data": ["model.tree_aid.rhomis_nrm_techniques", "model.tree_aid.rhomis_surveys"], "model.tree_aid.stg_core_questions_union": ["model.tree_aid.enterprise_survey_derivatives", "model.tree_aid.enterprise_survey_product", "model.tree_aid.enterprise_surveys", "model.tree_aid.land_surveys", "model.tree_aid.land_surveys_planted", "model.tree_aid.stg_rhomis_data"], "model.tree_aid.stg_survey_master": ["model.tree_aid.enterprise_survey_derivatives", "model.tree_aid.enterprise_survey_product", "model.tree_aid.enterprise_surveys", "model.tree_aid.land_surveys", "model.tree_aid.land_surveys_planted", "model.tree_aid.stg_core_questions_union", "model.tree_aid.stg_core_questions_union", "model.tree_aid.stg_rhomis_data"], "model.tree_aid.stg_survey_definitions_master": ["model.tree_aid.stg_core_questions_union", "model.tree_aid.stg_core_questions_union"], "model.tree_aid.stg_core_questions_master": ["model.tree_aid.enterprise_survey_derivatives", "model.tree_aid.enterprise_survey_product", "model.tree_aid.enterprise_surveys", "model.tree_aid.land_surveys", "model.tree_aid.land_surveys_planted", "model.tree_aid.stg_core_questions_union", "model.tree_aid.stg_core_questions_union", "model.tree_aid.stg_rhomis_data"], "model.tree_aid.beneficiaries": ["model.tree_aid.int_filter_values"], "model.tree_aid.stg_beneficiaries": ["model.tree_aid.beneficiaries"], "model.tree_aid.stg_beneficiaries_form_data": ["model.tree_aid.stg_beneficiaries"], "test.tree_aid.empty_tables": [], "test.tree_aid.source_unique_airbyte_surveys_form_id.16310e6b4f": [], "test.tree_aid.source_not_null_airbyte_surveys_form_id.67862aa9d2": [], "test.tree_aid.source_unique_airbyte_core_questions_id.53ef7260a7": [], "test.tree_aid.source_not_null_airbyte_core_questions_id.d86f814b39": [], "test.tree_aid.source_unique_airbyte_rhomis_indicators_id_hh.70d520ef17": [], "test.tree_aid.source_not_null_airbyte_rhomis_indicators_id_hh.e86e5fe090": [], "model.tree_aid.stg_rhomis_indicators": ["model.tree_aid.rhomis_surveys"], "model.tree_aid.rhomis_surveys": ["model.tree_aid.int_filter_values", "model.tree_aid.rhomis_survey_aggregations", "model.tree_aid.survey_test", "test.tree_aid.empty_tables"], "source.tree_aid.onadata.registry": [], "source.tree_aid.onadata.gb8_vte_edp_survey_apr-jun2022": ["test.tree_aid.source_not_null_onadata_gb8_vte_edp_survey_apr-jun2022_id.a519ca8ffa", "test.tree_aid.source_unique_onadata_gb8_vte_edp_survey_apr-jun2022_id.bb39fc7787"], "source.tree_aid.onadata.mb6_vte_edp_survey_apr-jun2022": ["test.tree_aid.source_not_null_onadata_mb6_vte_edp_survey_apr-jun2022_id.c22aeb3fc2", "test.tree_aid.source_unique_onadata_mb6_vte_edp_survey_apr-jun2022_id.dc183f146c"], "source.tree_aid.onadata.a_village_tree_enterprise_co-op_mb2_mali": ["test.tree_aid.source_not_null_onadata_a_village_tree_enterprise_co-op_mb2_mali_id.8c54939d9d", "test.tree_aid.source_unique_onadata_a_village_tree_enterprise_co-op_mb2_mali_id.c92c5a5ba0"], "source.tree_aid.onadata.a_vte_coop_assessment_gb1": ["test.tree_aid.source_not_null_onadata_a_vte_coop_assessment_gb1_id.0262004c72", "test.tree_aid.source_unique_onadata_a_vte_coop_assessment_gb1_id.3b962c2661"], "source.tree_aid.onadata.tree_aid_rhomis_bc4_apr-jun22_final": ["test.tree_aid.source_not_null_onadata_tree_aid_rhomis_bc4_apr-jun22_final_id.8f391b36bc", "test.tree_aid.source_unique_onadata_tree_aid_rhomis_bc4_apr-jun22_final_id.749d93e16c"], "source.tree_aid.onadata.burkina_ta_bb1_v1_3_1_tablet": ["test.tree_aid.source_not_null_onadata_burkina_ta_bb1_v1_3_1_tablet_id.aa7790be9f", "test.tree_aid.source_unique_onadata_burkina_ta_bb1_v1_3_1_tablet_id.c7047c5035"], "source.tree_aid.onadata.burkina_ta_baseline_v1_3_webform": ["test.tree_aid.source_not_null_onadata_burkina_ta_baseline_v1_3_webform_id.4ed897e765", "test.tree_aid.source_unique_onadata_burkina_ta_baseline_v1_3_webform_id.30c8fd9b0d"], "source.tree_aid.onadata.ta_rho_mis_bb6_oct_dec21": ["test.tree_aid.source_not_null_onadata_ta_rho_mis_bb6_oct_dec21_id.b76b7b158b", "test.tree_aid.source_unique_onadata_ta_rho_mis_bb6_oct_dec21_id.cb2a2a63c0"], "source.tree_aid.onadata.ta_rho_mis_bc1_endline_oct2020_final": ["test.tree_aid.source_not_null_onadata_ta_rho_mis_bc1_endline_oct2020_final_id.32dcf43437", "test.tree_aid.source_unique_onadata_ta_rho_mis_bc1_endline_oct2020_final_id.33c0709f05"], "source.tree_aid.onadata.household_income_mtr_bc1": ["test.tree_aid.source_not_null_onadata_household_income_mtr_bc1_id.5cf5fc2e12", "test.tree_aid.source_unique_onadata_household_income_mtr_bc1_id.6592797a5c"], "source.tree_aid.onadata.voice_choice_control_mtr_bc1": ["test.tree_aid.source_not_null_onadata_voice_choice_control_mtr_bc1_id.76255dcbc2", "test.tree_aid.source_unique_onadata_voice_choice_control_mtr_bc1_id.d708109868"], "source.tree_aid.onadata.ta_rhomis_eco_q1_2022": ["test.tree_aid.source_not_null_onadata_ta_rhomis_eco_q1_2022_id.1833631958", "test.tree_aid.source_unique_onadata_ta_rhomis_eco_q1_2022_id.20f923d61c"], "source.tree_aid.onadata.ethiopia_ea3_eb5_1_3_4": ["test.tree_aid.source_not_null_onadata_ethiopia_ea3_eb5_1_3_4_id.888a32f1ed", "test.tree_aid.source_unique_onadata_ethiopia_ea3_eb5_1_3_4_id.d0b90c6208"], "source.tree_aid.onadata.ethiopia_meki_2_extra": ["test.tree_aid.source_not_null_onadata_ethiopia_meki_2_extra_id.050b572bea", "test.tree_aid.source_unique_onadata_ethiopia_meki_2_extra_id.0bb7330c0b"], "source.tree_aid.onadata.ethiopia_meki_2": ["test.tree_aid.source_not_null_onadata_ethiopia_meki_2_id.b3d085d711", "test.tree_aid.source_unique_onadata_ethiopia_meki_2_id.cbfc70ce0f"], "source.tree_aid.onadata.eb8_2019": ["test.tree_aid.source_not_null_onadata_eb8_2019_id.98a94ac07c", "test.tree_aid.source_unique_onadata_eb8_2019_id.f7b3def8b9"], "source.tree_aid.onadata.ta_rhomis_eb3eb8_2020": ["test.tree_aid.source_not_null_onadata_ta_rhomis_eb3eb8_2020_id.207cf662ee", "test.tree_aid.source_unique_onadata_ta_rhomis_eb3eb8_2020_id.036d74339b"], "source.tree_aid.onadata.ta_rhomis_gb8_endline_jan-mar2021_consolidated": ["test.tree_aid.source_not_null_onadata_ta_rhomis_gb8_endline_jan-mar2021_consolidated_id.5c43b81e9c", "test.tree_aid.source_unique_onadata_ta_rhomis_gb8_endline_jan-mar2021_consolidated_id.2008927689"], "source.tree_aid.onadata.gb1_ta_baseline_v1_3_3": ["test.tree_aid.source_not_null_onadata_gb1_ta_baseline_v1_3_3_id.9aecd78f35", "test.tree_aid.source_unique_onadata_gb1_ta_baseline_v1_3_3_id.27ffa08831"], "source.tree_aid.onadata.tree_aid_rhomis_gb8_final": ["test.tree_aid.source_not_null_onadata_tree_aid_rhomis_gb8_final_id.2a076200ce", "test.tree_aid.source_unique_onadata_tree_aid_rhomis_gb8_final_id.0bc9453200"], "source.tree_aid.onadata.ta_rhomis_gb1_2021": ["test.tree_aid.source_not_null_onadata_ta_rhomis_gb1_2021_id.90fb347399", "test.tree_aid.source_unique_onadata_ta_rhomis_gb1_2021_id.c38987e9fe"], "source.tree_aid.onadata.ta_rho_mis_gc6_2021": ["test.tree_aid.source_not_null_onadata_ta_rho_mis_gc6_2021_id.f85f8fda91", "test.tree_aid.source_unique_onadata_ta_rho_mis_gc6_2021_id.4b0c6bbcac"], "source.tree_aid.onadata.ta_rhomis_gc3_oct_2020": ["test.tree_aid.source_not_null_onadata_ta_rhomis_gc3_oct_2020_id.7affd66d1c", "test.tree_aid.source_unique_onadata_ta_rhomis_gc3_oct_2020_id.8f15065350"], "source.tree_aid.onadata.mb2_baseline": ["test.tree_aid.source_not_null_onadata_mb2_baseline_id.9788ffb6eb", "test.tree_aid.source_unique_onadata_mb2_baseline_id.b7b188a1df"], "source.tree_aid.onadata.mb2_rhomis_endline_april2020": ["test.tree_aid.source_not_null_onadata_mb2_rhomis_endline_april2020_id.601c4ecc38", "test.tree_aid.source_unique_onadata_mb2_rhomis_endline_april2020_id.81957106dc"], "source.tree_aid.onadata.tree_aid_rho_mis_mb6_2020": ["test.tree_aid.source_not_null_onadata_tree_aid_rho_mis_mb6_2020_id.e6117b44d4", "test.tree_aid.source_unique_onadata_tree_aid_rho_mis_mb6_2020_id.06f6c58c7a"], "source.tree_aid.onadata.mb6_income_agri_nrm_vcc_jan-mar22": ["test.tree_aid.source_not_null_onadata_mb6_income_agri_nrm_vcc_jan-mar22_id.7e6b2eeb63", "test.tree_aid.source_unique_onadata_mb6_income_agri_nrm_vcc_jan-mar22_id.3ce154b735"], "source.tree_aid.onadata.tree_aid_rhomis_na6_endline": ["test.tree_aid.source_not_null_onadata_tree_aid_rhomis_na6_endline_id.8398398f6d", "test.tree_aid.source_unique_onadata_tree_aid_rhomis_na6_endline_id.2a0eec5d18"], "source.tree_aid.onadata.tree_aid_rhomis_2_0_niger_na4": ["test.tree_aid.source_not_null_onadata_tree_aid_rhomis_2_0_niger_na4_id.cdee9abf37", "test.tree_aid.source_unique_onadata_tree_aid_rhomis_2_0_niger_na4_id.4b6fd3f547"], "source.tree_aid.onadata.tree_aid_rhomis_na6_finale": ["test.tree_aid.source_not_null_onadata_tree_aid_rhomis_na6_finale_id.18bde80bdb", "test.tree_aid.source_unique_onadata_tree_aid_rhomis_na6_finale_id.e190dd457f"], "source.tree_aid.onadata.rhomis_treeaid_na4_endline_june2021_tele_final": ["test.tree_aid.source_not_null_onadata_rhomis_treeaid_na4_endline_june2021_tele_final_id.4c4114764e", "test.tree_aid.source_unique_onadata_rhomis_treeaid_na4_endline_june2021_tele_final_id.9e48953ec7"], "source.tree_aid.onadata.mc2_rho_mis_jul-sep22_final": ["test.tree_aid.source_not_null_onadata_mc2_rho_mis_jul-sep22_final_id.9443341505", "test.tree_aid.source_unique_onadata_mc2_rho_mis_jul-sep22_final_id.16515c892e"], "source.tree_aid.onadata.tree_aid_rho_mis_bc3_oct-dec2022_final": ["test.tree_aid.source_not_null_onadata_tree_aid_rho_mis_bc3_oct-dec2022_final_id.37876d4f60", "test.tree_aid.source_unique_onadata_tree_aid_rho_mis_bc3_oct-dec2022_final_id.bf80769e43"], "source.tree_aid.onadata.mc3_rho_mis_oct-dec22_final": ["test.tree_aid.source_not_null_onadata_mc3_rho_mis_oct-dec22_final_id.04aaccab48", "test.tree_aid.source_unique_onadata_mc3_rho_mis_oct-dec22_final_id.2107d53bf0"], "source.tree_aid.onadata.ec0_mini_rho_mis_jan-mar2023_final": ["test.tree_aid.source_not_null_onadata_ec0_mini_rho_mis_jan-mar2023_final_id.46be135da3", "test.tree_aid.source_unique_onadata_ec0_mini_rho_mis_jan-mar2023_final_id.331a8dbd09"], "source.tree_aid.onadata.gc6_perimeter_village_may2021_survey_final": ["test.tree_aid.source_not_null_onadata_gc6_perimeter_village_may2021_survey_final_id.3447545492", "test.tree_aid.source_unique_onadata_gc6_perimeter_village_may2021_survey_final_id.253a89e524"], "source.tree_aid.csv.rhomis_indicators": ["model.tree_aid.stg_rhomis_indicators"], "source.tree_aid.airbyte.surveys": ["model.tree_aid.stg_survey_master", "test.tree_aid.source_not_null_airbyte_surveys_form_id.67862aa9d2", "test.tree_aid.source_unique_airbyte_surveys_form_id.16310e6b4f"], "source.tree_aid.airbyte.survey_definitions": ["model.tree_aid.stg_survey_definitions_master"], "source.tree_aid.airbyte.core_questions": ["model.tree_aid.stg_core_questions_master", "test.tree_aid.source_not_null_airbyte_core_questions_id.d86f814b39", "test.tree_aid.source_unique_airbyte_core_questions_id.53ef7260a7"], "source.tree_aid.airbyte.rhomis_indicators": ["model.tree_aid.stg_rhomis_indicators", "test.tree_aid.source_not_null_airbyte_rhomis_indicators_id_hh.e86e5fe090", "test.tree_aid.source_unique_airbyte_rhomis_indicators_id_hh.70d520ef17"], "source.tree_aid.airbyte.projects": ["model.tree_aid.rhomis_survey_aggregations"], "source.tree_aid.airbyte.trees_planted_legacy": ["model.tree_aid.land_surveys_planted"], "source.tree_aid.airbyte.country_hh_size": [], "source.tree_aid.airbyte.vte_groups_legacy": [], "source.tree_aid.airbyte.land_area_legacy": ["model.tree_aid.land_surveys"], "source.tree_aid.airbyte.beneficiaries_list": ["model.tree_aid.stg_beneficiaries"], "source.tree_aid.airbyte.sbm_beneficiary_list_1": ["model.tree_aid.stg_beneficiaries_form_data", "model.tree_aid.stg_beneficiaries_form_data"], "source.tree_aid.airbyte.sbm_mb6_r_ho_mis_endline__apr__jun2023": [], "source.tree_aid.airbyte.sbm_mc2_r_ho_mis__jul__sep22_final": [], "source.tree_aid.airbyte.chc_mc2_r_ho_mis__jul__sep22_final": [], "source.tree_aid.airbyte.sbm_bc3_product_valu___juil_sept_2023_final": [], "source.tree_aid.airbyte.sbm_bc3_product_valu__es_repeat_derivatives": [], "source.tree_aid.airbyte.chc_bc3_product_valu___juil_sept_2023_final": [], "source.tree_aid.airbyte.sbm_bc3_land_restora__lanted_repeat_planted": [], "source.tree_aid.airbyte.sbm_bc3_land_restoration_survey_2022": []}, "group_map": {}}